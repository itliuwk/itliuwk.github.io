<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://itliuwk.github.io</id>
    <title>刘伟坤</title>
    <updated>2019-05-30T06:40:10.442Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://itliuwk.github.io"/>
    <link rel="self" href="https://itliuwk.github.io/atom.xml"/>
    <logo>https://itliuwk.github.io/images/avatar.png</logo>
    <icon>https://itliuwk.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 刘伟坤</rights>
    <entry>
        <title type="html"><![CDATA[最全的 JavaScript 知识总结]]></title>
        <id>https://itliuwk.github.io/post/zui-quan-de-javascript-zhi-shi-zong-jie</id>
        <link href="https://itliuwk.github.io/post/zui-quan-de-javascript-zhi-shi-zong-jie">
        </link>
        <updated>2018-06-30T00:15:43.000Z</updated>
        <summary type="html"><![CDATA[<p>本文主要总结了JavaScript 常用功能总结，如一些常用的JS 对象，基本数据结构，功能函数等，还有一些常用的设计模式...</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文主要总结了JavaScript 常用功能总结，如一些常用的JS 对象，基本数据结构，功能函数等，还有一些常用的设计模式...</p>
<!--more-->
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">&nbsp;</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: large;"><span style="color: #000000;">目录：</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">众所周知，JavaScript是动态的面向对象的编程语言，能够实现以下效果：</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">1. 丰富Web 网页功能</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">2. 丰富Web界面</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">3. 实现本地或远程存储。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">4. 实现分布式网络应用的前端组件，并在后台进行数据存储管理。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">5. 使用JavaScript可以实现完整的分布式Web 应用。</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: large;"><span style="color: #000000;">JavaScript 中的数据类型</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">JavaScript 提供三种元数据类型，string，number，和Boolean,可使用typeof(v) 测试变量V 的类型，typeof(v)==="number"</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">提供五种基本的引用类型：Object, Array, Function, Date 及RegExp。数组，函数，日期和正则表达式是特殊类型，但是严格来讲，日期和正则表达式是元数据类型，可封装在其他对象中。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">&nbsp;</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">JS 中变量类型，数组元素类型，函数参数以及返回值的类型不需要声明类型，类型之间的转换是自动执行的。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">&nbsp;</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">变量值可以是：</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">1. 数值：如字符串，数字或布尔值。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">2. 对象引用： 可引用典型对象，也可以是数据，函数，日期或正则表达式。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">3. 特殊数据值，Null,是典型的用于初始化对象的默认值。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">4. 特殊数据undefined，常用于已被定义，但未赋值的变量。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">&nbsp;</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">string 是一系列的Unicode 字符串，String 如“hello world”,’A3FO’或空字符串“”，字符串连接可通过+操作符来执行，也可以使用=号来验证两个字符串是否相等；</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">&nbsp;</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">if (firstName + lastName === "James Bond") ...</span></span></span><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">numeric 表示64位的浮点数，在JS 中没有明显的区分整形和浮点数，如果一个表达式的值不等于某个数字，那么它的值可设为NaN,表示非数字，可联合isNaN使用。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br>如下表是详细的类型测试和转换</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><a href="http://images2015.cnblogs.com/blog/139239/201601/139239-20160120162420984-1701763792.png" target="_blank"><img id="aimg_B0Oow" class="zoom" src="http://images2015.cnblogs.com/blog/139239/201601/139239-20160120162421859-1583318774.png" alt="" height="336" border="0"></a></span></span></span></p>
<p>
<br><br><span style="font-family: 微软雅黑;"><span style="font-size: large;"><span style="color: #000000;">变量作用域范围</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">目前，JavaScript，ES5提供两种作用域类型：全局变量及函数作用域，没有块作用域。块作用域的范围不太明确，所以应当避免块作用域的使用。如下代码，尽管是开发人员常用的Pattern,却是一个陷阱。</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">function foo() {<br>&nbsp;&nbsp;for (var i=0; i &lt; 10; i++) {<br>&nbsp; &nbsp; ...&nbsp;&nbsp;// do something with i<br>&nbsp;&nbsp;}<br>}<br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">所有的变量声明最好是在函数的开始位置。在JS，ES6版本中支持块作用域，采用关键字let 定义变量。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">&nbsp;</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: large;"><span style="color: #000000;">严格模式（Strict Mode）</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">从ES5开始， 严格模式用于检测运行时的错误，在严格模式下，所有的变量必须声明，如果给未声明的变量赋值会抛出异常。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">在JavaScript 文件或&lt;Script&gt;元素内，通过输入以下代码切换到严格模式：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">use strict;</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">建议采用严格模式，除非项目依赖的库不兼容严格模式。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">&nbsp;</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: large;"><span style="color: #000000;">多种对象</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">JS中的对象概念不同于OO或UML中的对象，尤其是在JS中对象不需要实例化，也可以有自己的方法，不仅有property slots，也包含method slots。除此之外还包含key-value slots；因此他们总共有三种Slots， 而常见的对象只有属性槽。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">JS对象是由一系列的name-value 组成的Slot。而name 可以是属性名称，函数名称，映射名称。对象可通过一种特定的方式创建，使用JS 对象声明语法（JSON），而不需要实例化一个类。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">代码如下：</span></span></span></p>
<div align="left"><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var person1 = { lastName:"Smith", firstName:"Tom"};</span></span></span></div>
<div align="left"><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var o1 = Object.create( null);&nbsp;&nbsp;</span></span></span></div>
<div align="left"><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">// an empty object with no slots</span></span></span></div>
<div align="left"><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">&nbsp;</span></span></span></div>
<div align="left"><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">如果Slot 的name 是合法的JS 标识符，则Slot可表示属性，方法，或键值对。如果名称含有一些特殊字符如空格，则Slot代表键值对，是一种映射元素，如下：</span></span></span></div>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Property Slot&nbsp;&nbsp;中的name:</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">1. data value 属性，在这种情况下，Value 表示变量值，或是值表达式。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">2. object-valued 属性，Value 表示对象的引用或对象表达式。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">method Slot 表示的是JS 函数，它的值是JS 函数定义表达式：</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">&nbsp;</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Object 属性可以使用两种方法来访问：</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">1. 使用”.”(与C++ 和Java的类似)：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">person1.lastName = "Smith"</span></span></span><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">2. 使用map：</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">person1["lastName"] = "Smith"</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">JS 对象能够用于各种途径，以下是五种常见情况：</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">1. Record是Property slots集合，如：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var myRecord = {firstName:"Tom", lastName:"Smith", age:26}</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">2. map 如Hash map，数组，hash表；</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var numeral2number = {"one":"1", "two":"2", "three":"3"}</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">3. Untyped 对象不需要实例化类，它可能包含property slot 和function slots:</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var person1 = {&nbsp;<br>&nbsp;&nbsp;lastName: "Smith",&nbsp;<br>&nbsp;&nbsp;firstName: "Tom",<br>&nbsp;&nbsp;getFullName: function () {<br>&nbsp; &nbsp; return this.firstName +" "+ this.lastName;&nbsp;<br>&nbsp;&nbsp;}&nbsp;&nbsp;<br>};</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Array List</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">JS array 即逻辑数据结构，通过数组下标访问。如数组初始化：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var a = [1,2,3];</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">JS数组可动态增长，因此数组索引有可能比实际元素个数多，如下：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">a[4] = 7;</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">数组循环：</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">for (i=0; i &lt; a.length; i++) { ...}</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">数组是特殊的对象类型，因此有很多情况下，需要判断变量是否为数组类型，使用IsArray方法：Array.isArray( a)。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">添加新元素到数组：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">a.push( newElement);</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br>删除：<br>a.splice( i, 1);</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br>查找：<br>if (a.indexOf(v) &gt; -1)&nbsp;&nbsp;...</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br>循环：<br>var i=0;<br>for (i=0; i &lt; a.length; i++) {<br>&nbsp;&nbsp;console.log( a<em>);</em><br>}</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">如果数组较小，可使用foreach 循环：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">a.forEach( function (elem) {<br>&nbsp;&nbsp;console.log( elem);<br>})&nbsp;</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">JS 也提供克隆数组的函数：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var clone = a.slice(0);&nbsp;</span></span></span><br><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Maps</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">map 提供key 到值得映射。JS map 是一串字符集，可包含空格：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var myTranslation = {&nbsp;<br>&nbsp; &nbsp; "my house": "mein Haus",&nbsp;<br>&nbsp; &nbsp; "my boat": "mein Boot",&nbsp;<br>&nbsp; &nbsp; "my horse": "mein Pferd"<br>}</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br>增加：<br>myTranslation["my car"] = "mein Auto";</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br>删除：<br>myTranslation["my car"] = "mein Auto";</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br>查找：<br>if ("my bike" in myTranslation)&nbsp;&nbsp;...</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br>循环：<br>var i=0, key="", keys=[];<br>keys = Object.keys( m);<br>for (i=0; i &lt; keys.length; i++) {<br><em>&nbsp;&nbsp;key = keys;</em><br>console.log( m[key]);<br>}</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br>如果map 较小可使用foreach 语句：<br>Object.keys( m).forEach( function (key) {<br>&nbsp;&nbsp;console.log( m[key]);<br>})&nbsp;<br>复制map<br>var clone = JSON.parse( JSON.stringify( m))</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br>小结：JavaScript 支持4种基本的数据结构。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">1：array lists：如["one","two","three"]，special JS对象</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">2：records：特殊的JS 对象，如{firstName:"Tom", lastName:"Smith"}；</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">3：maps： 如{"one":1, "two":2, "three":3}</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">4：entity 表：如下表所示,是一种特殊的map，值是有固定ID的记录。</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><a href="http://images2015.cnblogs.com/blog/139239/201601/139239-20160119135124906-373867481.png" target="_blank"><img id="aimg_MP74g" class="zoom" src="http://images2015.cnblogs.com/blog/139239/201601/139239-20160119135125531-956491583.png" alt="" height="179" border="0"></a></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">record，map，entity 在实际应用中没有明显的区分，只是概念上的区分。对JS 引擎而言，都是对象。但是从概念上是有区分的。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">&nbsp;</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">函数</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">如表1 所示，函数是特殊的JS 对象，有name 属性和length属性表示参数的个数，如下，判断v是否指向函数：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">if (typeof( v) === "function") {...}</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">函数定义：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var myFunction = function theNameOfMyFunction () {...}</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">theNameOfMyFunction 是可选的，如果省略函数名称，则称该函数为匿名函数。通常，函数是通过变量来调用的，如上面的代码，则表示</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">myFunction 会调用myFunction（）函数，而不是使用theNameOfMyFunction()调用。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">匿名函数表达式在其他编程语言中称为lambda 表达式。如下代码是匿名函数。可以与预定义的sort函数对比：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var list = [[1,2],[1,3],[1,1],[2,1]];&nbsp;<br>list.sort( function (x,y) {&nbsp;<br>&nbsp;&nbsp;return ((x[0] === y[0]) ? x[1]-y[1] : x[0]-y[0]);<br>});</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">函数声明：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">function theNameOfMyFunction () {...}<br>与代码<br>var theNameOfMyFunction = function theNameOfMyFunction () {...}</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">等价；</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">声明了函数theNameOfMyFunction ，并使用theNameOfMyFunction 变量来引用函数。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">JS 提供函数内联，closure机制允许JS 函数调用函数之外的使用变量。函数可以创建closure&nbsp;来存储当前的环境。如下，不需要通过参数将外部变量的结果传给内部函数，它本身就是可用的。</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var sum = function (numbers) {<br>&nbsp;&nbsp;var result = 0;<br>&nbsp;&nbsp;numbers.forEach( function (n) {<br>&nbsp; &nbsp;&nbsp; &nbsp;result += n;<br>&nbsp;&nbsp;});<br>&nbsp;&nbsp;return result;<br>};<br>console.log( sum([1,2,3,4]));<br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">当执行一个方法时，可以使用内置arguments 对象访问函数内的参数，arguments 对象与数组使用方法类似，有长度属性，也有索引，并且可以使用For语句来循环迭代。但是由于它并不是Array 实例，因此JS arrary的部分方法无法应用如foreach。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">arguments 对象的元素个数与函数参数个数相同，也可以定义方法的时候不指定参数个数，在调用时，可为函数赋多个参数，如：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var sum = function () {<br>&nbsp;&nbsp;var result = 0, i=0;<br>&nbsp;&nbsp;for (i=0; i &lt; arguments.length; i++) {<br>&nbsp; &nbsp; result = result + arguments;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return result;<br>};<br>console.log( sum(0,1,1,2,3,5,8));&nbsp;&nbsp;// 20<br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">方法是在构造函数的原型上定义的，可以通过对象创建的构造器调用，如Array.prototype.forEach；Array表示构造器，调用类的实例作为上下文对象参考的，如下： 在foreach中numbers表示上下文对象：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var numbers = [1,2,3];&nbsp;&nbsp;// create an instance of Array<br>numbers.forEach( function (n) {<br>&nbsp;&nbsp;console.log( n);<br>});<br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">无论原型方法是否被上下文对象调用，但是只要是参数为对象，可以使用JS函数的Call 方法来辅助调用对象。如下，我们可以使用foreach 循环方法：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var sum = function () {<br>&nbsp;&nbsp;var result = 0;<br>&nbsp;&nbsp;Array.prototype.forEach.call( arguments, function (n) {<br>&nbsp; &nbsp; result = result + n;<br>&nbsp;&nbsp;});<br>&nbsp;&nbsp;return result;<br>};<br><br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Function.prototype.call方法和apply都是为了改变某个函数运行时的 context 即上下文而存在的。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">&nbsp;</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">定义和使用类</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">类是面向对象中的基本概念，对象的实例化称为类。JS中定义类需要满足以下五个需求：1.指定类的名称，实例级别的属性和方法，类级别的属性和方法。2. 是可预测的实力，能够用于验证是否是某一对象的实例。3. 实例级别的属性用于检测对象的直接类型。4. 属性继承5.方法继承。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">除此之外还支持对哦集成和多分类。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">JS中对类没有统一的定义规范，可以使用不同代码模式来定义类，并应用于多种不同的框架。JS中最常用的定义类的方法如下：</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">1. 构造函数规范，可通过prototype chain实现方法继承，并支持创建新的类实例。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">2. factory 对象，用于预定义Object.create 方法来创建新实例。该方法中基于构造函数的继承机制可以被其他机制代替。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">创建App都需要使用类，因此经常需要定义类之间的关系，所以必须保证，使用相同类</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">&nbsp;</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Constructor-based classes</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">只有ES6引入了定义基于构造器的类。新语法支持定义一些简单的类继承，具体步骤如下：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Step 1.a 基类Person 具有两个属性，first Name 和Last Name，实例层的方法toString和静态方法checkLastName；</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">class Person {<br>&nbsp;&nbsp;constructor( first, last) {<br>&nbsp; &nbsp; this.firstName = first;<br>&nbsp; &nbsp; this.lastName = last;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;toString() {<br>&nbsp; &nbsp; return this.firstName + " " +<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;this.lastName;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;static checkLastName( ln) {<br>&nbsp; &nbsp; if (typeof(ln)!=="string" ||&nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;ln.trim()==="") {<br>&nbsp; &nbsp;&nbsp; &nbsp;console.log("Error: " +<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; "invalid last name!");<br>&nbsp; &nbsp; }<br>&nbsp;&nbsp;}<br>}<br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Step 1.b 类层次的属性定义：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Person.instances = {};</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">在第二步中，会定义一个带有其他属性和方法的子类，也有可能重写父类的相关方法：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">class Student extends Person {&nbsp;&nbsp;constructor( first, last, studNo) {<br>&nbsp; &nbsp; super.constructor( first, last);<br>&nbsp; &nbsp; this.studNo = studNo;&nbsp;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;// method overrides superclass method<br>&nbsp;&nbsp;toString() {<br>&nbsp; &nbsp; return super.toString() + "(" +<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;this.studNo +")";<br>&nbsp;&nbsp;}<br>}<br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">ES5中，可以定义继承基于构造器类的子类。如下：</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Step1.a 首先定义构造函数，能够隐式的定义类的属性并赋值；</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">function Person( first, last) {<br>&nbsp;&nbsp;this.firstName = first;&nbsp;<br>&nbsp;&nbsp;this.lastName = last;&nbsp;<br>}<br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">注意，上述代码中的this 指的是新生成的对象，当构造函数被调用时，该对象就已经生成了。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Step1.b 定义实例层的方法：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Person.prototype.toString = function () {<br>&nbsp;&nbsp;return this.firstName + " " + this.lastName;<br>}</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Step 1.c 定义静态方法：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Person.checkLastName = function (ln) {<br>&nbsp;&nbsp;if (typeof(ln)!=="string" || ln.trim()==="") {<br>&nbsp; &nbsp; console.log("Error: invalid last name!");<br>&nbsp;&nbsp;}<br>}</span></span></span><br><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;"><br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Step 1.d 定义类层次的静态属性</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Step 2.a 定义子类：<br>&nbsp; &nbsp;1:&nbsp;&nbsp;function Student( first, last, studNo) {<br>&nbsp; &nbsp;2:&nbsp; &nbsp; // invoke superclass constructor<br>&nbsp; &nbsp;3:&nbsp; &nbsp; Person.call( this, first, last);<br>&nbsp; &nbsp;4:&nbsp; &nbsp; // define and assign additional properties<br>&nbsp; &nbsp;5:&nbsp; &nbsp; this.studNo = studNo;&nbsp;&nbsp;<br>&nbsp; &nbsp;6:&nbsp;&nbsp;}<br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">通过调用超类的构造函数Person.call( this, ...)，来创建新对象。其中This指的是Student，Property Slots 在超类的构造函数中已经创建（(firstName 和lastName） 以及其他子类相关的属性。在这种情况下可使用Property Inheritance 机制保证所有的属性已经被定义且被创建。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Step2b,通过构造函数的prototype 属性安装method inheritance 。如下，分配了一个新对象创建子类型构造函数的Prototype 属性，并做出适当的调整：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">// Student inherits from PersonStudent.prototype = Object.create(&nbsp; &nbsp;&nbsp;&nbsp;Person.prototype);// adjust the subtype's constructor propertyStudent.prototype.constructor = Student;</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Step2c， 重新定义子类方法重写超类方法：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">// Student inherits from Person<br>Student.prototype = Object.create(&nbsp;<br>&nbsp; &nbsp; Person.prototype);<br>// adjust the subtype's constructor property<br>Student.prototype.constructor = Student;<br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">基于构造器类的实例化是通过应用new 操作符来创建的，并提供合适的构造参数：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">Student.prototype.toString = function () {<br>&nbsp;&nbsp;return Person.prototype.toString.call( this) +<br>&nbsp; &nbsp;&nbsp; &nbsp;"(" + this.studNo + ")";<br>};<br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">方法toString 通过pers1. 来调用：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">alert("The full name of the person are: " +&nbsp; &nbsp;&nbsp; &nbsp;pers1.toString());<br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">在JS中，prototype 是具有method slots 的对象，可以通过JS方法或属性槽继承的。</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">&nbsp;</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">基于Factory 的类</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">在该方法中定义了JS 对象Person，含有特殊的Create 方法来调用预定义的Object.Create方法，创建Person类型的对象；</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var Person = {<br>&nbsp;&nbsp;name: "Person",<br>&nbsp;&nbsp;properties: {<br>&nbsp; &nbsp; firstName: {range:"NonEmptyString", label:"First name",&nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;writable: true, enumerable: true},<br>&nbsp; &nbsp; lastName: {range:"NonEmptyString", label:"Last name",&nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;writable: true, enumerable: true}<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;methods: {<br>&nbsp; &nbsp; getFullName: function () {<br>&nbsp; &nbsp;&nbsp; &nbsp;return this.firstName +" "+ this.lastName;&nbsp;<br>&nbsp; &nbsp; }<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;create: function (slots) {<br>&nbsp; &nbsp; // create object<br>&nbsp; &nbsp; var obj = Object.create( this.methods, this.properties);<br>&nbsp; &nbsp; // add special property for *direct type* of object<br>&nbsp; &nbsp; Object.defineProperty( obj, "type",&nbsp;<br>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;{value: this, writable: false, enumerable: true});<br>&nbsp; &nbsp; // initialize object<br>&nbsp; &nbsp; Object.keys( slots).forEach( function (prop) {<br>&nbsp; &nbsp;&nbsp; &nbsp;if (prop in this.properties) obj[prop] = slots[prop];<br>&nbsp; &nbsp; })<br>&nbsp; &nbsp; return obj;<br>&nbsp;&nbsp;}<br>};<br></span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">注意JS对象Person实际表示的是factory-based 类。factory-based类的实例化是通过调用它自己的Create方法实现的：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">var pers1 = Person.create( {firstName:"Tom", lastName:"Smith"});</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">getFullName 方法是通过pers1. 调用的，如下：</span></span></span></p>
<p>
<span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">alert("The full name of the person are: " + pers1.getFullName());</span></span></span></p>
<p><span style="font-family: 微软雅黑;"><span style="font-size: medium;"><span style="color: #000000;">每个属性的声明都是使用Object.Create 声明的，其中包含三个参数及值，'descriptors'writable: true and enumerable: true；如上面第五行的。</span></span></span></p></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[你有必要知道的 25 个 JavaScript 面试题]]></title>
        <id>https://itliuwk.github.io/post/ni-you-bi-yao-zhi-dao-de-25-ge-javascript-mian-shi-ti</id>
        <link href="https://itliuwk.github.io/post/ni-you-bi-yao-zhi-dao-de-25-ge-javascript-mian-shi-ti">
        </link>
        <updated>2018-06-13T04:02:14.000Z</updated>
        <summary type="html"><![CDATA[<p>1、使用 typeof bar === &quot;object&quot; 判断 bar 是不是一个对象有神马潜在的弊端？如何避免这种弊端？...</p>
]]></summary>
        <content type="html"><![CDATA[<p>1、使用 typeof bar === &quot;object&quot; 判断 bar 是不是一个对象有神马潜在的弊端？如何避免这种弊端？...</p>
<!--more-->
<p>使用 typeof 的弊端是显而易见的(这种弊端同使用 instanceof)：</p>
<pre><code>let obj = {};
let arr = [];

console.log(typeof obj === 'object');  //true
console.log(typeof arr === 'object');  //true
console.log(typeof null === 'object');  //true
</code></pre>
<p>从上面的输出结果可知，typeof bar === &quot;object&quot; 并不能准确判断 bar 就是一个 Object。可以通过Object.prototype.toString.call(bar) === &quot;[object Object]&quot; 来避免这种弊端：</p>
<pre><code>let obj = {};
let arr = [];

console.log(Object.prototype.toString.call(obj));  //[object Object]
console.log(Object.prototype.toString.call(arr));  //[object Array]
console.log(Object.prototype.toString.call(null));  //[object Null]
</code></pre>
<p>而 [ ] === false 是返回 false 的。
2、下面的代码会在 console 输出神马？为什么？</p>
<pre><code class="language-(function(){">  var a = b = 3;
})();

console.log(&quot;a defined? &quot; + (typeof a !== 'undefined'));   
console.log(&quot;b defined? &quot; + (typeof b !== 'undefined'));
这跟变量作用域有关，输出换成下面的：

console.log(b); //3
console,log(typeof a); //undefined
拆解一下自执行函数中的变量赋值：

b = 3;
var a = b;
所以 b 成了全局变量，而 a 是自执行函数的一个局部变量。
</code></pre>
<p>3、下面的代码会在 console 输出神马？为什么？</p>
<pre><code>var myObject = {
    foo: &quot;bar&quot;,
    func: function() {
        var self = this;
        console.log(&quot;outer func:  this.foo = &quot; + this.foo);
        console.log(&quot;outer func:  self.foo = &quot; + self.foo);
        (function() {
            console.log(&quot;inner func:  this.foo = &quot; + this.foo);
            console.log(&quot;inner func:  self.foo = &quot; + self.foo);
        }());
    }
};
myObject.func();
第一个和第二个的输出不难判断，在 ES6 之前，JavaScript 只有函数作用域，所以 func 中的 IIFE 有自己的独立作用域，并且它能访问到外部作用域中的 self，所以第三个输出会报错，因为 this 在可访问到的作用域内是 undefined，第四个输出是 bar。如果你知道闭包，也很容易解决的：

(function(test) {
            console.log(&quot;inner func:  this.foo = &quot; + test.foo);  //'bar'
            console.log(&quot;inner func:  self.foo = &quot; + self.foo);
}(self));
如果对闭包不熟悉，可以戳此：从作用域链谈闭包
</code></pre>
<p>4、将 JavaScript 代码包含在一个函数块中有神马意思呢？为什么要这么做？</p>
<pre><code>
换句话说，为什么要用立即执行函数表达式（Immediately-Invoked Function Expression）。

IIFE 有两个比较经典的使用场景，一是类似于在循环中定时输出数据项，二是类似于 JQuery/Node 的插件和模块开发。

for(var i = 0; i &lt; 5; i++) {
    setTimeout(function() {
        console.log(i);  
    }, 1000);
}
上面的输出并不是你以为的0，1，2，3，4，而输出的全部是5，这时 IIFE 就能有用了：

for(var i = 0; i &lt; 5; i++) {
    (function(i) {
      setTimeout(function() {
        console.log(i);  
      }, 1000);
    })(i)
}
而在 JQuery/Node 的插件和模块开发中，为避免变量污染，也是一个大大的 IIFE：

(function($) { 
        //代码
 } )(jQuery);
</code></pre>
<p>5、在严格模式('use strict')下进行 JavaScript 开发有神马好处？</p>
<pre><code>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;
消除代码运行的一些不安全之处，保证代码运行的安全；
提高编译器效率，增加运行速度；
为未来新版本的Javascript做好铺垫。
</code></pre>
<p>6、下面两个函数的返回值是一样的吗？为什么？</p>
<pre><code>function foo1()
{
  return {
      bar: &quot;hello&quot;
  };
}

function foo2()
{
  return
  {
      bar: &quot;hello&quot;
  };
}
在编程语言中，基本都是使用分号（;）将语句分隔开，这可以增加代码的可读性和整洁性。而在JS中，如若语句各占独立一行，通常可以省略语句间的分号（;），JS 解析器会根据能否正常编译来决定是否自动填充分号：

var test = 1 + 
2
console.log(test);  //3
在上述情况下，为了正确解析代码，就不会自动填充分号了，但是对于 return 、break、continue 等语句，如果后面紧跟换行，解析器一定会自动在后面填充分号(;)，所以上面的第二个函数就变成了这样：

function foo2()
{
  return;
  {
      bar: &quot;hello&quot;
  };
}
所以第二个函数是返回 undefined。
</code></pre>
<p>7、神马是 NaN，它的类型是神马？怎么测试一个值是否等于 NaN?</p>
<pre><code>NaN 是 Not a Number 的缩写，JavaScript 的一种特殊数值，其类型是 Number，可以通过 isNaN(param)来判断一个值是否是 NaN：

console.log(isNaN(NaN)); //true
console.log(isNaN(23)); //false
console.log(isNaN('ds')); //true
console.log(isNaN('32131sdasd')); //true
console.log(NaN === NaN); //false
console.log(NaN === undefined); //false
console.log(undefined === undefined); //false
console.log(typeof NaN); //number
console.log(Object.prototype.toString.call(NaN)); //[object Number]
ES6 中，isNaN() 成为了 Number 的静态方法：Number.isNaN().
</code></pre>
<p>8、解释一下下面代码的输出</p>
<pre><code>console.log(0.1 + 0.2);   //0.30000000000000004
console.log(0.1 + 0.2 == 0.3);  //false
JavaScript 中的 number 类型就是浮点型，JavaScript 中的浮点数采用IEEE-754 格式的规定，这是一种二进制表示法，可以精确地表示分数，比如1/2，1/8，1/1024，每个浮点数占64位。但是，二进制浮点数表示法并不能精确的表示类似0.1这样 的简单的数字，会有舍入误差。

由于采用二进制，JavaScript 也不能有限表示 1/10、1/2 等这样的分数。在二进制中，1/10(0.1)被表示为0.00110011001100110011…… 注意 0011 是无限重复的，这是舍入误差造成的，所以对于 0.1 + 0.2 这样的运算，操作数会先被转成二进制，然后再计算：

0.1 =&gt; 0.0001 1001 1001 1001…（无限循环）
0.2 =&gt; 0.0011 0011 0011 0011…（无限循环）
双精度浮点数的小数部分最多支持 52 位，所以两者相加之后得到这么一串 0.0100110011001100110011001100110011001100...因浮点数小数位的限制而截断的二进制数字，这时候，再把它转换为十进制，就成了 0.30000000000000004。

对于保证浮点数计算的正确性，有两种常见方式。

一是先升幂再降幂：

function add(num1, num2){
  let r1, r2, m;
  r1 = (''+num1).split('.')[1].length;
  r2 = (''+num2).split('.')[1].length;

  m = Math.pow(10,Math.max(r1,r2));
  return (num1 * m + num2 * m) / m;
}
console.log(add(0.1,0.2));   //0.3
console.log(add(0.15,0.2256)); //0.3756
二是是使用内置的 toPrecision() 和 toFixed() 方法，注意，方法的返回值字符串。

function add(x, y) {
    return x.toPrecision() + y.toPrecision()
}
console.log(add(0.1,0.2));  //&quot;0.10.2&quot;
</code></pre>
<p>9、实现函数 isInteger(x) 来判断 x 是否是整数</p>
<pre><code>
可以将 x 转换成10进制，判断和本身是不是相等即可：

function isInteger(x) { 
    return parseInt(x, 10) === x; 
}
ES6 对数值进行了扩展，提供了静态方法 isInteger() 来判断参数是否是整数：

Number.isInteger(25) // true
Number.isInteger(25.0) // true
Number.isInteger(25.1) // false
Number.isInteger(&quot;15&quot;) // false
Number.isInteger(true) // false
JavaScript能够准确表示的整数范围在 -2^53 到 2^53 之间（不含两个端点），超过这个范围，无法精确表示这个值。ES6 引入了Number.MAX_SAFE_INTEGER 和 Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限，并提供了 Number.isSafeInteger() 来判断整数是否是安全型整数。
</code></pre>
<p>10、在下面的代码中，数字 1-4 会以什么顺序输出？为什么会这样输出？</p>
<pre><code>(function() {
    console.log(1); 
    setTimeout(function(){console.log(2)}, 1000); 
    setTimeout(function(){console.log(3)}, 0); 
    console.log(4);
})();
这个就不多解释了，主要是 JavaScript 的定时机制和时间循环，不要忘了，JavaScript 是单线程的。详解可以参考 从setTimeout谈JavaScript运行机制。
</code></pre>
<p>11、写一个少于 80 字符的函数，判断一个字符串是不是回文字符串</p>
<pre><code>function isPalindrome(str) {
    str = str.replace(/\W/g, '').toLowerCase();
    return (str == str.split('').reverse().join(''));
}
这个题我在 codewars 上碰到过，并收录了一些不错的解决方式，可以戳这里：Palindrome For Your Dome
</code></pre>
<p>12、写一个按照下面方式调用都能正常工作的 sum 方法</p>
<pre><code>console.log(sum(2,3));   // Outputs 5
console.log(sum(2)(3));  // Outputs 5
针对这个题，可以判断参数个数来实现：

function sum() {
  var fir = arguments[0];
  if(arguments.length === 2) {
    return arguments[0] + arguments[1]
  } else {
    return function(sec) {
       return fir + sec;
    }
  }

}
</code></pre>
<p>13、根据下面的代码片段回答后面的问题</p>
<pre><code>for (var i = 0; i &lt; 5; i++) {
  var btn = document.createElement('button');
  btn.appendChild(document.createTextNode('Button ' + i));
  btn.addEventListener('click', function(){ console.log(i); });
  document.body.appendChild(btn);
}
1、点击 Button 4，会在控制台输出什么？
2、给出一种符合预期的实现方式

1、点击5个按钮中的任意一个，都是输出5
2、参考 IIFE。
</code></pre>
<p>14、下面的代码会输出什么？为什么？</p>
<pre><code>var arr1 = &quot;john&quot;.split(''); j o h n
var arr2 = arr1.reverse(); n h o j
var arr3 = &quot;jones&quot;.split(''); j o n e s
arr2.push(arr3);
console.log(&quot;array 1: length=&quot; + arr1.length + &quot; last=&quot; + arr1.slice(-1));
console.log(&quot;array 2: length=&quot; + arr2.length + &quot; last=&quot; + arr2.slice(-1));
会输出什么呢？你运行下就知道了，可能会在你的意料之外。

MDN 上对于 reverse() 的描述是酱紫的：

Description
The reverse method transposes the elements of the calling array object in place, mutating the array, and returning a reference to the array.
reverse() 会改变数组本身，并返回原数组的引用。

slice 的用法请参考：slice
</code></pre>
<p>15、下面的代码会输出什么？为什么？</p>
<pre><code>console.log(1 +  &quot;2&quot; + &quot;2&quot;);
console.log(1 +  +&quot;2&quot; + &quot;2&quot;);
console.log(1 +  -&quot;1&quot; + &quot;2&quot;);
console.log(+&quot;1&quot; +  &quot;1&quot; + &quot;2&quot;);
console.log( &quot;A&quot; - &quot;B&quot; + &quot;2&quot;);
console.log( &quot;A&quot; - &quot;B&quot; + 2);
输出什么，自己去运行吧，需要注意三个点：
多个数字和数字字符串混合运算时，跟操作数的位置有关
console.log(2 + 1 + '3'); / /‘33’
console.log('3' + 2 + 1); //'321'
数字字符串之前存在数字中的正负号(+/-)时，会被转换成数字
console.log(typeof '3');   // string
console.log(typeof +'3');  //number
同样，可以在数字前添加 ''，将数字转为字符串
console.log(typeof 3);   // number
console.log(typeof (''+3));  //string
对于运算结果不能转换成数字的，将返回 NaN
console.log('a' * 'sd');   //NaN
console.log('A' - 'B');  // NaN
这张图是运算转换的规则
</code></pre>
<p>16、如果 list 很大，下面的这段递归代码会造成堆栈溢出。如果在不改变递归模式的前提下修善这段代码？</p>
<pre><code>var list = readHugeList();

var nextListItem = function() {
    var item = list.pop();

    if (item) {
        // process the list item...
        nextListItem();
    }
};
原文上的解决方式是加个定时器：

var list = readHugeList();

var nextListItem = function() {
    var item = list.pop();

    if (item) {
        // process the list item...
        setTimeout( nextListItem, 0);
    }
};
解决方式的原理请参考第10题。

</code></pre>
<p>17、什么是闭包？举例说明</p>
<pre><code>可以参考此篇：从作用域链谈闭包
</code></pre>
<p>18、下面的代码会输出什么？为啥？</p>
<pre><code>for (var i = 0; i &lt; 5; i++) {
  setTimeout(function() { console.log(i); }, i * 1000 );
}
请往前面翻，参考第4题，解决方式已经在上面了
</code></pre>
<p>19、解释下列代码的输出</p>
<pre><code>console.log(&quot;0 || 1 = &quot;+(0 || 1));
console.log(&quot;1 || 2 = &quot;+(1 || 2));
console.log(&quot;0 &amp;&amp; 1 = &quot;+(0 &amp;&amp; 1));
console.log(&quot;1 &amp;&amp; 2 = &quot;+(1 &amp;&amp; 2));
逻辑与和逻辑或运算符会返回一个值，并且二者都是短路运算符：

逻辑与返回第一个是 false 的操作数 或者 最后一个是 true的操作数
console.log(1 &amp;&amp; 2 &amp;&amp; 0);  //0
console.log(1 &amp;&amp; 0 &amp;&amp; 1);  //0
console.log(1 &amp;&amp; 2 &amp;&amp; 3);  //3
如果某个操作数为 false，则该操作数之后的操作数都不会被计算

逻辑或返回第一个是 true 的操作数 或者 最后一个是 false的操作数
console.log(1 || 2 || 0); //1
console.log(0 || 2 || 1); //2
console.log(0 || 0 || false); //false
如果某个操作数为 true，则该操作数之后的操作数都不会被计算

如果逻辑与和逻辑或作混合运算，则逻辑与的优先级高：

console.log(1 &amp;&amp; 2 || 0); //2
console.log(0 || 2 &amp;&amp; 1); //1
console.log(0 &amp;&amp; 2 || 1); //1
在 JavaScript，常见的 false 值：

0, '0', +0, -0, false, '',null,undefined,null,NaN
要注意空数组([])和空对象({}):

console.log([] == false) //true
console.log({} == false) //false
console.log(Boolean([])) //true
console.log(Boolean({})) //true
所以在 if 中，[] 和 {} 都表现为 true：
</code></pre>
<p>20、解释下面代码的输出</p>
<pre><code>console.log(false == '0')
console.log(false === '0')
请参考前面第14题运算符转换规则的图。
</code></pre>
<p>21、解释下面代码的输出</p>
<pre><code>var a={},
    b={key:'b'},
    c={key:'c'};

a[b]=123;
a[c]=456;

console.log(a[b]);
输出是 456，参考原文的解释：

The reason for this is as follows: When setting an object property, JavaScript will implicitly stringify the parameter value. In this case, since b and c are both objects, they will both be converted to &quot;[object Object]&quot;. As a result, a[b] anda[c] are both equivalent to a[&quot;[object Object]&quot;] and can be used interchangeably. Therefore, setting or referencing a[c] is precisely the same as setting or referencing a[b].
</code></pre>
<p>22、解释下面代码的输出</p>
<pre><code>console.log((function f(n){return ((n &gt; 1) ? n * f(n-1) : n)})(10));
结果是10的阶乘。这是一个递归调用，为了简化，我初始化 n=5，则调用链和返回链如下：
</code></pre>
<p>23、解释下面代码的输出</p>
<pre><code>(function(x) {
    return (function(y) {
        console.log(x);
    })(2)
})(1);
输出1，闭包能够访问外部作用域的变量或参数。
</code></pre>
<p>24、解释下面代码的输出，并修复存在的问题</p>
<pre><code>var hero = {
    _name: 'John Doe',
    getSecretIdentity: function (){
        return this._name;
    }
};

var stoleSecretIdentity = hero.getSecretIdentity;

console.log(stoleSecretIdentity());
console.log(hero.getSecretIdentity());
将 getSecretIdentity 赋给 stoleSecretIdentity，等价于定义了 stoleSecretIdentity 函数：

var stoleSecretIdentity =  function (){
        return this._name;
}
stoleSecretIdentity 的上下文是全局环境，所以第一个输出 undefined。若要输出 John Doe，则要通过 call 、apply 和 bind 等方式改变 stoleSecretIdentity 的this 指向(hero)。

第二个是调用对象的方法，输出 John Doe。
</code></pre>
<p>25、给你一个 DOM 元素，创建一个能访问该元素所有子元素的函数，并且要将每个子元素传递给指定的回调函数。</p>
<pre><code>函数接受两个参数：

DOM
指定的回调函数
原文利用 深度优先搜索(Depth-First-Search) 给了一个实现：

function Traverse(p_element,p_callback) {
   p_callback(p_element);
   var list = p_element.children;
   for (var i = 0; i &lt; list.length; i++) {
       Traverse(list[i],p_callback);  // recursive call
   }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[详解Javascript中的Object对象]]></title>
        <id>https://itliuwk.github.io/post/xiang-jie-javascript-zhong-de-object-dui-xiang</id>
        <link href="https://itliuwk.github.io/post/xiang-jie-javascript-zhong-de-object-dui-xiang">
        </link>
        <updated>2018-04-08T03:20:35.000Z</updated>
        <summary type="html"><![CDATA[<p>Object是在javascript中一个被我们经常使用的类型，而且JS中的所有对象都是继承自Object对象的...</p>
]]></summary>
        <content type="html"><![CDATA[<p>Object是在javascript中一个被我们经常使用的类型，而且JS中的所有对象都是继承自Object对象的...</p>
<!--more-->
<p>虽说我们平时只是简单地使用了Object对象来存储数据，并没有使用到太多其他功能，但是Object对象其实包含了很多很有用的属性和方法，尤其是ES5增加的方法，因此，本文将从最基本的介绍开始，详细说明了Object的常用方法和应用。</p>
<h3 id="基础介绍">基础介绍</h3>
<h4 id="创建对象">创建对象</h4>
<p>首先我们都知道，对象就是一组相似数据和功能的集合，我们就是用它来模拟我们现实世界中的对象的。那在Javascript中，创建对象的方式通常有两种方式：构造函数和对象字面量。</p>
<h5 id="new构造函数法">new构造函数法</h5>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var person = <span class="keyword">new <span class="built_in">Object();<br><span class="line">person.name = <span class="string">"狼狼的蓝胖子";<br><span class="line">person.age = <span class="number">25;<br></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>这种方式使用new关键字，接着跟上Object构造函数，再来给对象实例动态添加上不同的属性。这种方式相对来说比较繁琐，一般推荐使用对象字面量来创建对象。</p>
<h5 id="对象字面量">对象字面量</h5>
<p>对象字面量很好理解，使用key/value的形式直接创建对象，简洁方便。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="variable"><span class="keyword">var person = {<br><span class="line">    name: “狼狼的蓝胖子”,<br><span class="line">    age: <span class="number">25<br><span class="line">};<br></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>这种方式直接通过花括号将对象的属性包起来，使用key/value的方式创建对象属性，每个属性之间用逗号隔开。<br>注意：如果是最后一个属性，后面就不要加逗号，因为在一些旧的浏览器下会报错。</p>
<h4 id="对象实例的属性和方法">对象实例的属性和方法</h4>
<p>不管通过哪种方式创建了对象实例后，该实例都会拥有下面的属性和方法，下面将会一一说明。</p>
<h5 id="constructor属性">constructor属性</h5>
<p>constructor属性是保存当前对象的构造函数，前面的例子中，constructor保存的就是Object方法。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var obj1 = <span class="keyword">new <span class="built_in">Object();<br><span class="line">obj1.id = <span class="string">"obj1";<br><span class="line"><span class="keyword">var obj2 = {<br><span class="line">    <span class="string">"id": <span class="string">"obj2"<br><span class="line">};<br><span class="line"> <br><span class="line"><span class="built_in">console.log(obj1.constructor);<span class="comment">//function Object(){}<br><span class="line"><span class="built_in">console.log(obj2.constructor);<span class="comment">//function Object(){}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="hasOwnProperty(propertyName)方法">hasOwnProperty(propertyName)方法</h5>
<p>hasOwnProperty方法接收一个字符串参数，该参数表示属性名称，用来判断该属性是否在当前对象实例中，而不是在对象的原型链中。我们来看看下面这个例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var arr = [];        <br><span class="line"><span class="built_in">console.log(arr.hasOwnProperty(<span class="string">"length"));<span class="comment">//true<br><span class="line"><span class="built_in">console.log(arr.hasOwnProperty(<span class="string">"hasOwnProperty"));<span class="comment">//false<br></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>在这个例子中，首先通过定义了一个数组对象的实例arr，我们知道数组对象实际是通过原型链继承了Object对象，然后拥有自己的一些属性，我们通过hasOwnProperty方法判断length是arr自己的属性，而hasOwnProperty是在原型链上的属性。<br>hasOwnProperty方法可以和for..in结合起来获取对象自己的key。</p>
<h5 id="isPrototypeOf(Object)方法">isPrototypeOf(Object)方法</h5>
<p>isPrototype方法接收一个对象，用来判断当前对象是否在传入的参数对象的原型链上，说起来有点抽象，我们来看看代码。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">function <span class="title">MyObject(<span class="params">) {}<br><span class="line"><span class="keyword">var obj = <span class="keyword">new MyObject();<br><span class="line"><span class="built_in">console.log(<span class="built_in">Object.prototype.isPrototypeOf(obj));<br></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>我们知道MyObject是继承自Object对象的，而在JS中，继承是通过prototype来实现的，所以Object的prototype必定在MyObject对象实例的原型链上。</p>
<h5 id="propertyIsEnumerable(prototypeName)方法">propertyIsEnumerable(prototypeName)方法</h5>
<p>prototypeIsEnumerable用来判断给定的属性是否可以被for..in语句给枚举出来。看下面代码：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var obj = {<br><span class="line">    name: <span class="string">"objName"<br><span class="line">}  <br><span class="line"><span class="keyword">for (<span class="keyword">var i <span class="keyword">in obj) {<br><span class="line">    <span class="built_in">console.log(i);<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>执行这段代码输出字符串“name”，这就说明通过for…in语句可以得到obj的name这个属性，但是我们知道，obj的属性还有很多，比如constructor，比如hasOwnPrototype等等，但是它们没有被输出，说明这些属性不能被for…in给枚举出来，可以通过propertyIsEnumerable方法来得到。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="built_in">console.log(obj.propertyIsEnumerable(<span class="string">"constructor"));<span class="regexp">//<span class="literal">false<br></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>判断“constructor”是否可以被枚举，输出false说明无法被枚举出来。</p>
<h5 id="toLocaleString()方法">toLocaleString()方法</h5>
<p>toLocalString方法返回对象的字符串表示，和代码的执行环境有关。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="built_in">var obj = {};<br><span class="line">console<span class="built_in">.<span class="keyword">log(obj<span class="built_in">.toLocaleString());<span class="comment">//[object Object]  <br><span class="line"><br><span class="line"><span class="built_in">var <span class="built_in">date = <span class="literal">new <span class="built_in">Date();<br><span class="line">console<span class="built_in">.<span class="keyword">log(<span class="built_in">date<span class="built_in">.toLocaleString());<span class="comment">//2016/2/28 下午1:39:27<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="toString()方法">toString()方法</h5>
<p>toString用来返回对象的字符串表示。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="built_in">var obj = {};<br><span class="line">console<span class="built_in">.<span class="keyword">log(obj<span class="built_in">.toString());<span class="comment">//[object Object]<br><span class="line">        <br><span class="line"><span class="built_in">var <span class="built_in">date = <span class="literal">new <span class="built_in">Date();<br><span class="line">console<span class="built_in">.<span class="keyword">log(<span class="built_in">date<span class="built_in">.toString());<span class="comment">//Sun Feb 28 2016 13:40:36 GMT+0800 (中国标准时间)<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="valueOf()方法">valueOf()方法</h5>
<p>valueOf方法返回对象的原始值，可能是字符串、数值或bool值等，看具体的对象。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"> <span class="keyword">var obj = {<br><span class="line">    name: <span class="string">"obj"<br><span class="line">};<br><span class="line"><span class="built_in">console.log(obj.valueOf());<span class="comment">//Object {name: "obj"}<br><span class="line"><br><span class="line"><span class="keyword">var arr = [<span class="number">1];<br><span class="line"><span class="built_in">console.log(arr.valueOf());<span class="comment">//[1]<br><span class="line"><br><span class="line"><span class="keyword">var date = <span class="keyword">new <span class="built_in">Date();<br><span class="line"><span class="built_in">console.log(date.valueOf());<span class="comment">//1456638436303<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>如代码所示，三个不同的对象实例调用valueOf返回不同的数据。</p>
<h4 id="属性的类型">属性的类型</h4>
<p>在Javascript中，属性有两种类型，分别是数据属性和访问器属性，我们来看看这两种属性具体是什么东西。</p>
<h5 id="数据属性">数据属性</h5>
<p>数据属性我们可以理解为我们平时定义对象时赋予的属性，它可以进行读和写。但是，ES5中定义了一些特性，这些特性是用来描述属性的各种特征，特性是内部值，不能直接访问到。特性通过用两对方括号表示，比如[[Enumerable]]。属性的特性会有一些默认值，要修改特性的默认值，必须使用ES5定义的新方法Object.defineProperty方法来修改。<br>数据属性有4个描述其特征的特性，下面将依次说明每一个特性：<br>（1）[[Configurable]]：该特性表示是否可以通过delete操作符来删除属性，默认值是true。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var obj = {};<br><span class="line">obj.name = <span class="string">"myname";<br><span class="line">        <br><span class="line"><span class="keyword">delete obj.name;<br><span class="line"><span class="built_in">console.log(obj.name);<span class="comment">//undefined<br></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>这段代码很明显，通过delete删除了obj的name属性后，我们再访问name属性就访问不到了。<br>我们通过Object.defineProperty方法来修改[[Configurable]]特性。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var obj = {};<br><span class="line">obj.name = <span class="string">"myname";<br><span class="line"><span class="built_in">Object.defineProperty(obj, <span class="string">"name", {<br><span class="line">    configurable: <span class="literal">false<br><span class="line">})                <br><span class="line"><br><span class="line"><span class="keyword">delete obj.name;<br><span class="line"><span class="built_in">console.log(obj.name);<span class="comment">//myname<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>通过将configurable特性设置成false之后，delete就无法删除name属性了，如果在严格模式下，使用delete去删除就会报错。</p>
<p>（2）[[Enumerable]]：表示是否能够通过for…in语句来枚举出属性，默认是true<br>我们来看看前面的例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var obj = {<br><span class="line">    name: <span class="string">"objName"<br><span class="line">}  <br><span class="line"><span class="keyword">for (<span class="keyword">var i <span class="keyword">in obj) {<br><span class="line">    <span class="built_in">console.log(i);<span class="comment">//name<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>这段代码只输出了name属性，我们来将constructor属性的[[Enumerable]]设置为true试试。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"> <span class="keyword">var obj = {<br><span class="line">        name: <span class="string">"objName"<br><span class="line">}<br><span class="line"><span class="built_in">Object.defineProperty(obj, <span class="string">"constructor", {<br><span class="line">    enumerable: <span class="literal">true<br><span class="line">})<br><span class="line"><br><span class="line"><span class="keyword">for (<span class="keyword">var i <span class="keyword">in obj) {<br><span class="line">    <span class="built_in">console.log(i);<span class="comment">//name,constructor<br><span class="line">}<br><span class="line"><span class="built_in">console.log(obj.propertyIsEnumerable(<span class="string">"constructor"));<span class="comment">//true<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>这段代码中，for…in循环得到了name和constructor两个属性，而通过propertyIsEnumerable方法来判断constructor也返回了true。</p>
<p>（3）[[Writable]]：表示属性值是否可以修改，默认为true<br>如果[[Writable]]被设置成false，尝试修改时将没有效果，在严格模式下会报错</p>
<p>（4）[[Value]]：表示属性的值，默认为undefined</p>
<p>我们通过一个简单的例子来看看这两个特性：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var obj = {<br><span class="line">    name: <span class="string">"name"<br><span class="line">};<br><span class="line"><span class="built_in">console.log(obj.name);<span class="comment">//name        <br><span class="line"><br><span class="line"><span class="built_in">Object.defineProperty(obj, <span class="string">"name", {<br><span class="line">    value: <span class="string">"newValue",<br><span class="line">    writable: <span class="literal">false<br><span class="line">})<br><span class="line"><span class="built_in">console.log(obj.name);<span class="comment">//newValue<br><span class="line"><br><span class="line">obj.name = <span class="string">"oldValue";<br><span class="line"><span class="built_in">console.log(obj.name);<span class="comment">//newValue<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>我们首先定义了obj对象的name属性值为“name”，然后通过defineProperty方法来修改值，并且将其设置为不可修改的。接着我们再修改name属性的值，可以发现修改无效。<br>如果我们通过defineProperty来修改name属性的值，是否可以修改呢？答案是可以的：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="tag">Object<span class="class">.defineProperty(obj, <span class="string">"name", {<br><span class="line">    <span class="attribute">value: <span class="string">"oldValue"<br><span class="line">})<br><span class="line"><span class="tag">console<span class="class">.log(obj.name); <span class="comment">//oldValue<br></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="访问器属性">访问器属性</h5>
<p>访问器属性有点类似于C#中的属性，和数据属性的区别在于，它没有数据属性的[[Writable]]和[[Value]]两个特性，而是拥有一对getter和setter函数。<br>[[Get]]：读取属性时调用的函数，默认是undefined<br>[[Set]]：设置属性时调用的函数，默认是undefined<br>getter和setter是一个很有用的东西，假设有两个属性，其中第二个属性值会随着第一个属性值的变化而变化。这种场景在我们平时的编码中起始是非常常见的。在之前的做法中，我们往往要去手动修改第二个属性的值，那现在我们就可以通过get和set函数来解决这个问题。看下面这个例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br><span class="line">15<br><span class="line">16<br><span class="line">17<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var person = {<br><span class="line">    age: <span class="number">10<br><span class="line">}<br><span class="line"><br><span class="line"><span class="built_in">Object.defineProperty(person, <span class="string">"type", {<br><span class="line">    get: <span class="function"><span class="keyword">function (<span class="params">) {<br><span class="line">        <span class="keyword">if (person.age &gt; <span class="number">17) {<br><span class="line">            <span class="keyword">return <span class="string">"成人";<br><span class="line">        }<br><span class="line">        <span class="keyword">return <span class="string">"小孩";<br><span class="line">    }<br><span class="line">})<br><span class="line"><br><span class="line"><span class="built_in">console.log(person.type);<span class="comment">//小孩<br><span class="line"><br><span class="line">person.age = <span class="number">18;<br><span class="line"><span class="built_in">console.log(person.type);<span class="comment">//成人<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>通过修改age的值，type的值也会相应的修改，这样我们就不用再手动的去修改type的值了。<br>下面这种方式也是可以实现同样的效果：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br><span class="line">15<br><span class="line">16<br><span class="line">17<br><span class="line">18<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var person = {<br><span class="line">    _age: <span class="number">10,<br><span class="line">    type: <span class="string">"小孩"<br><span class="line">} <br><span class="line"><br><span class="line"><span class="built_in">Object.defineProperty(person, <span class="string">"age", {<br><span class="line">    get: <span class="function"><span class="keyword">function (<span class="params">) {<br><span class="line">        <span class="keyword">return <span class="keyword">this._age;<br><span class="line">    },<br><span class="line">    set: <span class="function"><span class="keyword">function (<span class="params">newValue) {<br><span class="line">        <span class="keyword">this._age = newValue;<br><span class="line">        <span class="keyword">this.type = newValue &gt; <span class="number">17 ? <span class="string">"成人" : <span class="string">"小孩";<br><span class="line">    }<br><span class="line">})<br><span class="line"><span class="built_in">console.log(person.type);<br><span class="line"><br><span class="line">person.age = <span class="number">18;<br><span class="line"><span class="built_in">console.log(person.type);<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>关于访问器属性，有几点要注意：<br>1、严格模式下，必须同时设置get和set<br>2、非严格模式下，可以只设置其中一个，如果只设置get，则属性是只读的，如果只设置set，属性则无法读取<br>3、Object.defineProperty是ES5中的新方法，IE9（IE8部分实现，只有dom对象才支持）以下浏览器不支持，一些旧的浏览器可以通过非标准方法<strong>defineGetter</strong>()和<strong>defineSetter</strong>()来设置，这里就不说明了，有兴趣的同学可以查找相关资料。</p>
<h5 id="特性操作的相关方法">特性操作的相关方法</h5>
<p>ES5提供了一些读取或操作属性特性的方法，前面用到的Object.defineProperty就是其中之一。我总结了一些比较常用的方法如下：</p>
<p>（1）Object.defineProperty<br>定义一个对象的属性，这个方法前面我们已经用到多次，简单说说其用法。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="tag">Object<span class="class">.defineProperty(<span class="tag">obj,<span class="tag">propName,<span class="tag">descriptor);<br></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>defineProperty有点类似于定于在Object上的静态方法，通过Object直接调用，它接收3个参数：<br>obj：需要定义属性的对象<br>propNane：需要被定义的属性名称<br>defineProperty：属性描述符，包含一些属性的特性定义<br>例子如下：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var obj = {};<br><span class="line">Object.defineProperty(obj, <span class="string">"name", {<br><span class="line">    <span class="keyword">value: <span class="string">"name",<br><span class="line">    configurable: <span class="keyword">true,<br><span class="line">    writable: <span class="keyword">true,<br><span class="line">    enumerable: <span class="keyword">true<br><span class="line">});<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>（2）Object.defineProperties<br>和defineProperty类似，是用来定义对象属性的，不同的是它可以用来同时定义多个属性，我们通过命名也可以看出来，用法如下：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var obj = {};<br><span class="line">Object.defineProperty(obj, {<br><span class="line">    <span class="string">"name": {<br><span class="line">        <span class="keyword">value: <span class="string">"name",<br><span class="line">        configurable: <span class="keyword">true,<br><span class="line">        writable: <span class="keyword">true,<br><span class="line">        enumerable: <span class="keyword">true<br><span class="line">    },<br><span class="line">    <span class="string">"age": {<br><span class="line">        <span class="keyword">value: <span class="number">20 <br><span class="line">    }<br><span class="line">});<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>（3）Object.getOwnPropertyDescriptor<br>ES5中还提供了一个读取特性值的方法，该方法接收对象及其属性名作为两个参数，返回一个对象，根据属性类型的不同，返回对象会包含不同的值。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br><span class="line">15<br><span class="line">16<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var person = {<br><span class="line">    _age: <span class="number">10,<br><span class="line">    <span class="built_in">type: <span class="string">"小孩"<br><span class="line">}<br><span class="line">Object.defineProperty(person, <span class="string">"age", {<br><span class="line">    get: <span class="function"><span class="keyword">function <span class="params">() {<br><span class="line">        <span class="keyword">return this._age;<br><span class="line">    },<br><span class="line">    set: <span class="function"><span class="keyword">function <span class="params">(newValue) {<br><span class="line">        this._age = newValue;<br><span class="line">        this.<span class="built_in">type = newValue &gt; <span class="number">17 ? <span class="string">"成人" : <span class="string">"小孩";<br><span class="line">    }<br><span class="line">})<br><span class="line"><br><span class="line">console.log(Object.getOwnPropertyDescriptor(person, <span class="string">"type"));//Object {value: <span class="string">"成人", writable: <span class="keyword">true, enumerable: <span class="keyword">true, configurable: <span class="keyword">true}<br><span class="line">console.log(Object.getOwnPropertyDescriptor(person, <span class="string">"age")); //Object {enumerable: <span class="keyword">false, configurable: <span class="keyword">false, get: <span class="function"><span class="keyword">function<span class="params">(),set: <span class="function"><span class="keyword">function <span class="params">()}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h3 id="Object的方法">Object的方法</h3>
<p>在ES5中，Object对象上新增了一批方法，这些方法可以直接通过Object进行访问，前面用到的defineProperty就是新增的方法之一。除此之外还有很多方法，我将其总结归纳如下：</p>
<h4 id="对象创建型方法">对象创建型方法</h4>
<h5 id="Object-create(proto,_[propertiesObject])">Object.create(proto, [propertiesObject])</h5>
<p>在前面我们提到，创建一个对象有两种方法：构造函数和对象字面量。<br>这两种方法有一个缺点就是：如果要创建多个对象，写起来很繁琐，所以后来就有了一种创建自定义构造函数的方法来创建对象，如下所示：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">function <span class="title">Person<span class="params">(name, age) {<br><span class="line">    <span class="keyword">this.name = name;<br><span class="line">    <span class="keyword">this.age = age;<br><span class="line">}<br><span class="line"><br><span class="line"><span class="keyword">var person = <span class="keyword">new Person(<span class="string">"Jack", <span class="number">15);<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>这种方式可以很方便的创建多个同样的对象，也是目前比较常用的方法。</p>
<p>ES5提供的Object.create方法也是一个创建对象的方法，这个方法允许为创建的对象选择原型对象，不需要定义一个构造函数。用法如下：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var obj = <span class="built_in">Object.create(<span class="built_in">Object.prototype, { <br><span class="line">    name: {<br><span class="line">        value: <span class="string">"Jack"<br><span class="line">    }<br><span class="line">})<br><span class="line"><span class="built_in">console.log(obj.name);<span class="comment">//Jack<br></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>这个方法接收的第一个参数作为被创建对象的原型，第二个参数是对象的属性。注意：在这个例子中，name属性是无法被修改的，因为它没有设置writable特性，默认则为false。<br>个人看法：Object.create这种创建对象的方式略显繁琐，除非是需要修改属性的特性，否则不建议使用这种方式创建对象。</p>
<h4 id="属性获取型方法">属性获取型方法</h4>
<h5 id="Object-keys">Object.keys</h5>
<p>Object.keys是用来获取给定对象的所有可枚举的自身属性的属性名，它返回一个数组。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">function <span class="title">Parent(<span class="params">) {<br><span class="line">    <span class="keyword">this.lastName = <span class="string">"Black"<br><span class="line">}<br><span class="line"><span class="function"><span class="keyword">function <span class="title">Child(<span class="params">firstName) {<br><span class="line">    <span class="keyword">this.firstName = firstName;<br><span class="line">}<br><span class="line">Child.prototype = <span class="keyword">new Parent();<br><span class="line"><br><span class="line"><span class="keyword">var son = <span class="keyword">new Child(<span class="string">"Jack");<br><span class="line"><span class="built_in">console.log(<span class="built_in">Object.keys(son));<span class="comment">//["firstName"]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>代码中返回了firstName，并没有返回从prototype继承而来的lastName和不可枚举的相关属性。<br>在一些旧的浏览器中，我们可以使用hasOwnProperty和for…in来达到类似的效果。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="built_in">Object.keys = <span class="built_in">Object.keys ||<br><span class="line">    <span class="function"><span class="keyword">function (<span class="params">obj) {<br><span class="line">        <span class="keyword">var keys = [];<br><span class="line">        <span class="keyword">for (<span class="keyword">var key <span class="keyword">in obj) {<br><span class="line">            <span class="keyword">if (obj.hasOwnProperty(key)) {<br><span class="line">                keys.push(key);<br><span class="line">            }<br><span class="line">        }<br><span class="line">        <span class="keyword">return keys;<br><span class="line">    }<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="Object-getOwnPropertyNames()">Object.getOwnPropertyNames()</h5>
<p>getOwnPropertyNames用来获取对象自身的所有属性，包括可枚举和不可枚举的所有属性，如下所示：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">function <span class="title">Parent(<span class="params">) {<br><span class="line">    <span class="keyword">this.lastName = <span class="string">"Black"<br><span class="line">}<br><span class="line"><span class="function"><span class="keyword">function <span class="title">Child(<span class="params">firstName) {<br><span class="line">    <span class="keyword">this.firstName = firstName;<br><span class="line">}<br><span class="line">Child.prototype = <span class="keyword">new Parent();<br><span class="line"><br><span class="line"><span class="keyword">var son = <span class="keyword">new Child(<span class="string">"Jack");<br><span class="line"><span class="built_in">Object.defineProperty(son, <span class="string">"age", {<br><span class="line">    enumerable: <span class="literal">false<br><span class="line">})<br><span class="line"><span class="built_in">console.log(<span class="built_in">Object.keys(son));<span class="comment">//["firstName"]  <br><span class="line"><span class="built_in">console.log(<span class="built_in">Object.getOwnPropertyNames(son));<span class="comment">//["firstName", "age"]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>我们定义给son对象定义了一个不可枚举的属性age，然后通过keys和getOwnPropertyNames两个方法来获取属性列表，能明显看出了两者区别。</p>
<h4 id="属性特性型方法">属性特性型方法</h4>
<p>这个主要是前面提到的三个方法：defineProperty，defineProperties和getOwnPropertyDescriptor三个方法</p>
<h4 id="对象限制型方法">对象限制型方法</h4>
<p>ES5中提供了一系列限制对象被修改的方法，用来防止被某些对象被无意间修改导致的错误。每种限制类型包含一个判断方法和一个设置方法。</p>
<h5 id="阻止对象扩展">阻止对象扩展</h5>
<p>Object.preventExtensions()用来限制对象的扩展，设置之后，对象将无法添加新属性，用法如下：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="tag">Object<span class="class">.preventExtensions(<span class="tag">obj);<br></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>该方法接收一个要被设置成无法扩展的对象作为参数，需要注意两点：<br>1、对象的属性不可用扩展，但是已存在的属性可以被删除<br>2、无法添加新属性指的是无法在自身上添加属性，如果是在对象的原型上，还是可以添加属性的。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">function <span class="title">Person(<span class="params">name) {<br><span class="line">    <span class="keyword">this.name = name;<br><span class="line">}<br><span class="line"><span class="keyword">var person = <span class="keyword">new Person(<span class="string">"Jack");<br><span class="line"><span class="built_in">Object.preventExtensions(person);<br><span class="line"><br><span class="line"><span class="keyword">delete person.name;<br><span class="line"><span class="built_in">console.log(person.name);<span class="comment">//undefined<br><span class="line"><br><span class="line">Person.prototype.age = <span class="number">15;<br><span class="line"><span class="built_in">console.log(person.age);<span class="comment">//15<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Object.isExtensible方法用来判断一个对象是否可扩展，默认情况是true</p>
<h5 id="将对象密封">将对象密封</h5>
<p>Object.seal可以密封一个对象并返回被密封的对象。<br>密封对象无法添加或删除已有属性，也无法修改属性的enumerable，writable，configurable，但是可以修改属性值。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">function <span class="title">Person(<span class="params">name) {<br><span class="line">    <span class="keyword">this.name = name;<br><span class="line">}<br><span class="line"><span class="keyword">var person = <span class="keyword">new Person(<span class="string">"Jack");<br><span class="line"><span class="built_in">Object.seal(person);<br><span class="line"><span class="keyword">delete person.name;<br><span class="line"><span class="built_in">console.log(person.name);<span class="comment">//Jack<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>将对象密封后，使用delete删除对象属性，还是可以访问得到属性。</p>
<p>通过Object.isSealed可以用来判断一个对象是否被密封了。</p>
<h5 id="冻结对象">冻结对象</h5>
<p>Object.freeze方法用来冻结一个对象，被冻结的对象将无法添加，修改，删除属性值，也无法修改属性的特性值，即这个对象无法被修改。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="function"><span class="keyword">function <span class="title">Person(<span class="params">name) {<br><span class="line">    <span class="keyword">this.name = name;<br><span class="line">}<br><span class="line"><span class="keyword">var person = <span class="keyword">new Person(<span class="string">"Jack");<br><span class="line"><span class="built_in">Object.freeze(person);<br><span class="line"><br><span class="line"><span class="keyword">delete person.name;<br><span class="line"><span class="built_in">console.log(person.name);<span class="comment">//Jack<br><span class="line"><br><span class="line">Person.prototype.age = <span class="number">15;<br><span class="line"><span class="built_in">console.log(person.age);<span class="comment">//15<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>分析上面的代码我们可以发现，被冻结的对象无法删除自身的属性，但是通过其原型对象还是可以新增属性的。</p>
<p>通过Object.isFrozen可以用来判断一个对象是否被冻结了。</p>
<p>可以发现：这三个限制对象的方法的限制程度是依次上升的。</p>
<h3 id="总结">总结</h3>
<p>Object虽说是一个我们平时开发中最经常用到的对象，但是它的很多功能还没有被我们挖掘出来。本文首先介绍了Object的基本使用，接着介绍了一些比较少使用到的属性特性，最后分析了一些比较常用的方法，尤其是ES5中提供的新方法。欢迎大家交流！！</p></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[详解Javascript中的Array对象]]></title>
        <id>https://itliuwk.github.io/post/xiang-jie-javascript-zhong-de-array-dui-xiang</id>
        <link href="https://itliuwk.github.io/post/xiang-jie-javascript-zhong-de-array-dui-xiang">
        </link>
        <updated>2018-04-05T06:27:10.000Z</updated>
        <summary type="html"><![CDATA[<p>在这一篇文章中，我们来说说Array对象。Array对象可以说是除Object对象之外用得最频繁的一个对象了...</p>
]]></summary>
        <content type="html"><![CDATA[<p>在这一篇文章中，我们来说说Array对象。Array对象可以说是除Object对象之外用得最频繁的一个对象了...</p>
<!--more-->
<div class="post-body">
<p>下面我们来详细说说Array这个对象。</p>
<h3 id="基础介绍">基础介绍</h3>
<h4 id="创建数组">创建数组</h4>
<p>和Object对象一样，创建Array也有2种方式：构造函数、字面量法。</p>
<h5 id="构造函数创建">构造函数创建</h5>
<p>使用构造函数的方式可以通过new关键字来声明，如下所示：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var arr = <span class="keyword">new <span class="built_in">Array();<br><span class="line"><span class="built_in">console.log(arr);<span class="comment">//[]<br></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>当然也可以不通过new关键字来声明：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var arr = <span class="built_in">Array();<br><span class="line"><span class="built_in">console.log(arr);  <span class="comment">//[]<br></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>如果知道数组元素的个数，也可以直接传入数字表示元素个数：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var arr2 = <span class="keyword">new <span class="built_in">Array(<span class="number">5);<br><span class="line"><span class="built_in">console.log(arr2.length);  <span class="comment">//5<br></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>也可以直接传入数组元素：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var arr3 = <span class="keyword">new <span class="built_in">Array(<span class="number">5, <span class="string">"aa", <span class="string">"bb");<br><span class="line"><span class="built_in">console.log(arr3);  <span class="comment">//[5, "aa", "bb"]<br></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="字面量法创建">字面量法创建</h5>
<p>通过字面量创建数组非常简单，推荐这种方式去创建数组：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var arr = [];<br><span class="line"><span class="built_in">console.log(arr);<span class="comment">//[]<br></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>如果数组有一些初始值，可以直接写上去：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="atom">var <span class="atom">arr2 = [<span class="number">5, <span class="string">"aa", <span class="string">"bb"];<br><span class="line"><span class="atom">console.<span class="atom">log(<span class="atom">arr2);  //[<span class="number">5, <span class="string">"aa", <span class="string">"bb"]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h4 id="数组长度">数组长度</h4>
<p>我们都知道要访问数组元素的个数很简单，直接通过length属性来获取到。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5];<br><span class="line">console.<span class="built_in">log(arr.length);  <span class="comment">//4<br></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>但是和其他语言不同的是，在JS中，length属性是可以被设置的。<br>假设我们要清空一个数组，我们可以直接将length设置成0：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br></span></span></pre>
</td>
<td class="code">
<pre><span class="line">arr.length = <span class="number">0;<br><span class="line">console.<span class="built_in">log(arr); <span class="comment">//[]<br></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>可以看到，arr数组的元素被清空的</p>
<p>如果我们设置成负数会怎么样呢：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br></span></span></pre>
</td>
<td class="code">
<pre><span class="line">arr.length = -1;//Uncaught RangeError: Invalid<span class="instruction"> array length<br><span class="line">console.log(arr<span class="function">);<br></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>很明显，length是不允许被设置成负数的。</p>
<p>通过设置length属性，我们可以删除元素，比如：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5];<br><span class="line">console.<span class="built_in">log(arr);<span class="comment">//[2, 3, 4, 5]<br><span class="line">arr.length = <span class="number">2;<br><span class="line">console.<span class="built_in">log(arr);[<span class="number">2, <span class="number">3]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>将length属性设置成比原来小的数值，后面的元素就会被移除掉。</p>
<p>如果将length设置成比原来大的数值会怎么样呢？</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">arr.length = <span class="number">5;<br><span class="line">console.<span class="built_in">log(arr);<span class="comment">//[2, 3, 4, 5]<br><span class="line">console.<span class="built_in">log(arr[<span class="number">4]);<span class="comment">//undefined<br><span class="line">console.<span class="built_in">log(arr.length);<span class="comment">//5<br></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>可以看到，设置成比较大的数值后，多出来的元素值是undefined</p>
<h4 id="数组检测">数组检测</h4>
<p>简单地介绍了Array之后，我们来说说如果检测一个变量是否是一个Array对象。这个也是一个比较常见的话题。<br>在ES5中，Array新增了一个检测数组对象的方法：Array.isArray。这个方法可以完美地确认一个对象是不是数组，无论这个对象是在哪个全局执行环境中创建的。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5];<br><span class="line">console.<span class="built_in">log(Array.isArray(arr));  <span class="comment">//true<br></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>对于不支持该方法的浏览器中，我们可以采用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">if (!<span class="built_in">Array.isArray) {<br><span class="line">    <span class="built_in">Array.isArray = <span class="function"><span class="keyword">function (<span class="params">Obj) {<br><span class="line">        <span class="keyword">return <span class="built_in">Object.prototype.toString.apply(Obj) === <span class="string">"[object Array]";<br><span class="line">    }<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h3 id="一些常用的数组对象方法">一些常用的数组对象方法</h3>
<p>Array对象中包含着很多有用的方法，尤其是在ES5，ES6中新增了许多方法，下面我们来总结一下。</p>
<h4 id="静态方法">静态方法</h4>
<h5 id="Array-from">Array.from</h5>
<p>Array.from是ES6种新增的方法，它可以将类数组对象或可迭代对象转换成数组对象。<br>常见的类数组对象比如有函数的arguments值，或者NodeList，HTMLCollection对象等等。<br>常见的可迭代对象比如字符串，还有就是ES6新增的Set对象和Map对象。</p>
<p>我们来看看的基本用法，将一个arguments转换成数组对象：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var arr = (<span class="function"><span class="keyword">function (<span class="params">) {<br><span class="line">    <span class="keyword">return <span class="built_in">Array.from(<span class="built_in">arguments);<br><span class="line">})(<span class="number">1, <span class="number">2, <span class="number">3);<br><span class="line"><span class="built_in">console.log(arr);<span class="comment">//[1,2,3]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>也可以将一个字符串转换成数组对象：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br></span></pre>
</td>
<td class="code">
<pre><span class="line">console.<span class="keyword">log(Array.<span class="keyword">from(<span class="string">"abcdefg")); //[<span class="string">"a", <span class="string">"b", <span class="string">"c", <span class="string">"d", <span class="string">"e", <span class="string">"f", <span class="string">"g"]<br></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Array.from还包含2个可选参数：mapFn，thisArg<br>mapFn：将from返回的数组再进行处理再返回<br>thisArg：执行mapFn函数时this指向的值<br>假设页面上有多个span标签，我们想获取这些span标签里面的文本，这是html代码</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="tag">&lt;<span class="title">span&gt;第一个span<span class="tag">&lt;/<span class="title">span&gt;<br><span class="line"><span class="tag">&lt;<span class="title">span&gt;第二个span<span class="tag">&lt;/<span class="title">span&gt;<br><span class="line"><span class="tag">&lt;<span class="title">span&gt;第三个span<span class="tag">&lt;/<span class="title">span&gt;<br><span class="line"><span class="tag">&lt;<span class="title">span&gt;第四个span<span class="tag">&lt;/<span class="title">span&gt;<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>我们要获取span标签里面的文本成组成一个数组，可以这么做：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var spans = <span class="built_in">document.getElementsByTagName(<span class="string">"span");<br><span class="line">    <span class="keyword">var texts = <span class="built_in">Array.from(spans, <span class="function"><span class="keyword">function (<span class="params">val, key) {<br><span class="line">        <span class="keyword">return val.innerText;<br><span class="line">})<br><span class="line"><span class="built_in">console.log(texts);<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>通过from函数将其转换成数组之后，再通过mapFn进行处理，获取每一个元素的innerText。</p>
<p>Array.from是ES6中新增的功能，必然有很多浏览器不支持，可以使用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br><span class="line">15<br><span class="line">16<br><span class="line">17<br><span class="line">18<br><span class="line">19<br><span class="line">20<br><span class="line">21<br><span class="line">22<br><span class="line">23<br><span class="line">24<br><span class="line">25<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var <span class="type">MAX_ARRAY_INDEX = <span class="type">Math.pow(<span class="number">2, <span class="number">53) - <span class="number">1;<br><span class="line"><span class="keyword">var isArrayLike = function (collection) {<br><span class="line">    <span class="keyword">var length = collection &amp;&amp; collection.length;<br><span class="line">    <span class="keyword">return typeof length == 'number' &amp;&amp; length &gt;= <span class="number">0 &amp;&amp; length &lt;= <span class="type">MAX_ARRAY_INDEX;<br><span class="line">};<br><span class="line"><span class="keyword">var isFunction = function (fn) {<br><span class="line">    <span class="keyword">return <span class="type">Object.prototype.toString.call(fn) === '[<span class="keyword">object <span class="type">Function]';<br><span class="line">} <br><span class="line"><br><span class="line"><span class="keyword">if (!<span class="type">Array.<span class="keyword">from) {<br><span class="line">    <span class="type">Array.<span class="keyword">from = function (arrayLike, mapFn, thisArg) {<br><span class="line">        <span class="keyword">if (!isArrayLike(arrayLike)) {<br><span class="line">            throw new <span class="type">TypeError(<span class="string">"被转换的对象不是一个类数组对象或可迭代对象");<br><span class="line">        }<br><span class="line">        mapFn = isFunction(mapFn) ? mapFn : function (val, key) {<br><span class="line">            <span class="keyword">return val;<br><span class="line">        }<br><span class="line">    <br><span class="line">        <span class="keyword">var <span class="literal">result = [];<br><span class="line">        <span class="keyword">for (<span class="keyword">var i = <span class="number">0, length = arrayLike.length; i &lt; length; i++) {<br><span class="line">            <span class="literal">result.push(mapFn.call(thisArg, arrayLike[i], i));<br><span class="line">        }<br><span class="line">        <span class="keyword">return <span class="literal">result;<br><span class="line">    }<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="Array-isArray">Array.isArray</h5>
<p>Array.isArray是用来判断一个对象是否是数组，在前面判断数组类型的章节我们已经提到过了，这里就不再赘述啦。</p>
<h5 id="Array-of">Array.of</h5>
<p>Array.of方法是ES6中新增的方法，它可以将传入的多个参数作为一个数组返回。看下面例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br></span></pre>
</td>
<td class="code">
<pre><span class="line">console.<span class="built_in">log(Array.of(<span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5)); <span class="comment">//[2, 3, 4, 5]<br></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>通过传入4个参数，返回一个包含4个元素的数组。<br>注意Array.of与采用Array构造函数的区别，看下面代码：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br></span></span></pre>
</td>
<td class="code">
<pre><span class="line">console.<span class="built_in">log(Array(<span class="number">4));<span class="comment">//[]<br><span class="line">console.<span class="built_in">log(Array.of(<span class="number">4));<span class="comment">//[4]<br></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>第一种方式采用Array构造函数的方式，创建了一个4个元素的数组，每个元素的值都是undefined。<br>第二中方式采用Array.of方法的方式，创建了一个1个元素的数组，元素值是4。</p>
<p>在不支持的浏览器中，可以采用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">if (!<span class="built_in">Array.of) {<br><span class="line">    <span class="built_in">Array.of = <span class="function"><span class="keyword">function (<span class="params">) {<br><span class="line">        <span class="keyword">return <span class="built_in">Array.prototype.slice.call(<span class="built_in">arguments);<br><span class="line">    };<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h4 id="继承自Object的方法">继承自Object的方法</h4>
<p>我们知道，所有的引用类型都继承自Object对象，自然而然地包含了Object的一些方法。在Array中，我们主要说说其继承自Object的toString方法和valueOf方法。</p>
<h5 id="toString方法">toString方法</h5>
<p>toString方法会返回对象的字符串表示，对于Array来说，这个方法会将每一个元素值用逗号分隔起来，最终形成一个字符串返回：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br></span></pre>
</td>
<td class="code">
<pre><span class="line">console.<span class="built_in">log([<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4].toString()); <span class="comment">//1,2,3,4<br></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="valueOf方法">valueOf方法</h5>
<p>valueOf方法用来返回对象的原始值，对于Array来说，它将返回数组本身：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br></span></pre>
</td>
<td class="code">
<pre><span class="line">console.<span class="built_in">log([<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4].valueOf());<span class="comment">//[1,2,3,4]<br></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h4 id="元素判断方法">元素判断方法</h4>
<p>在ES5中，Array原型中增加了2个判断数组是否满足某一条件的方法，下面分别来说明一下：</p>
<h5 id="every方法">every方法</h5>
<p>every方法用来判断数组中的所有元素是否都满足条件，如果全部满足则返回true，否则false。<br>every的用法如下：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br></span></pre>
</td>
<td class="code">
<pre><span class="line">arr.<span class="function"><span class="title">every<span class="params">(callback[, thisArg])<br></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>其中callback是用来判断每个元素是否满足条件的函数，它包含两个参数：元素值，索引，数组本身。<br>thisArg参数是可选的，它表示callback中this指向的对象。<br>看看下面的例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"> var arr = [<span class="number">1, <span class="number">2, <span class="number">3]; <br><span class="line">console.<span class="built_in">log(arr.every(function (val, index) {<br><span class="line">    <span class="keyword">return val &gt; <span class="number">0;<br><span class="line">}));<span class="comment">//true<br></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>在不支持的浏览器中，可以采用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">if (<span class="built_in">Array.prototype.every) {<br><span class="line">    <span class="built_in">Array.prototype.every = <span class="function"><span class="keyword">function (<span class="params">fn, thisArg) {<br><span class="line">        <span class="keyword">var arr = <span class="keyword">this;<br><span class="line">        <span class="keyword">for (<span class="keyword">var i = <span class="number">0, length = arr.length; i &lt; length; i++) {<br><span class="line">            <span class="keyword">if (!fn.call(thisArg, arr[i], i, arr)) {<br><span class="line">                <span class="keyword">return <span class="literal">false;<br><span class="line">            }<br><span class="line">        }<br><span class="line">        <span class="keyword">return <span class="literal">true;<br><span class="line">    };<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="some方法">some方法</h5>
<p>some方法和every方法用法类似，但是它只需要数组中的某一个元素符合条件即返回true。<br>我们来看下面的例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3];<br><span class="line">console.<span class="built_in">log(arr.some(function (val, index) {<br><span class="line">    <span class="keyword">return val &gt; <span class="number">2;<br><span class="line">}));  <span class="comment">//true<br></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>在数组中，只有一项元素大于2，则返回true。<br>在不支持的浏览器中，可以采用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">if (!<span class="built_in">Array.prototype.some) {<br><span class="line">    <span class="built_in">Array.prototype.some = <span class="function"><span class="keyword">function (<span class="params">fn, thisArg) {<br><span class="line">        <span class="keyword">var arr = <span class="keyword">this;<br><span class="line">        <span class="keyword">for (<span class="keyword">var i = <span class="number">0, length = arr.length; i &lt; length; i++) {<br><span class="line">            <span class="keyword">if (fn.call(thisArg, arr[i], i)) {<br><span class="line">                <span class="keyword">return <span class="literal">true;<br><span class="line">            }<br><span class="line">        }<br><span class="line">        <span class="keyword">return <span class="literal">false;<br><span class="line">    };<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h4 id="栈和队列方法">栈和队列方法</h4>
<p>在js中，数组即可以像栈那个操作，也可以像队列那样操作，它提供了几个关于栈和队列的方法，这些方法相信大家非常熟悉，在这里简单地说明一下：</p>
<h5 id="pop方法">pop方法</h5>
<p>pop方法会将数组的最后一个元素删除，然后返回这个被删除的元素</p>
<h5 id="push方法">push方法</h5>
<p>push方法是一个比较常用的方法，和pop方法相反，它用来将一个元素添加到元素的末尾，然后返回数组的长度。</p>
<h5 id="shift方法">shift方法</h5>
<p>shift方法将第一个元素删除，然后返回这个元素</p>
<h5 id="unshift方法">unshift方法</h5>
<p>unshift在数组开头添加一个或多个元素，然后返回这个元素的长度：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3];<br><span class="line">console.<span class="built_in">log(arr.unshift(<span class="number">3, <span class="number">2, <span class="number">1));<span class="comment">//6<br><span class="line">console.<span class="built_in">log(arr);  <span class="comment">// [3,2,1,1,2,3]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h4 id="元素索引方法">元素索引方法</h4>
<h5 id="indexOf方法">indexOf方法</h5>
<p>indexOf方法用来返回元素在数组中的位置，不存在则返回-1：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3];<br><span class="line">console.<span class="built_in">log(arr.indexOf(<span class="number">2));  <span class="comment">//1<br></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>indexOf方法有第二个可选参数，这个参数表示从哪个索引开始查找：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br></span></pre>
</td>
<td class="code">
<pre><span class="line">console.<span class="built_in">log(arr.indexOf(<span class="number">2, <span class="number">1)); <span class="comment">//1<br></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>如果这个参数大于数组长度，则直接返回-1，如果是负数，则将末尾进行抵消，然后开始查找，比如-1就从倒数第一开始查找，-2从倒数第二开始查找。<br>indexOf方法是ES5中提供的方法，对于不支持的浏览器，可以采用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br><span class="line">15<br><span class="line">16<br><span class="line">17<br><span class="line">18<br><span class="line">19<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">if (!Array.<span class="keyword">prototype.indexOf) {<br><span class="line">    Array.<span class="keyword">prototype.indexOf = function (element, fromIndex) {<br><span class="line">        <span class="keyword">if (this.<span class="keyword">length === <span class="number">0 || this.<span class="keyword">length &lt; fromIndex) {<br><span class="line">            <span class="keyword">return -<span class="number">1;<br><span class="line">        }<br><span class="line">        var <span class="keyword">index = fromIndex || <span class="number">0;<br><span class="line">        var <span class="keyword">length = this.<span class="keyword">length;<br><span class="line">        <span class="keyword">if (fromIndex &lt; <span class="number">0) {<br><span class="line">            <span class="keyword">index = <span class="keyword">length + fromIndex;<br><span class="line">        }<br><span class="line">            <br><span class="line">        <span class="keyword">for (; <span class="keyword">index &lt; <span class="keyword">length; <span class="keyword">index++) {<br><span class="line">            <span class="keyword">if (this[<span class="keyword">index] === element) {<br><span class="line">                <span class="keyword">return <span class="keyword">index;<br><span class="line">            }<br><span class="line">        }<br><span class="line">        <span class="keyword">return -<span class="number">1;<br><span class="line">    }<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="lastIndexOf方法">lastIndexOf方法</h5>
<p>lastIndexOf方法和indexOf方法类似，它用于查找元素在数组最后一项的索引，如果不存在则返回-1：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">5, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6, <span class="number">7];<br><span class="line">console.<span class="built_in">log(arr.indexOf(<span class="number">5));<span class="comment">//1<br><span class="line">console.<span class="built_in">log(arr.lastIndexOf(<span class="number">5));  <span class="comment">//4<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>如上面例子所示，数组中存在着两个数字5，使用indexOf方法将返回1，使用lastIndexOf将返回5。<br>lastIndexOf方法同样拥有第二个可选参数fromIndex，表示从该位置开始逆向查找。<br>如果fromIndex值大于或等于数组长度，则整个数组都会被查找。<br>如果fromIndex值为负值，并且其绝对值小于数组长度时，将从数组末尾向前查找。<br>如果fromIndex只为负数，但是其绝对值大于数组长度时，则直接返回-1。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">5, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6, <span class="number">7];<br><span class="line">console.<span class="built_in">log(arr.lastIndexOf(<span class="number">5, <span class="number">10)); <span class="comment">//4 <br><span class="line">console.<span class="built_in">log(arr.lastIndexOf(<span class="number">5, -<span class="number">4));  <span class="comment">//1<br><span class="line">console.<span class="built_in">log(arr.lastIndexOf(<span class="number">5, -<span class="number">10));  <span class="comment">//-1<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>对于不支持的浏览器，可以使用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br><span class="line">15<br><span class="line">16<br><span class="line">17<br><span class="line">18<br><span class="line">19<br><span class="line">20<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">if (!Array.<span class="keyword">prototype.lastIndexOf) {<br><span class="line">    Array.<span class="keyword">prototype.lastIndexOf = function (element, fromIndex) {<br><span class="line">        <span class="keyword">if (this.<span class="keyword">length === <span class="number">0 || (fromIndex &lt; <span class="number">0 &amp;&amp; this.<span class="keyword">length &lt; Math.<span class="keyword">abs(fromIndex))) {<br><span class="line">            <span class="keyword">return -<span class="number">1;<br><span class="line">        }<br><span class="line">            <br><span class="line">        var <span class="keyword">length = this.<span class="keyword">length;<br><span class="line">        var <span class="keyword">index = fromIndex || <span class="keyword">length - <span class="number">1;<br><span class="line">        <span class="keyword">if (fromIndex &lt; <span class="number">0) {<br><span class="line">            <span class="keyword">index = <span class="keyword">length + fromIndex;<br><span class="line">        }<br><span class="line">        <br><span class="line">        <span class="keyword">for (; <span class="keyword">index &gt; -<span class="number">1; <span class="keyword">index--) {<br><span class="line">            <span class="keyword">if (this[<span class="keyword">index] === element) {<br><span class="line">                <span class="keyword">return <span class="keyword">index;<br><span class="line">            }<br><span class="line">        }<br><span class="line">        <span class="keyword">return -<span class="number">1;<br><span class="line">    }<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h4 id="元素查找方法">元素查找方法</h4>
<h5 id="findIndex方法">findIndex方法</h5>
<p>findIndex方法用来查找数组中符合条件的元素的索引，如果没有则返回-1。它包含两个参数：<br>callback：用来判断元素是否符合条件的回调函数，包含三个参数，分别是：当前元素，当前元素索引，数组<br>thisArg：可选参数，表示callback中this对象。<br>来看看下面的例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6];<br><span class="line">    console.<span class="built_in">log(arr.findIndex(function (val, idx) {<br><span class="line">        <span class="keyword">return val &gt; <span class="number">3;<br><span class="line">})) <span class="comment">//3<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>查找第一个大于3的元素的索引，结果为3。<br>如果是一个比较复杂元素的数组，我们可以来查找其中符合某个条件的元素的索引：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"> var arr = [{ a: <span class="number">1 }, { a: <span class="number">2 }];<br><span class="line">console.<span class="built_in">log(arr.indexOf({ a: <span class="number">2 }));<span class="comment">//-1<br><span class="line">console.<span class="built_in">log(arr.findIndex(function (val, idx) {<br><span class="line">    <span class="keyword">return val.a == <span class="number">2;<span class="comment">//1<br><span class="line">}));<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>如果是要查找一个复杂对象，使用indexOf可能查找不到其索引，但是我们可以通过findIndex来找到其索引。这个对于查找复杂元素非常有用。<br>对于不支持的浏览器，可以使用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br><span class="line">15<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">if (!<span class="built_in">Array.prototype.findIndex) {<br><span class="line">    <span class="built_in">Array.prototype.findIndex = <span class="function"><span class="keyword">function (<span class="params">fn, thisArg) {<br><span class="line">        <span class="keyword">if (!isFunction(fn)) {<br><span class="line">            <span class="keyword">throw <span class="keyword">new <span class="built_in">TypeError(<span class="string">"fn不是一个有效的函数");<br><span class="line">        }<br><span class="line">        <br><span class="line">        <span class="keyword">var arr = <span class="keyword">this;<br><span class="line">        <span class="keyword">for (<span class="keyword">var i = <span class="number">0, length = arr.length; i &lt; length; i++) {<br><span class="line">            <span class="keyword">if (fn.call(thisArg, arr[i], i, arr)) {<br><span class="line">                <span class="keyword">return i;<br><span class="line">            }<br><span class="line">        }<br><span class="line">        <span class="keyword">return -<span class="number">1;<br><span class="line">    }<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="find方法">find方法</h5>
<p>find方法用户查找满足条件的第一个元素，如果没有满足条件的元素，则返回undefined。<br>find方法的用法和findIndex类似，它包含两个参数：<br>callback：用来判断元素是否符合条件的回调函数，包含三个参数，分别是：当前元素，当前元素索引，数组<br>thisArg：可选参数，表示callback中this对象。<br>来看看下面的例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [{ v: <span class="number">1 }, { v: <span class="number">3 }, { v: <span class="number">4 }, { v: <span class="number">5 }, { v: <span class="number">6 }];<br><span class="line">    console.<span class="built_in">log(arr.find(function (val, idx) {<br><span class="line">        <span class="keyword">return val.v &gt; <span class="number">3;<br><span class="line">}))<span class="comment">//Object {v: 4}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>通过find方法，查找到第一个其属性v大于3的元素并返回。<br>大家在日常的开发中一定会遇到这种查找符合条件的元素的需求，find方法是一个非常有用的方法。<br>对于不支持的浏览器，可以采用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">if (!<span class="built_in">Array.prototype.find) {<br><span class="line">    <span class="built_in">Array.prototype.find = <span class="function"><span class="keyword">function (<span class="params">fn, thisArg) {<br><span class="line">        <span class="keyword">if (!isFunction(fn)) {<br><span class="line">            <span class="keyword">throw <span class="keyword">new <span class="built_in">TypeError(<span class="string">"fn不是一个有效的函数");<br><span class="line">        }<br><span class="line">        <span class="keyword">var arr = <span class="keyword">this;<br><span class="line">        <span class="keyword">for (<span class="keyword">var i = <span class="number">0, length = arr.length; i &lt; length; i++) {<br><span class="line">            <span class="keyword">if (fn.call(thisArg, arr[i], i, arr)) {<br><span class="line">                <span class="keyword">return arr[i];<br><span class="line">            }<br><span class="line">        }<br><span class="line">    }<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h4 id="元素排序方法">元素排序方法</h4>
<p>在Array对象中，它还包含了一些排序的方法，主要有sort和reverse两个方法，下面来说明一下这两个方法。</p>
<h5 id="sort方法">sort方法</h5>
<p>sort方法用来对数组进行排序，并返回排序后的数组。它包含一个参数，这个参数是一个函数，用它来比较每个参数之前的前后关系。如果不传，则默认按照字符串的Unicode码位点进行排序。<br>看看下面的例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">2, <span class="number">4, <span class="number">6, <span class="number">2, <span class="number">4, <span class="number">8, <span class="number">11, <span class="number">34];<br><span class="line">console.<span class="built_in">log(arr.sort().toString());  <span class="comment">//11,2,2,34,4,4,6,8<br><span class="line">console.<span class="built_in">log(arr.sort(function (a, b) {<br><span class="line">    <span class="keyword">return a - b;<br><span class="line">}).toString());  <span class="comment">//2,2,4,4,6,8,11,34<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>如上结果所示，不指定比较函数的话，11排到了2前面，所以一般来说，我们要指定这个比较函数。</p>
<p>通过比较函数，我们可以来自定义数组排序的规则：<br>（1）返回-1，则元素a则排在了b前面<br>（2）返回0，位置不变<br>（3）返回1，元素a排在b后面</p>
<h5 id="reverse方法">reverse方法</h5>
<p>reverse方法是一个很简单的方法，它将数组元素的顺序进行倒序，并返回这个数组。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6, <span class="number">7];<br><span class="line">console.<span class="built_in">log(arr.reverse()); <span class="comment">//[7, 6, 5, 4, 3, 2, 1]<br><span class="line">console.<span class="built_in">log(arr);  <span class="comment">//[7, 6, 5, 4, 3, 2, 1]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h4 id="元素循环方法">元素循环方法</h4>
<p>Array对象中包含一些对元素进行遍历的方法，通过对元素进行遍历，从而进行不同的操作。</p>
<h5 id="filter方法">filter方法</h5>
<p>filter方法是用来过滤数组的，通过传入一个回调函数，如果元素通过回调函数的测试，则保留该元素，否则丢弃。具体用法如下：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6, <span class="number">7, <span class="number">8];<br><span class="line">console.<span class="built_in">log(arr.filter(function (val, idx, arr) {<br><span class="line">    <span class="keyword">return val &gt; <span class="number">3;<br><span class="line">}))  <span class="comment">//[4, 5, 6, 7, 8]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>如上所示，通过回调函数，我们过滤掉那些值不大于3的元素。<br>对于回调函数，它包含3个参数：元素，元素索引，当前数组。<br>filter函数还包含一个可选的参数thisArg，它表示回调函数中this的指向。<br>对于不支持的浏览器，可以采用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br><span class="line">15<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">if (!<span class="type">Array.prototype.filter) {<br><span class="line">    <span class="type">Array.prototype.filter = function (fn, thisArg) {<br><span class="line">        <span class="keyword">if (!isFunction(fn)) {<br><span class="line">            throw new <span class="type">TypeError(<span class="string">"fn不是一个有效的函数");<br><span class="line">        }<br><span class="line">        <span class="keyword">var arr = this;<br><span class="line">        <span class="keyword">var <span class="literal">result = [];<br><span class="line">        <span class="keyword">for (<span class="keyword">var i = <span class="number">0, length = arr.length; i &lt; length; i++) {<br><span class="line">            <span class="keyword">if (fn.call(thisArg, arr[i], i, arr)) {<br><span class="line">                <span class="literal">result.push(arr[i]);<br><span class="line">            }<br><span class="line">        }<br><span class="line">        <span class="keyword">return <span class="literal">result;<br><span class="line">    }<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="forEach函数">forEach函数</h5>
<p>forEach简单地说就是for循环的语法糖，它用于让数组的每一项都执行给定的函数。<br>看看下面的例子，循环数组的每一项，分别输入每一项。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6, <span class="number">7, <span class="number">8];<br><span class="line">arr.forEach(function (val, idx) {<br><span class="line">    console.<span class="built_in">log(val);<br><span class="line">})<br></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>和其他循环方法一样，forEach包含两个参数：<br>callback：循环每一项调用的函数，包含三个参数：元素，元素索引，当前数组<br>thisArg：可选的参数，表示callback中this的指向。<br>有一点要注意的是：除非是抛出异常，否则无法终止或跳出循环。<br>对于不支持的浏览器，可以采用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">if (!<span class="built_in">Array.prototype.forEach) {<br><span class="line">    <span class="built_in">Array.prototype.forEach = <span class="function"><span class="keyword">function (<span class="params">fn, thisArg) {<br><span class="line">        <span class="keyword">if (!isFunction(fn)) {<br><span class="line">            <span class="keyword">throw <span class="keyword">new <span class="built_in">TypeError(<span class="string">"fn不是一个有效的函数");<br><span class="line">        }<br><span class="line">        <span class="keyword">var arr = <span class="keyword">this;<br><span class="line">        <span class="keyword">for (<span class="keyword">var i = <span class="number">0, length = arr.length; i &lt; length; i++) {<br><span class="line">            fn.call(thisArg, arr[i], i, arr);<br><span class="line">        }<br><span class="line">    }<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="reduce函数">reduce函数</h5>
<p>reduct函数我们可以将其想象成一个累加器，从左到右依次将每个元素累加起来。<br>看看下面的例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5];<br><span class="line">console.<span class="built_in">log(arr.reduce(function (prev, current, currentIndex, <span class="built_in">array) {<br><span class="line">    <span class="keyword">return prev + current;<br><span class="line">}))<br></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>这个例子中，通过reduce方法将数组的元素累加起来，计算总和。<br>reduct包含两个参数：<br>callback：累加调用函数，包含4个参数：<br>（1）上一次调用的返回值，默认情况下是第一个元素<br>（2）当前元素<br>（3）当前元素索引<br>（4）被循环的数组<br>initialValue：累加的初始值，不传则是第一个元素<br>对于不支持的浏览器，可以采用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br><span class="line">15<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">if (<span class="type">Array.prototype.reduce) {<br><span class="line">    <span class="type">Array.prototype.reduce = function (fn, initialValue) {<br><span class="line">        <span class="keyword">if (!isFunction(fn)) {<br><span class="line">            throw new <span class="type">TypeError(<span class="string">"fn不是一个有效的函数");<br><span class="line">        }<br><span class="line">        <span class="keyword">var arr = this;<br><span class="line">        <span class="keyword">var <span class="literal">result = initialValue || arr[<span class="number">0];<br><span class="line">        <span class="keyword">var index = !!initialValue ? -<span class="number">1 : <span class="number">0;<br><span class="line"><br><span class="line">        <span class="keyword">for (<span class="keyword">var length = arr.length - <span class="number">1; index &lt; length; index++) {<br><span class="line">            <span class="literal">result = fn(<span class="literal">result, arr[index + <span class="number">1], index + <span class="number">1, arr);<br><span class="line">        }<br><span class="line">        <span class="keyword">return <span class="literal">result;<br><span class="line">    }<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="reduceRight方法">reduceRight方法</h5>
<p>reduceRight与reduce类似，只是从右向左开始调用回调函数，这里就不再赘述。<br>对于不支持的浏览器，可以使用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br><span class="line">15<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">if (!<span class="type">Array.prototype.reduceRight) {<br><span class="line">    <span class="type">Array.prototype.reduceRight = function (fn, initialValue) {<br><span class="line">        <span class="keyword">if (!isFunction(fn)) {<br><span class="line">            throw new <span class="type">TypeError(<span class="string">"fn不是一个有效的函数");<br><span class="line">        }<br><span class="line">        <span class="keyword">var arr = this;<br><span class="line">        <span class="keyword">var <span class="literal">result = initialValue || arr[arr.length - <span class="number">1];<br><span class="line">        <span class="keyword">var index = !!initialValue ? arr.length : arr.length - <span class="number">1;<br><span class="line">        <br><span class="line">        <span class="keyword">for (; index &gt; <span class="number">0; index--) {<br><span class="line">            <span class="literal">result = fn(<span class="literal">result, arr[index - <span class="number">1], index - <span class="number">1, arr);<br><span class="line">        }<br><span class="line">        <span class="keyword">return <span class="literal">result;<br><span class="line">    }<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h5 id="map函数">map函数</h5>
<p>map方法用来将数组转换成另外一个数组，通过传入的函数来进行转换。来看看下面的例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5];<br><span class="line">console.<span class="built_in">log(arr.<span class="built_in">map(function (val, idx, <span class="built_in">array) {<br><span class="line">    <span class="keyword">return { <span class="string">"val": val };<br><span class="line">}))  <span class="comment">//[Object, Object, Object, Object, Object]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>和其他循环方法一样，map方法包含两个参数：<br>callback：循环每一项调用的函数，包含三个参数：元素，元素索引，当前数组<br>thisArg：可选的参数，表示callback中this的指向。</p>
<p>对于不支持的浏览器，可以采用下面的polyfill：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">if (!<span class="type">Array.prototype.map) {<br><span class="line">    <span class="type">Array.prototype.map = function (fn, thisArg) {<br><span class="line">        <span class="keyword">if (!isFunction(fn)) {<br><span class="line">            throw new <span class="type">TypeError(<span class="string">"fn不是一个有效的函数");<br><span class="line">        }<br><span class="line">        <br><span class="line">        <span class="keyword">var arr = this;<br><span class="line">        <span class="keyword">var <span class="literal">result = [];<br><span class="line">        <span class="keyword">for (<span class="keyword">var i = <span class="number">0, length = arr.length; i &lt; length; i++) {<br><span class="line">            <span class="literal">result.push(fn.call(thisArg, arr[i], i, arr));<br><span class="line">        }<br><span class="line">        <span class="keyword">return <span class="literal">result;<br><span class="line">    }<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h4 id="数组操作方法">数组操作方法</h4>
<h5 id="concat方法">concat方法</h5>
<p>concat方法用来将传入的数组参数或非数组参数与原数组本身合并成一个新数组并返回，具体用法如下：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3];<br><span class="line">console.<span class="built_in">log(arr.concat([<span class="number">4, <span class="number">5]));<span class="comment">//1,2,3,4,5<br><span class="line">console.<span class="built_in">log(arr.concat(<span class="number">4, <span class="number">5));<span class="number">1,<span class="number">2,<span class="number">3,<span class="number">4,<span class="number">5<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>从上面的例子，我们可以看出三点：<br>（1）传入的参数可以是数组，也可以是非数组<br>（2）传入的参数数量没有限定<br>（3）原来的数组并不会被改变</p>
<h5 id="slice方法">slice方法</h5>
<p>slice方法用来剪切数组成一个新的数组，然后返回这个新数组。</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6];<br><span class="line">var newArr = arr.slice(<span class="number">1, <span class="number">3);<br><span class="line">console.<span class="built_in">log(newArr);<span class="comment">//[2,3]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>slice方法含有参数：<br>start：截取数组的开始索引，不传则默认为0<br>end：截取数组的结束索引，不传则截取到末尾，如果传了end参数，则被截取的数组将从start开始，于end索引处结束（不包含end）。</p>
<p>还有一点需要注意的是，被截取的数组的元素是引用对象的话，新数组的元素是和原数组的元素实际上是引用了同一个对象：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [{ v: <span class="number">1 }, { v: <span class="number">2 }];<br><span class="line">var newArr = arr.slice(<span class="number">0, <span class="number">1);<br><span class="line">newArr[<span class="number">0].v = <span class="number">666;<br><span class="line">console.<span class="built_in">log(newArr[<span class="number">0]);<span class="comment">//Object {v: 666}<br><span class="line">console.<span class="built_in">log(arr[<span class="number">0]);  <span class="comment">//Object {v: 666}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>如上所示，数组里的元素是引用对象，修改其中一个元素的值，另一个也会跟着变化。</p>
<h5 id="splice方法">splice方法</h5>
<p>splice方法是数组操作中最为强大的方法：它可以新增，删除，替换数组的元素。<br>splice方法会返回被删除的元素组成的数组，它包含三个参数：<br>（1）start：从哪个索引开始修改数组，如果值大于数组长度，则表示从末尾开始添加内容，如果是负数，则从数组的末位开始的第几位。<br>（2）deleteCount：表示要删除的数组的数量，如果deleteCount的值大于start索引之后元素的数量，则后面所有元素将被删除。<br>（3）items：要添加的新元素，如果不传入该参数，则表示删除元素<br>我们来看看具体的几个例子：</p>
<p><strong>删除元素：</strong><br>1、只传递start参数，并且start参数大于0小于数组长度</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6, <span class="number">7, <span class="number">8, <span class="number">9, <span class="number">10];<br><span class="line">console.<span class="built_in">log(arr.splice(<span class="number">2).toString());<span class="comment">//空字符串或3,4,5,6,7,8,9,10<br><span class="line">console.<span class="built_in">log(arr.toString());<span class="comment">//1,2,3,4,5,6,7,8,9,10或1,2<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>在这个例子中，splice只传递了start参数，这种情况下，根据浏览器有两种情况：<br>（1）在IE8等旧浏览器下，数组不会被该变<br>（2）在新浏览器下，数组会被删除掉从start参数开始后的所有元素</p>
<p>2、只传递start参数，并且start参数大于数组长度</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6, <span class="number">7, <span class="number">8, <span class="number">9, <span class="number">10];<br><span class="line">console.<span class="built_in">log(arr.splice(<span class="number">15).toString());<span class="comment">//空字符串<br><span class="line">console.<span class="built_in">log(arr.toString());<span class="comment">//1,2,3,4,5,6,7,8,9,10<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>传递了大于数组长度的值之后，数组没有被修改</p>
<p>3、只传递start参数，并且start参数是负数</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6, <span class="number">7, <span class="number">8, <span class="number">9, <span class="number">10];<br><span class="line">console.<span class="built_in">log(arr.splice(-<span class="number">2).toString());<span class="comment">//9,10<br><span class="line">console.<span class="built_in">log(arr.toString());  <span class="comment">//1,2,3,4,5,6,7,8<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>在这个例子中，我们传递了-2，也就是说，splice方法将从数组的末尾开始删除，即从末尾的第二位，最终被删除的元素就是9，10<br>注意：对于IE8等旧浏览器来说，数组仍然没有被修改</p>
<p>4、只传递start参数，并且start参数是绝对值大于数组长度的负数</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6, <span class="number">7, <span class="number">8, <span class="number">9, <span class="number">10];<br><span class="line">console.<span class="built_in">log(arr.splice(-<span class="number">1).toString());<span class="comment">//1,2,3,4,5,6,7,8,9,10<br><span class="line">console.<span class="built_in">log(arr.toString());  <span class="comment">//<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>在这个例子中，我们传递了-15，其绝对值15大于数组长度，则整个数组都被删除了。<br>注意：对于IE8等旧浏览器来说，数组仍然没有被修改</p>
<p>5、传递start和deleteCount参数</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6, <span class="number">7, <span class="number">8, <span class="number">9, <span class="number">10];<br><span class="line">console.<span class="built_in">log(arr.splice(<span class="number">1, <span class="number">2).toString());<span class="comment">//2,3<br><span class="line">console.<span class="built_in">log(arr.toString());<span class="comment">//1,4,5,6,7,8,9,10<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>这个例子中，传递了start参数1，deleteCount参数2，表示从索引1的位置删除2个元素，所以最终结果如上所示。</p>
<p>6、传递start和deleteCount参数，其中start参数是负数</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6, <span class="number">7, <span class="number">8, <span class="number">9, <span class="number">10];<br><span class="line">console.<span class="built_in">log(arr.splice(-<span class="number">5, <span class="number">2).toString());<span class="comment">//6,7<br><span class="line">console.<span class="built_in">log(arr.toString());<span class="comment">//1,2,3,4,5,8,9,10<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>我们传递了-5给start参数，则数组将从倒数第5位开始修改，然后删除2个元素，所以最终结果如上所示。</p>
<p><strong>添加元素</strong><br>splice方法也可以用来添加元素，我们要通过传递deleteCount参数为0，并且items不能为空来添加元素。看看下面的例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6, <span class="number">7, <span class="number">8, <span class="number">9, <span class="number">10];<br><span class="line">console.<span class="built_in">log(arr.splice(<span class="number">1, <span class="number">0, <span class="number">2, <span class="number">2, <span class="number">2).toString());<br><span class="line">console.<span class="built_in">log(arr.toString());  <span class="comment">//1,2,2,2,2,3,4,5,6,7,8,9,10<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>如上所示，我们在索引为1的位置开始添加了3个2作为新增的元素到数组中。</p>
<p><strong>替换元素</strong><br>splice方法用来替换元素和添加元素传递的参数类似，唯一的区别在于deleteCount不能为0。看看下面的例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">4, <span class="number">5, <span class="number">6, <span class="number">7, <span class="number">8, <span class="number">9, <span class="number">10];<br><span class="line">console.<span class="built_in">log(arr.splice(<span class="number">1, <span class="number">3, <span class="number">2, <span class="number">2, <span class="number">2).toString());<span class="comment">//2,3,4<br><span class="line">console.<span class="built_in">log(arr.toString());<span class="comment">//1,2,2,2,5,6,7,8,9,10<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>这个例子中，从索引为1的元素开始，删除掉3个元素，然后再添加2,2,2这三个元素，最终数组变成1,2,2,2,5,6,7,8,9,10。</p>
<h4 id="数组对象的方法总结">数组对象的方法总结</h4>
<p>Array对象上包含了很多个方法，有一些方法会修改数组本身，有一些方法只是返回新数组，在这里简单总结下：<br>（1）修改数组本身的方法：pop，push，shift，unshift，sort，reverse，splice<br>（2）不修改数组本身，只返回新数组的方法：concat，slice<br>另外，对于旧浏览器，可以引用这个polyfill：<a href="https://github.com/LuoPQ/array.polyfill.js" target="_blank">array.polyfill.js</a></p>
<h3 id="数组面试题">数组面试题</h3>
<p>数组是在实际开发中非常经常遇到的一个对象，而关于数组的面试题也经常遇到，下面说说一些几个常见的数组面试题：</p>
<h4 id="数组去重">数组去重</h4>
<p>数组去重是一个很常见的面试题，一个数组有多个元素，其中包含一些重复的元素，如何去除掉这些重复的元素呢？<br>最常见的方法是采用hash表去重法，看下面的代码：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br><span class="line">15<br><span class="line">16<br><span class="line">17<br><span class="line">18<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="type">Array.prototype.<span class="keyword">distinct = function () {<br><span class="line">    <span class="keyword">var arr = this;<br><span class="line">    <span class="keyword">var dic = {};<br><span class="line">    <span class="keyword">var <span class="literal">result = [];<br><span class="line">    <br><span class="line">    <span class="keyword">for (<span class="keyword">var i = <span class="number">0; i &lt; arr.length; i++) {<br><span class="line">        <span class="keyword">var key = arr[i];<br><span class="line">        <span class="keyword">if (!dic[key]) {<br><span class="line">            dic[key] = arr[i];<br><span class="line">            <span class="literal">result.push(arr[i]);<br><span class="line">        }<br><span class="line">    }<br><span class="line">    <span class="keyword">return <span class="literal">result;<br><span class="line">}<br><span class="line"><span class="keyword">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="number">1, <span class="number">2, <span class="number">3];<br><span class="line">console.log(arr.<span class="keyword">distinct());//[<span class="number">1,<span class="number">2,<span class="number">3]<br><span class="line"><span class="keyword">var arr = [<span class="string">"a", <span class="string">"b", <span class="string">"c", <span class="string">"a", <span class="string">"b", <span class="string">"c"];<br><span class="line">console.log(arr.<span class="keyword">distinct());  //[<span class="string">"a",<span class="string">"b",<span class="string">"c"]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>这个是最简单的情况，可以简单地实现数组的去重。但是也有一个明显的缺点：在作为key值时，元素会自动调用toString，最终导致一些复杂本来不是重复的元素被误认为重复。<br>我们看下面的例子：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="string">"1", <span class="string">"2", <span class="string">"3"];<br><span class="line">console.log(arr.<span class="keyword">distinct());//[<span class="number">1,<span class="number">2,<span class="number">3]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>这个例子中，数组分别包含数字1,2,3，字符串“1”，“2”，“3”，这原本是不重复的元素，去重后就剩下了1,2,3了。我们将上面的方法优化一下：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="type">Array.prototype.<span class="keyword">distinct = function () {<br><span class="line">    <span class="keyword">var arr = this;<br><span class="line">    <span class="keyword">var dic = {};<br><span class="line">    <span class="keyword">var <span class="literal">result = [];<br><span class="line">    <span class="keyword">for (<span class="keyword">var i = <span class="number">0; i &lt; arr.length; i++) {<br><span class="line">        <span class="keyword">var key = typeof (arr[i]) + arr[i];<br><span class="line">        <span class="keyword">if (!dic[key]) {<br><span class="line">            dic[key] = arr[i];<br><span class="line">            <span class="literal">result.push(arr[i]);<br><span class="line">        }<br><span class="line">    }<br><span class="line">    <span class="keyword">return <span class="literal">result;<br><span class="line">}<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>我们将所谓hash表的key值的元素加上一个类型：var key = typeof (arr[i]) + arr[i]，这样问题就基本解决了：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="string">"1", <span class="string">"2", <span class="string">"3"];<br><span class="line">console.log(arr.<span class="keyword">distinct());//[<span class="number">1, <span class="number">2, <span class="number">3, <span class="string">"1", <span class="string">"2", <span class="string">"3"]<br><span class="line"><br><span class="line"><span class="keyword">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="string">"1", <span class="string">"true", <span class="literal">true, <span class="literal">true];<br><span class="line">console.log(arr.<span class="keyword">distinct());//[<span class="number">1, <span class="number">2, <span class="number">3, <span class="string">"1", <span class="string">"true", <span class="literal">true]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>如果涉及到更极端的情况，数组元素中包含undefined或null，会怎么样呢，这种情况下，我们就要再进行一层判断：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br><span class="line">15<br><span class="line">16<br><span class="line">17<br><span class="line">18<br><span class="line">19<br><span class="line">20<br><span class="line">21<br><span class="line">22<br><span class="line">23<br><span class="line">24<br><span class="line">25<br><span class="line">26<br><span class="line">27<br><span class="line">28<br><span class="line">29<br><span class="line">30<br><span class="line">31<br><span class="line">32<br><span class="line">33<br><span class="line">34<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="type">Array.prototype.<span class="keyword">distinct = function () {<br><span class="line">    <span class="keyword">var arr = this;<br><span class="line">    <span class="keyword">var dic = {};<br><span class="line">    <span class="keyword">var <span class="literal">result = [];<br><span class="line"><br><span class="line">    <span class="keyword">var hasUnderfined = <span class="literal">false;<br><span class="line">    <span class="keyword">var hasNull = <span class="literal">false;<br><span class="line">    <span class="keyword">for (<span class="keyword">var i = <span class="number">0; i &lt; arr.length; i++) {<br><span class="line">        <span class="keyword">var <span class="keyword">type = typeof (arr[i]);<br><span class="line">        <span class="keyword">if (arr[i] === null) {<br><span class="line">            <span class="keyword">if (hasNull == <span class="literal">true) {<br><span class="line">                <span class="keyword">continue;<br><span class="line">            }<br><span class="line">            hasNull = <span class="literal">true;<br><span class="line">        }<br><span class="line">        <br><span class="line">        <span class="keyword">if (<span class="keyword">type === <span class="string">"undefined") {<br><span class="line">            <span class="keyword">if (hasUnderfined) {<br><span class="line">                <span class="keyword">continue;<br><span class="line">            }<br><span class="line">            hasUnderfined = <span class="literal">true;<br><span class="line">        }<br><span class="line"><br><span class="line">        <span class="keyword">var key = <span class="keyword">type + arr[i];<br><span class="line">        <span class="keyword">if (!dic[key]) {<br><span class="line">            dic[key] = arr[i];<br><span class="line">            <span class="literal">result.push(arr[i]);<br><span class="line">        }<br><span class="line">    }<br><span class="line">    <span class="keyword">return <span class="literal">result;<br><span class="line">} <br><span class="line"><br><span class="line"><span class="keyword">var arr = [<span class="number">1, <span class="number">2, <span class="number">3, <span class="string">"1", <span class="string">"2", <span class="string">"3", undefined, undefined, null, null];<br><span class="line">console.log(arr.<span class="keyword">distinct()); //[<span class="number">1, <span class="number">2, <span class="number">3, <span class="string">"1", <span class="string">"2", <span class="string">"3", undefined, null]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>我们再来考虑一下，如果数组是复杂对象的情况下会如何，假设这种情况：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="variable"><span class="keyword">var arr = [{<span class="variable"><span class="keyword">val : <span class="number">1}, {<span class="variable"><span class="keyword">val : <span class="number">1},{ <span class="variable"><span class="keyword">val : <span class="number">2}];<br></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>通常对于这样的数据，我们是将两个{val:1}当成是一样的数据的，但是由于是引用类型，它们又是不相等的数据，如果要去重，应该如何做呢？<br>我们可以传入一个key值转换函数，通过这个函数来过滤这些复杂的数据：</p>
<table>
<tbody>
<tr>
<td class="gutter">
<pre><span class="line">1<br><span class="line">2<br><span class="line">3<br><span class="line">4<br><span class="line">5<br><span class="line">6<br><span class="line">7<br><span class="line">8<br><span class="line">9<br><span class="line">10<br><span class="line">11<br><span class="line">12<br><span class="line">13<br><span class="line">14<br><span class="line">15<br><span class="line">16<br><span class="line">17<br><span class="line">18<br><span class="line">19<br><span class="line">20<br><span class="line">21<br><span class="line">22<br><span class="line">23<br><span class="line">24<br><span class="line">25<br><span class="line">26<br><span class="line">27<br><span class="line">28<br><span class="line">29<br><span class="line">30<br><span class="line">31<br><span class="line">32<br><span class="line">33<br><span class="line">34<br><span class="line">35<br><span class="line">36<br><span class="line">37<br><span class="line">38<br><span class="line">39<br><span class="line">40<br><span class="line">41<br><span class="line">42<br><span class="line">43<br><span class="line">44<br><span class="line">45<br><span class="line">46<br><span class="line">47<br><span class="line">48<br><span class="line">49<br><span class="line">50<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
<td class="code">
<pre><span class="line"><span class="keyword">var isFunction = function (fn) {<br><span class="line">    <span class="keyword">return <span class="type">Object.prototype.toString.call(fn) === '[<span class="keyword">object <span class="type">Function]';<br><span class="line">}<br><span class="line"><br><span class="line"><span class="type">Array.prototype.<span class="keyword">distinct = function (keyThunk) {<br><span class="line">    <span class="keyword">var arr = this;<br><span class="line">    <span class="keyword">var dic = {};<br><span class="line">    <span class="keyword">var <span class="literal">result = [];<br><span class="line"><br><span class="line">    keyThunk = isFunction(keyThunk) ? keyThunk : function (val) {<br><span class="line">        <span class="keyword">return typeof (val) + val;<br><span class="line">    }<br><span class="line"><br><span class="line">    <span class="keyword">var hasUnderfined = <span class="literal">false;<br><span class="line">    <span class="keyword">var hasNull = <span class="literal">false;<br><span class="line">    <span class="keyword">for (<span class="keyword">var i = <span class="number">0; i &lt; arr.length; i++) {<br><span class="line">        <span class="keyword">var <span class="keyword">type = typeof (arr[i]);<br><span class="line"><br><span class="line">        <span class="keyword">if (arr[i] === null) {<br><span class="line">            <span class="keyword">if (hasNull == <span class="literal">true) {<br><span class="line">                <span class="keyword">continue;<br><span class="line">            }<br><span class="line">            hasNull = <span class="literal">true;<br><span class="line">        }<br><span class="line"><br><span class="line">        <span class="keyword">if (<span class="keyword">type === <span class="string">"undefined") {<br><span class="line">            <span class="keyword">if (hasUnderfined) {<br><span class="line">                <span class="keyword">continue;<br><span class="line">            }<br><span class="line">            hasUnderfined = <span class="literal">true;<br><span class="line">        }<br><span class="line"><br><span class="line">        <span class="keyword">var key = keyThunk(arr[i]);<br><span class="line">        <span class="keyword">if (!dic[key]) {<br><span class="line">            dic[key] = arr[i];<br><span class="line">            <span class="literal">result.push(arr[i]);<br><span class="line">        }<br><span class="line">    }<br><span class="line">    <span class="keyword">return <span class="literal">result;<br><span class="line">}<br><span class="line"><br><span class="line"><span class="keyword">var arr = [{ val: <span class="number">1 }, { val: <span class="number">1 }, { val: <span class="number">3 }];<br><span class="line">console.log(arr.<span class="keyword">distinct().map(function (val) {<br><span class="line">    <span class="keyword">return val.val<br><span class="line">}));//[<span class="number">1]<br><span class="line">console.log(arr.<span class="keyword">distinct(function (val) {<br><span class="line">    <span class="keyword">return val.val;<br><span class="line">}).map(function (val) {<br><span class="line">    <span class="keyword">return val.val;<br><span class="line">})) [<span class="number">1,<span class="number">3]<br></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>我们添加了一个key值的转换函数，这样就可以比较那些复杂对象了。</p>
<p>欢迎补充其他常见的面试题！</p>
<h3 id="总结">总结</h3>
<p>本文详细总结了Javascript中Array对象，首先从基本概念开始说起，然后一一介绍了一些常用的数组方法，将其整理归类。最后解答了一些常见的面试题，欢迎大家交流！！</p>
</div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Javascript中apply、call、bind]]></title>
        <id>https://itliuwk.github.io/post/javascript-zhong-applycallbind</id>
        <link href="https://itliuwk.github.io/post/javascript-zhong-applycallbind">
        </link>
        <updated>2017-05-02T01:15:01.000Z</updated>
        <summary type="html"><![CDATA[<p>在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。</p>
<p></p>]]></summary>
        <content type="html"><![CDATA[<p>在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。</p>
<p></p>
<!--more-->
<h2>apply、call</h2>
<p>JavaScript 的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。</p>
<p>先来一个栗子：</p>
<p>&nbsp;</p>
<pre><span style="color: #0000ff;">function</span><span style="color: #000000;"> fruits() {}

fruits.prototype </span>=<span style="color: #000000;"> {
    color: </span>"red"<span style="color: #000000;">,
    say: </span><span style="color: #0000ff;">function</span><span style="color: #000000;">() {
        console.log(</span>"My color is " + <span style="color: #0000ff;">this</span><span style="color: #000000;">.color);
    }
}

</span><span style="color: #0000ff;">var</span> apple = <span style="color: #0000ff;">new</span><span style="color: #000000;"> fruits;
apple.say();    </span><span style="color: #008000;">//</span><span style="color: #008000;">My color is red</span></pre>
<p>&nbsp;</p>
<p>但是如果我们有一个对象banana= {color : "yellow"} ,我们不想对它重新定义 say 方法，那么我们可以通过 call 或 apply 用 apple 的 say 方法：</p>
<div class="cnblogs_code">
<pre>banana =<span style="color: #000000;"> {
    color: </span>"yellow"<span style="color: #000000;">
}
apple.say.call(banana);     </span><span style="color: #008000;">//</span><span style="color: #008000;">My color is yellow</span>
apple.say.apply(banana);    <span style="color: #008000;">//</span><span style="color: #008000;">My color is yellow</span></pre>
</div>
<p>所以，可以看出 call 和 apply 是为了动态改变 this 而出现的，当一个 object 没有某个方法（本栗子中banana没有say方法），但是其他的有（本栗子中apple有say方法），我们可以借助call或apply用其它对象的方法来操作。</p>
<p>&nbsp;</p>
<h3>apply、call 的区别</h3>
<p>对于 apply、call 二者而言，作用完全一样，只是接受参数的方式不太一样。例如，有一个函数定义如下：</p>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre> <span style="color: #0000ff;">var</span> func = <span style="color: #0000ff;">function</span><span style="color: #000000;">(arg1, arg2) {
<p>};</span></pre></p>
</div>
<p>就可以通过如下方式来调用：</p>
<div class="cnblogs_code">
<pre>func.call(<span style="color: #0000ff;">this</span><span style="color: #000000;">, arg1, arg2);
func.apply(</span><span style="color: #0000ff;">this</span>, [arg1, arg2])</pre>
</div>
<p>其中 this 是你想指定的上下文，他可以是任何一个 JavaScript 对象(JavaScript 中一切皆对象)，call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里。　　</p>
<p>JavaScript 中，某个函数的参数数量是不固定的，因此要说适用条件的话，当你的参数是明确知道数量时用 call 。</p>
<p>而不确定的时候用 apply，然后把参数 push 进数组传递进去。当参数数量不确定时，函数内部也可以通过 arguments 这个伪数组来遍历所有的参数。</p>
<p>为了巩固加深记忆，下面列举一些常用用法：</p>
<p>&nbsp;</p>
<h4>1、数组之间追加</h4>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> array1 = [12 , "foo" , {name "Joe"} , -2458<span style="color: #000000;">]; 
</span><span style="color: #0000ff;">var</span> array2 = ["Doe" , 555 , 100<span style="color: #000000;">]; 
Array.prototype.push.apply(array1, array2); 
</span><span style="color: #008000;">/*</span><span style="color: #008000;"> array1 值为  [12 , "foo" , {name "Joe"} , -2458 , "Doe" , 555 , 100] </span><span style="color: #008000;">*/</span></pre>
</div>
<h4>2、获取数组中的最大值和最小值</h4>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span>  numbers = [5, 458 , 120 , -215<span style="color: #000000;"> ]; 
</span><span style="color: #0000ff;">var</span> maxInNumbers = Math.max.apply(Math, numbers),   <span style="color: #008000;">//</span><span style="color: #008000;">458</span>
    maxInNumbers = Math.max.call(Math,5, 458 , 120 , -215); <span style="color: #008000;">//</span><span style="color: #008000;">458</span></pre>
</div>
<h4>3、验证是否是数组（前提是toString()方法没有被重写过）</h4>
<div class="cnblogs_code">
<pre><span style="color: #000000;">functionisArray(obj){ 
    </span><span style="color: #0000ff;">return</span> Object.prototype.toString.call(obj) === '[object Array]'<span style="color: #000000;"> ;
}</span></pre>
</div>
<h4>4、类（伪）数组使用数组方法</h4>
<div class="cnblogs_code">
<pre>    <span style="color: #0000ff;">var</span> domNodes = Array.prototype.slice.call(document.getElementsByTagName("*"));</pre>
</div>
<p>Javascript中存在一种名为伪数组的对象结构。比较特别的是 arguments 对象，还有像调用 getElementsByTagName , document.childNodes 之类的，它们返回NodeList对象都属于伪数组。不能应用 Array下的 push , pop 等方法。</p>
<p>但是我们能通过 Array.prototype.slice.call 转换为真正的数组的带有 length 属性的对象，这样 domNodes 就可以应用 Array 下的所有方法了。</p>
<p>&nbsp;</p>
<h2>bind</h2>
<p>说完了 apply 和 call ，再来说说bind。bind() 方法与 apply 和 call 很相似，也是可以改变函数体内 this 的指向。</p>
<p>MDN的解释是：bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入&nbsp;bind()方法的第一个参数作为&nbsp;this，传入&nbsp;bind()&nbsp;方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</p>
<p>直接来看看具体如何使用，在常见的单体模式中，通常我们会使用 _this , that , self 等保存 this ，这样我们可以在改变了上下文之后继续引用到它。&nbsp;像这样：</p>
<pre><span style="color: #0000ff;">var</span> foo =<span style="color: #000000;"> {
    bar : </span>1<span style="color: #000000;">,
    eventBind: </span><span style="color: #0000ff;">function</span><span style="color: #000000;">(){
        </span><span style="color: #0000ff;">var</span> _this = <span style="color: #0000ff;">this</span><span style="color: #000000;">;
        $(</span>'.someClass').on('click',<span style="color: #0000ff;">function</span><span style="color: #000000;">(event) {
            </span><span style="color: #008000;">/*</span><span style="color: #008000;"> Act on the event </span><span style="color: #008000;">*/</span><span style="color: #000000;">
            console.log(_this.bar);     </span><span style="color: #008000;">//</span><span style="color: #008000;">1</span>
<span style="color: #000000;">        });
    }
}</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>
<p>由于 Javascript 特有的机制，上下文环境在 eventBind:function(){ } 过渡到&nbsp;$('.someClass').on('click',function(event) {&nbsp;})&nbsp;发生了改变，上述使用变量保存&nbsp;this&nbsp;这些方式都是有用的，也没有什么问题。</p>
<p>当然使用 bind() 可以更加优雅的解决这个问题：</p>
<p>&nbsp;</p>
<pre><span style="color: #0000ff;">var</span> foo =<span style="color: #000000;"> {
    bar : </span>1<span style="color: #000000;">,
    eventBind: </span><span style="color: #0000ff;">function</span><span style="color: #000000;">(){
        $(</span>'.someClass').on('click',<span style="color: #0000ff;">function</span><span style="color: #000000;">(event) {
            </span><span style="color: #008000;">/*</span><span style="color: #008000;"> Act on the event </span><span style="color: #008000;">*/</span><span style="color: #000000;">
            console.log(</span><span style="color: #0000ff;">this</span>.bar);      <span style="color: #008000;">//</span><span style="color: #008000;">1</span>
        }.bind(<span style="color: #0000ff;">this</span><span style="color: #000000;">));
    }
}</span></pre>
<p>在上述代码里，bind() 创建了一个函数，当这个click事件绑定在被调用的时候，它的 this 关键词会被设置成被传入的值（这里指调用bind()时传入的参数）。</p>
<p>因此，这里我们传入想要的上下文 this(其实就是 foo )，到 bind() 函数中。然后，当回调函数被执行的时候， this 便指向&nbsp;foo&nbsp;对象。再来一个简单的栗子：</p>
<pre><span style="color: #0000ff;">var</span> bar = <span style="color: #0000ff;">function</span><span style="color: #000000;">(){
console.log(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">.x);
}
</span><span style="color: #0000ff;">var</span> foo =<span style="color: #000000;"> {
x:</span>3<span style="color: #000000;">
}
bar(); </span><span style="color: #008000;">//</span><span style="color: #008000;"> undefined</span>
<span style="color: #0000ff;">var</span> func =<span style="color: #000000;"> bar.bind(foo);
func(); </span><span style="color: #008000;">//</span><span style="color: #008000;"> 3</span></pre>
<p>这里我们创建了一个新的函数 func，当使用 bind() 创建一个绑定函数之后，它被执行的时候，它的 this 会被设置成 foo ， 而不是像我们调用 bar() 时的全局作用域。</p>
<p>有个有趣的问题，如果连续 bind() 两次，亦或者是连续 bind() 三次那么输出的值是什么呢？像这样：</p>
<pre><span style="color: #0000ff;">var</span> bar = <span style="color: #0000ff;">function</span><span style="color: #000000;">(){
    console.log(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">.x);
}
</span><span style="color: #0000ff;">var</span> foo =<span style="color: #000000;"> {
    x:</span>3<span style="color: #000000;">
}
</span><span style="color: #0000ff;">var</span> sed =<span style="color: #000000;"> {
    x:</span>4<span style="color: #000000;">
}
</span><span style="color: #0000ff;">var</span> func =<span style="color: #000000;"> bar.bind(foo).bind(sed);
func(); </span><span style="color: #008000;">//</span><span style="color: #008000;">? </span>

<span style="color: #0000ff;">var</span> fiv =<span style="color: #000000;"> {
    x:</span>5<span style="color: #000000;">
}
</span><span style="color: #0000ff;">var</span> func =<span style="color: #000000;"> bar.bind(foo).bind(sed).bind(fiv);
func(); </span><span style="color: #008000;">//</span><span style="color: #008000;">? </span></pre>
<p>答案是，两次都仍将输出 3 ，而非期待中的 4 和 5 。</p>
<p>原因是，在Javascript中，多次 bind() 是无效的。更深层次的原因， bind() 的实现，相当于使用函数在内部包了一个 call / apply ，第二次 bind() 相当于再包住第一次 bind() ,故第二次以后的 bind 是无法生效的。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>apply、call、bind比较</h2>
<p>那么 apply、call、bind 三者相比较，之间又有什么异同呢？何时使用 apply、call，何时使用 bind 呢。简单的一个栗子：</p>
<pre><span style="color: #0000ff;">var</span> obj =<span style="color: #000000;"> {
    x: </span>81<span style="color: #000000;">,
};

</span><span style="color: #0000ff;">var</span> foo =<span style="color: #000000;"> {
    getX: </span><span style="color: #0000ff;">function</span><span style="color: #000000;">() {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">.x;
    }
}

console.log(foo.getX.bind(obj)());  </span><span style="color: #008000;">//</span><span style="color: #008000;">81</span>
console.log(foo.getX.call(obj));    <span style="color: #008000;">//</span><span style="color: #008000;">81</span>
console.log(foo.getX.apply(obj));   <span style="color: #008000;">//</span><span style="color: #008000;">81</span></pre>
<p>三个输出的都是81，但是注意看使用 bind() 方法的，他后面多了对括号。</p>
<p>也就是说，区别是，当你希望改变上下文环境之后并非立即执行，而是回调执行的时候，使用 bind() 方法。而 apply/call 则会立即执行函数。</p>
<p>再总结一下：</p>
<ul>
<li>apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；</li>
<li>apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；</li>
<li>apply 、 call 、bind 三者都可以利用后续参数传参；</li>
<li>bind&nbsp;是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</li>
</ul></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[同步回调函数与异步回调函数示例]]></title>
        <id>https://itliuwk.github.io/post/tong-bu-hui-diao-han-shu-yu-yi-bu-hui-diao-han-shu-shi-li</id>
        <link href="https://itliuwk.github.io/post/tong-bu-hui-diao-han-shu-yu-yi-bu-hui-diao-han-shu-shi-li">
        </link>
        <updated>2017-04-20T06:25:42.000Z</updated>
        <summary type="html"><![CDATA[<p>同步回调函数与异步回调函数示例</p>]]></summary>
        <content type="html"><![CDATA[<p>同步回调函数与异步回调函数示例</p>
<!--more-->
<h5>JS中的回调函数一共有两种</h5>
<ol><ol>
<li>同步回调函数（即普通的回调函数）。</li>
<li>异步回调函数<br>注：JS中的同步异步和现实生活的正好相反。
<h6>其中同步回调函数是要等到回调函数都执行完成后才能进行接下来的操作，也就是说是阻塞式运行</h6>
</li>
</ol></ol>
<p>
<p>同步回调函数示例</p></p>
<p>&nbsp;</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"></a></span></div>
<pre><span style="color: #0000ff;">function</span><span style="color: #000000;"> waitFive(callback){ 
      </span><span style="color: #0000ff;">var</span> currentDate = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date(), 
           pus </span>= 0<span style="color: #000000;">; 
      </span><span style="color: #0000ff;">while</span>(pus&lt;1000<span style="color: #000000;">){ 
          </span><span style="color: #0000ff;">var</span> date = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date(); 
          pus </span>= date -<span style="color: #000000;"> currentDate; 
      } 
      callback(</span>"回调执行完成"<span style="color: #000000;">); 
      pus </span>= 2000<span style="color: #000000;">;
} 
waitFive(
          </span><span style="color: #0000ff;">function</span>(msg){              <span style="color: #008000;">//</span><span style="color: #008000;">这里就是callback回调函数</span>
<span style="color: #000000;">               console.log(msg);
          }
);
console.log(</span>"进行第二步操作；"<span style="color: #000000;">);
 </span>*****执行结果为：*****<span style="color: #000000;">
        回调执行完成 
        进行第二步操作</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"></a></span></div></div>
<p>异步回调函数示例:</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"></a></span></div>
<pre><span style="color: #0000ff;">function</span><span style="color: #000000;"> waitFive(callback){ 
      setTimeout(</span><span style="color: #0000ff;">function</span><span style="color: #000000;">(){   
            callback(</span>'回调执行完成'<span style="color: #000000;">);
      },</span>2000<span style="color: #000000;">); 
}
waitFive( 
      </span><span style="color: #0000ff;">function</span>(msg){           <span style="color: #008000;">//</span><span style="color: #008000;">这里就是callback回调函数 </span>
<span style="color: #000000;">              console.log(msg); 
      }
);
console.log(</span>"进行第二步操作；"<span style="color: #000000;">); 
<p></span><em><strong><strong>执行结果为：</strong></strong></em><span style="color: #000000;"><br>
进行第二步操作
回调执行完成</span></pre></p>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"></a></span></div></div>
<p>&nbsp;</p></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jquery基本操作笔记]]></title>
        <id>https://itliuwk.github.io/post/jquery-ji-ben-cao-zuo-bi-ji</id>
        <link href="https://itliuwk.github.io/post/jquery-ji-ben-cao-zuo-bi-ji">
        </link>
        <updated>2017-01-29T06:22:07.000Z</updated>
        <summary type="html"><![CDATA[  <p>jquery基本操作笔记</p> ]]></summary>
        <content type="html"><![CDATA[  <p>jquery基本操作笔记</p> 
  <!--more--> 
  <p><span lang="en-US">jq<span lang="zh-CN">和<span lang="en-US">js</span></span></span></p> 
  <p><strong>可以共存，不能混用</strong>；</p> 
  <div class="cnblogs_Highlighter sh-gutter"> 
   <div> 
    <div id="highlighter_762027" class="syntaxhighlighter  javascript"> 
     <div class="container"> 
      <div class="line number1 index0 alt2">
       <code class="javascript plain">$(</code>
       <code class="javascript string">'.box'</code>
       <code class="javascript plain">).css(</code>
       <code class="javascript string">'background'</code>
       <code class="javascript plain">,</code>
       <code class="javascript string">'red'</code>
       <code class="javascript plain">);</code>
      </div> 
      <div class="line number2 index1 alt1">
       <code class="javascript plain">$(</code>
       <code class="javascript string">&quot;.box&quot;</code>
       <code class="javascript plain">).css({ color:&nbsp;</code>
       <code class="javascript string">&quot;#ff0011&quot;</code>
       <code class="javascript plain">, background:&nbsp;</code>
       <code class="javascript string">&quot;blue&quot;</code>
       <code class="javascript plain">});</code>
      </div> 
      <div class="line number3 index2 alt2">
       <code class="javascript plain">$(</code>
       <code class="javascript string">'li:eq(2)'</code>
       <code class="javascript plain">).css(</code>
       <code class="javascript string">'background'</code>
       <code class="javascript plain">,</code>
       <code class="javascript string">'red'</code>
       <code class="javascript plain">);&nbsp;&nbsp;</code>
       <code class="javascript comments">//：first选择</code>
      </div> 
      <div class="line number4 index3 alt1">
       <code class="javascript plain">$(</code>
       <code class="javascript string">'li:odd'</code>
       <code class="javascript plain">).css(</code>
       <code class="javascript string">'background'</code>
       <code class="javascript plain">,</code>
       <code class="javascript string">'red'</code>
       <code class="javascript plain">);&nbsp;&nbsp;</code>
       <code class="javascript comments">//even奇数行，odd偶数行</code>
      </div> 
      <div class="line number5 index4 alt2">
       <code class="javascript plain">$(</code>
       <code class="javascript string">'li'</code>
       <code class="javascript plain">).filter(</code>
       <code class="javascript string">'.box'</code>
       <code class="javascript plain">).css(</code>
       <code class="javascript string">'background'</code>
       <code class="javascript plain">,</code>
       <code class="javascript string">'red'</code>
       <code class="javascript plain">);&nbsp; filter过滤、筛选；</code>
      </div> 
      <div class="line number6 index5 alt1">
       <code class="javascript plain">$(</code>
       <code class="javascript string">'li'</code>
       <code class="javascript plain">).filter(</code>
       <code class="javascript string">'[title=hello]'</code>
       <code class="javascript plain">).css(</code>
       <code class="javascript string">'background'</code>
       <code class="javascript plain">,</code>
       <code class="javascript string">'red'</code>
       <code class="javascript plain">);</code>
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <p><strong>方法函数化</strong>：</p> 
  <div class="cnblogs_Highlighter sh-gutter"> 
   <div> 
    <div id="highlighter_788541" class="syntaxhighlighter  javascript"> 
     <div class="line number1 index0 alt2">
      <code class="javascript plain">window.onload =&nbsp;</code>
      <code class="javascript keyword">function</code>
      <code class="javascript plain">(){};</code>
     </div>
     <div class="line number2 index1 alt1">
      <code class="javascript plain">$(</code>
      <code class="javascript keyword">function</code>
      <code class="javascript plain">(){});</code>
     </div>
     <div class="line number3 index2 alt2">
      <code class="javascript keyword">function</code>&nbsp;
      <code class="javascript plain">$(){}</code>
     </div>
     <div class="line number4 index3 alt1">
      <code class="javascript plain">innerHTML = 123;</code>
     </div>
     <div class="line number5 index4 alt2">
      <code class="javascript plain">html(123)</code>
     </div>
     <div class="line number6 index5 alt1">
      <code class="javascript keyword">function</code>&nbsp;
      <code class="javascript plain">html(){}</code>
     </div>
     <div class="line number7 index6 alt2">
      <code class="javascript plain">onclick =&nbsp;</code>
      <code class="javascript keyword">function</code>
      <code class="javascript plain">(){};</code>
     </div>
     <div class="line number8 index7 alt1">
      <code class="javascript plain">click(</code>
      <code class="javascript keyword">function</code>
      <code class="javascript plain">(){})</code>
     </div>
     <div class="line number9 index8 alt2">
      <code class="javascript keyword">function</code>&nbsp;
      <code class="javascript plain">click(){}</code>
     </div>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_431515" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div1'</code>
          <code class="javascript plain">).click(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert( $(</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">).html() );</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><span lang="en-US">jquery<span lang="zh-CN">中的<span lang="en-US">this<span lang="zh-CN">的写法是<span lang="en-US">&nbsp;&nbsp; $(this)&nbsp;&nbsp;<span lang="zh-CN">；<span lang="en-US">html()&nbsp;&nbsp;<span lang="zh-CN">因为<span lang="zh-CN">方法函数法的思想的存在<span lang="zh-CN">，<span lang="en-US">()&nbsp;<span lang="zh-CN">是不能省去的，运行函数；这<span lang="x-none">在<span lang="en-US">jquery<span lang="zh-CN">中很常见；</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
     <p><span lang="en-US"><strong>js</strong><span lang="zh-CN"><strong>和</strong><span lang="en-US"><strong>jquery</strong><span lang="zh-CN"><strong>的关系</strong><span lang="zh-CN">：</span></span></span></span></span></p>
     <p>可以互存，不能混用；</p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_267034" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div1'</code>
          <code class="javascript plain">).click(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( $(this).html() );&nbsp; //jq的写法；</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( this.innerHTML );&nbsp; //js的写法；这样写也是正确的；</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert( $(</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">).innerHTML );&nbsp;&nbsp;</code>
          <code class="javascript comments">//错误的；前面是jquery，后面是js，混用了，不允许；</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(&nbsp;</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">.html() );&nbsp;&nbsp;</code>
          <code class="javascript comments">//错误的；前面是js，后面是jquery，混用了，不允许；</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>链式操作</strong>：</p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_824045" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">/*var oDiv = $('#div1');</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">oDiv.html('hello');</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">oDiv.css('background','red');</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">oDiv.click(function(){</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">alert(123);</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">});*/</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div1'</code>
          <code class="javascript plain">).html(</code>
          <code class="javascript string">'hello'</code>
          <code class="javascript plain">).css(</code>
          <code class="javascript string">'background'</code>
          <code class="javascript plain">,</code>
          <code class="javascript string">'red'</code>
          <code class="javascript plain">).click(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(123);</code>
         </div> 
         <div class="line number10 index9 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number11 index10 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p>建议熟悉了，再写链式写法；</p>
     <p><strong>取值和赋值合体：</strong></p>
     <p>赋值和取值用的同一种方法，只不过是通过有没有参数来决定是取值还是赋值；</p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_94039" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//oDiv.innerHTML = 'hello';&nbsp; //赋值</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( oDiv.innerHTML );&nbsp; //取值</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('#div1').html('hello');&nbsp; //赋值</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( $('#div1').html() ); //取值</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">css(</code>
          <code class="javascript string">'width'</code>
          <code class="javascript plain">,</code>
          <code class="javascript string">'200px'</code>
          <code class="javascript plain">)&nbsp;&nbsp;</code>
          <code class="javascript comments">//设置width是200px；</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">css(</code>
          <code class="javascript string">'width'</code>
          <code class="javascript plain">)&nbsp;&nbsp;</code>
          <code class="javascript comments">//获取width的值；</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p>取值和赋值：获取的时候只能获取一个，赋值的时候赋值到所有的；</p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_955961" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( $('li').html() );&nbsp; //当一组元素的时候，取值是一组中的第一个；会弹出内容：aaa</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'li'</code>
          <code class="javascript plain">).html(</code>
          <code class="javascript string">'hello'</code>
          <code class="javascript plain">);&nbsp;&nbsp;</code>
          <code class="javascript comments">//当一组元素的时候,赋值是一组中的所有元素</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong><span lang="en-US">$()<span lang="zh-CN">下的常用方法</span></span></strong></p>
     <p lang="en-US">attr()</p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_644814" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert($('div').attr('title'));&nbsp; 获取title属性</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).attr(</code>
          <code class="javascript string">'title'</code>
          <code class="javascript plain">,</code>
          <code class="javascript string">'456'</code>
          <code class="javascript plain">);&nbsp;&nbsp;</code>
          <code class="javascript comments">//设置title</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).attr(</code>
          <code class="javascript string">'class'</code>
          <code class="javascript plain">,</code>
          <code class="javascript string">'box'</code>
          <code class="javascript plain">);&nbsp;&nbsp;</code>
          <code class="javascript comments">//设置class</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p>filter<span lang="zh-CN">：过滤</span></p>
     <p><span lang="en-US">not<span lang="zh-CN">：&nbsp;<span lang="en-US">filter<span lang="zh-CN">的反义词</span></span></span></span></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_874222" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('div').filter('.box').css('background','red'); //只带有box的才会被选择</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).not(</code>
          <code class="javascript string">'.box'</code>
          <code class="javascript plain">).css(</code>
          <code class="javascript string">'background'</code>
          <code class="javascript plain">,</code>
          <code class="javascript string">'red'</code>
          <code class="javascript plain">);&nbsp;</code>
          <code class="javascript comments">//不带有box的才会选择；not和filter是反义词</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong><span lang="en-US">has<span lang="zh-CN">和<span lang="en-US">filter<span lang="zh-CN">的区别</span></span></span></span></strong></p>
     <p><span lang="en-US">has<span lang="zh-CN">是<span lang="zh-CN">包含<span lang="zh-CN">的意思，选择的是元素里面的东西；</span></span></span></span></p>
     <p><span lang="zh-CN">而<span lang="en-US">filter<span lang="zh-CN">针对的元素自身的选择；</span></span></span></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_131933" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('div').has('span').css('background','red');</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('div').has('.box').css('background','red');&nbsp;&nbsp; //has是选择元素里面的东西，不能选择到第二个div</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).filter(</code>
          <code class="javascript string">'.box'</code>
          <code class="javascript plain">).css(</code>
          <code class="javascript string">'background'</code>
          <code class="javascript plain">,</code>
          <code class="javascript string">'red'</code>
          <code class="javascript plain">);&nbsp;&nbsp;</code>
          <code class="javascript comments">//filter是针对元素自身的;只会选择到第二个div</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong><span lang="en-US">next<span lang="zh-CN">和<span lang="en-US">prev<span lang="zh-CN">：</span></span></span></span></strong></p>
     <p><span lang="en-US">next<span lang="zh-CN">选择<span lang="zh-CN">下一个兄弟节点<span lang="zh-CN">；</span></span></span></span></p>
     <p><span lang="en-US">prex<span lang="zh-CN">选择<span lang="zh-CN">上一个兄弟节点<span lang="zh-CN">；</span></span></span></span></p>
     <p><span lang="en-US">find<span lang="en-US">&nbsp;&nbsp;&nbsp;&nbsp;<span lang="zh-CN">查找当前元素下<span lang="zh-CN">所有的后代元素<span lang="zh-CN">；</span></span></span></span></span></p>
     <p><span lang="en-US">eq()&nbsp;&nbsp;&nbsp;&nbsp;<span lang="zh-CN">一组中的第几个；</span></span></p>
     <p><span lang="en-US">index()&nbsp;&nbsp;<span lang="zh-CN">一组元素的索引；通过一组索引，来控制另外一个索引；</span></span></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_504021" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert( $(</code>
          <code class="javascript string">'#h'</code>
          <code class="javascript plain">).index() );&nbsp;&nbsp;</code>
          <code class="javascript comments">//索引就是当前元素在所有兄弟节点中的位置；</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>选项卡：</strong></p>
     <p><span lang="zh-CN">原生<span lang="en-US">js<span lang="zh-CN">和<span lang="en-US">jquery<span lang="zh-CN">：</span></span></span></span></span></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_922649" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">window.onload =&nbsp;</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">oDiv = document.getElementById(</code>
          <code class="javascript string">'div1'</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">aInput = oDiv.getElementsByTagName(</code>
          <code class="javascript string">'input'</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">aCon = oDiv.getElementsByTagName(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">for</code>
          <code class="javascript plain">(</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">i=0;i&lt;aInput.length;i++){</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">aInput[i].index = i;</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">aInput[i].onclick =&nbsp;</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">for</code>
          <code class="javascript plain">(</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">i=0;i&lt;aInput.length;i++){</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">aInput[i].className =&nbsp;</code>
          <code class="javascript string">''</code>
          <code class="javascript plain">;</code>
         </div> 
         <div class="line number10 index9 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">aCon[i].style.display =&nbsp;</code>
          <code class="javascript string">'none'</code>
          <code class="javascript plain">;</code>
         </div> 
         <div class="line number11 index10 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">}</code>
         </div> 
         <div class="line number12 index11 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">.className =&nbsp;</code>
          <code class="javascript string">'active'</code>
          <code class="javascript plain">;</code>
         </div> 
         <div class="line number13 index12 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">aCon[</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">.index].style.display =&nbsp;</code>
          <code class="javascript string">'block'</code>
          <code class="javascript plain">;</code>
         </div> 
         <div class="line number14 index13 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">};</code>
         </div> 
         <div class="line number15 index14 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">}</code>
         </div> 
         <div class="line number16 index15 alt1">
          <code class="javascript plain">};</code>
         </div> 
        </div> 
       </div> 
      </div> 
      <p>$(function(){</p> 
      <p>&nbsp;&nbsp;&nbsp;&nbsp;$('#div1').find('input').click(function(){</p> 
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$('#div1').find('input').attr('class','');</p> 
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$('#div1').find('div').css('display','none');</p> 
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(this).attr('class','active');</p> 
      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$('#div1').find('div').eq(&nbsp;$(this).index()&nbsp;).css('display','block');</p> 
      <p>&nbsp;&nbsp;&nbsp;&nbsp;});</p> 
      <p>});</p> 
     </div>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_461020" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">&lt;body&gt;</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript plain">&lt;div id=</code>
          <code class="javascript string">&quot;div1&quot;</code>
          <code class="javascript plain">&gt;</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">&lt;input&nbsp;</code>
          <code class="javascript keyword">class</code>
          <code class="javascript plain">=</code>
          <code class="javascript string">&quot;active&quot;</code>&nbsp;
          <code class="javascript plain">type=</code>
          <code class="javascript string">&quot;button&quot;</code>&nbsp;
          <code class="javascript plain">value=</code>
          <code class="javascript string">&quot;1&quot;</code>&nbsp;
          <code class="javascript plain">/&gt;</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">&lt;input type=</code>
          <code class="javascript string">&quot;button&quot;</code>&nbsp;
          <code class="javascript plain">value=</code>
          <code class="javascript string">&quot;2&quot;</code>&nbsp;
          <code class="javascript plain">/&gt;</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">&lt;input type=</code>
          <code class="javascript string">&quot;button&quot;</code>&nbsp;
          <code class="javascript plain">value=</code>
          <code class="javascript string">&quot;3&quot;</code>&nbsp;
          <code class="javascript plain">/&gt;</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">&lt;div style=</code>
          <code class="javascript string">&quot;display:block&quot;</code>
          <code class="javascript plain">&gt;111111&lt;/div&gt;</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">&lt;div&gt;222222&lt;/div&gt;</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">&lt;div&gt;333333&lt;/div&gt;</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript plain">&lt;/div&gt;</code>
         </div> 
         <div class="line number10 index9 alt1">
          <code class="javascript plain">&lt;/body&gt;</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><span lang="zh-CN">这里的<span lang="en-US">jquery<span lang="zh-CN">是根据<span lang="en-US">js<span lang="zh-CN">的思路来编写的；</span></span></span></span></span></p>
     <p><span lang="zh-CN">也可以用其他的思路来做这个选项卡，用到<span lang="en-US">siblings()<span lang="zh-CN">等；</span></span></span></p>
     <p><span lang="en-US">add<span lang="en-US">Class<span lang="zh-CN">和<span lang="en-US">removeClass</span></span></span></span></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_785626" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).addClass(</code>
          <code class="javascript string">'box2 box4'</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).removeClass(</code>
          <code class="javascript string">'box1'</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>width()&nbsp;&nbsp; innerWidth()&nbsp;&nbsp; outerWidth()&nbsp;&nbsp;</strong><span lang="zh-CN"><strong>获取元素的宽和区别</strong>：</span></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_835495" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert( $(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).width() );&nbsp;&nbsp;</code>
          <code class="javascript comments">//width</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert( $(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).innerWidth() );&nbsp;&nbsp;</code>
          <code class="javascript comments">//width + padding</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert( $(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).outerWidth() );&nbsp;&nbsp;</code>
          <code class="javascript comments">//width + padding + border</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert( $(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).outerWidth(</code>
          <code class="javascript keyword">true</code>
          <code class="javascript plain">) );&nbsp;&nbsp;</code>
          <code class="javascript comments">//width + padding + border + margin</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>insertBefore() &nbsp;insertAfter()&nbsp;&nbsp;</strong></p>
     <p><span lang="zh-CN">注意：<span lang="en-US">insert<span lang="en-US">Before<span lang="zh-CN">是剪切的功能，不是复制的功能；</span></span></span></span></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_453355" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('span').insertBefore( $('div') );&nbsp; //将span调整到div的前面，jq中的insertBefore和js中的insertBefore是一样的;具备剪切的功能，而不是复制的功能；</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('div').insertAfter( $('span') );&nbsp; //将div放在span的后面；</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('div').appendTo( $('span') );&nbsp;&nbsp; //和js中的appendChildren是一样的;作用是把一个节点添加到指定节点最后的位置;</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('div').prependTo( $('span') );&nbsp; //原生js中没有，作用是把一个节点添加到指定节点最开始的位置;&nbsp;&nbsp;</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//insertBefore和before的区别 ：后续操作变了;主要是我们写链式操作会有影响;</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('span').insertBefore( $('div') ).css('background','red');</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).before( $(</code>
          <code class="javascript string">'span'</code>
          <code class="javascript plain">) ).css(</code>
          <code class="javascript string">'background'</code>
          <code class="javascript plain">,</code>
          <code class="javascript string">'red'</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>remove()<span lang="en-US">&nbsp;&nbsp;<span lang="zh-CN">删除节点</span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_308575" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).remove();</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong><span lang="zh-CN">on()&nbsp; off()<span lang="en-US">&nbsp;&nbsp;&nbsp;<span lang="zh-CN">事件的写法：</span></span></span></strong></p>
     <p><span lang="en-US">off<span lang="zh-CN">取消事件；</span></span></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_661641" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">/*$('div').click(function(){</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">alert(123);</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">});*/</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">/*$('div').on('click',function(){&nbsp;&nbsp; //支持多个事件，支持系统事件和自定义事件</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">alert(123);&nbsp;&nbsp;&nbsp;</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">});*/</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">/*$('div').on('click mouseover',function(){&nbsp;&nbsp; //多个事件，中间用空格</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">alert(123);</code>
         </div> 
         <div class="line number10 index9 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">});*/</code>
         </div> 
         <div class="line number11 index10 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">/*$('div').on({</code>
         </div> 
         <div class="line number12 index11 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">'click' : function(){&nbsp;&nbsp; //中间用冒号</code>
         </div> 
         <div class="line number13 index12 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">alert(123);</code>
         </div> 
         <div class="line number14 index13 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">},</code>
         </div> 
         <div class="line number15 index14 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">'mouseover' : function(){</code>
         </div> 
         <div class="line number16 index15 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">alert(456);</code>
         </div> 
         <div class="line number17 index16 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">}</code>
         </div> 
         <div class="line number18 index17 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">});*/</code>&nbsp;&nbsp;&nbsp;
          <code class="javascript comments">//点击弹出123.移入弹出456&nbsp; 说明on还是很灵活的</code>
         </div> 
         <div class="line number19 index18 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).on(</code>
          <code class="javascript string">'click mouseover'</code>
          <code class="javascript plain">,</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number20 index19 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(123);</code>
         </div> 
         <div class="line number21 index20 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).off(</code>
          <code class="javascript string">'mouseover'</code>
          <code class="javascript plain">);&nbsp;&nbsp;</code>
          <code class="javascript comments">//执行后，mouseover事件会被关闭</code>
         </div> 
         <div class="line number22 index21 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});&nbsp;&nbsp;</code>
         </div> 
         <div class="line number23 index22 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>scrollTop()<span lang="en-US">&nbsp;&nbsp;&nbsp;<span lang="zh-CN">获取和设置滚动距离</span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_929722" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(document).click(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert( $(window).scrollTop() );&nbsp;&nbsp;</code>
          <code class="javascript comments">//获取滚动距离</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>编写弹窗效果：</strong></p>
     <p><span lang="zh-CN">首先，在<span lang="en-US">DOM<span lang="zh-CN">中创建元素是非常容易的事情；</span></span></span></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_798148" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">oDiv = $(</code>
          <code class="javascript string">'&lt;div&gt;div&lt;/div&gt;'</code>
          <code class="javascript plain">);&nbsp;&nbsp;</code>
          <code class="javascript comments">//创建div元素和内容</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript plain">$(</code>
          <code class="javascript string">'body'</code>
          <code class="javascript plain">).append( oDiv );</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>弹窗效果：</strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_622507" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#input1'</code>
          <code class="javascript plain">).click(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//动态创建元素和内容</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">oLogin = $(</code>
          <code class="javascript string">'&lt;div id=&quot;login&quot;&gt;&lt;p&gt;用户名:&lt;input type=&quot;text&quot; /&gt;&lt;/p&gt;&lt;p&gt;密码:&lt;input type=&quot;text&quot; /&gt;&lt;/p&gt;&lt;div id=&quot;close&quot;&gt;X&lt;/div&gt;&lt;/div&gt;'</code>
          <code class="javascript plain">);&nbsp;&nbsp;</code>
          <code class="javascript comments">//中间不能有空格</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'body'</code>
          <code class="javascript plain">).append( oLogin );&nbsp;&nbsp;</code>
          <code class="javascript comments">//插入元素</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//让弹窗居中</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">oLogin.css(</code>
          <code class="javascript string">'left'</code>&nbsp;
          <code class="javascript plain">, ($(window).width() - oLogin.outerWidth())/2 );&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//设置left值</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">oLogin.css(</code>
          <code class="javascript string">'top'</code>&nbsp;
          <code class="javascript plain">, ($(window).height() - oLogin.outerHeight())/2 );&nbsp;&nbsp;</code>
          <code class="javascript comments">//设置top值</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#close'</code>
          <code class="javascript plain">).click(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number10 index9 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">oLogin.remove();&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//移除节点</code>
         </div> 
         <div class="line number11 index10 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number12 index11 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//在调整窗口大小事件和滚动事件，调整弹出窗的位置；</code>
         </div> 
         <div class="line number13 index12 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(window).on(</code>
          <code class="javascript string">'resize scroll'</code>
          <code class="javascript plain">,</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){&nbsp;&nbsp;</code>
          <code class="javascript comments">//在调整窗口大小事件和滚动事件</code>
         </div> 
         <div class="line number14 index13 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">oLogin.css(</code>
          <code class="javascript string">'left'</code>&nbsp;
          <code class="javascript plain">, ($(window).width() - oLogin.outerWidth())/2 );</code>
         </div> 
         <div class="line number15 index14 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">oLogin.css(</code>
          <code class="javascript string">'top'</code>&nbsp;
          <code class="javascript plain">, ($(window).height() - oLogin.outerHeight())/2 + $(window).scrollTop() );&nbsp;&nbsp;</code>
          <code class="javascript comments">//top值要注意加上滚动距离</code>
         </div> 
         <div class="line number16 index15 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number17 index16 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number18 index17 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>ev&nbsp; pageX&nbsp; which&nbsp;</strong></p>
     <p><strong>preventDefault&nbsp; stopPropagation</strong></p>
     <p><strong>one()</strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_187468" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">/*$('div').click(function(ev){</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//ev : jq中直接使用，是兼容后的event对象</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//ev.pageX(鼠标坐标--&gt;相对于文档的)&nbsp;&nbsp;&nbsp; js中是使用clientX(相对于可视区域的)</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//ev.which : js中的keyCode</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">ev.preventDefault();&nbsp; //阻止默认事件</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">ev.stopPropagation();&nbsp; //阻止冒泡的操作</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">return false;&nbsp;&nbsp; //阻止默认事件 + 阻止冒泡的操作</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">});*/</code>
         </div> 
         <div class="line number10 index9 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).one(</code>
          <code class="javascript string">'click'</code>
          <code class="javascript plain">,</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){&nbsp;&nbsp;</code>
          <code class="javascript comments">//one--&gt;只执行事件一次</code>
         </div> 
         <div class="line number11 index10 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(123);</code>
         </div> 
         <div class="line number12 index11 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number13 index12 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>offset()&nbsp; position()</strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_619323" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//div2.offsetLeft</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( $('#div2').offset().left );&nbsp; //获取到屏幕的左距离&nbsp; offset().left&nbsp; offset.top()</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert( $(</code>
          <code class="javascript string">'#div2'</code>
          <code class="javascript plain">).position().left );&nbsp;&nbsp;</code>
          <code class="javascript comments">//到有定位的父级的left值,把当前元素转化成类似定位的形式,注意是不算margin的</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>parent()<span lang="en-US">&nbsp;<span lang="zh-CN">offsetParent()<span lang="en-US">&nbsp;&nbsp;&nbsp;<span lang="zh-CN">获取有定位的父级</span></span></span></span></strong></p>
     <p><span lang="zh-CN">parent() :&nbsp;<span lang="zh-CN">获取父级<span lang="zh-CN">，不管父级是否有定位；<span lang="en-US">&nbsp;<span lang="zh-CN">注意这里没有加<span lang="en-US">s<span lang="zh-CN">，不是<span lang="en-US">parents<span lang="zh-CN">，<span lang="en-US">jq<span lang="zh-CN">中还有<span lang="en-US">parents()<span lang="zh-CN">方法，见下</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
     <p>offsetParent() : 获取有定位的父级</p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_511990" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//parent() : 获取父级</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//offsetParent() : 获取有定位的父级</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('#div2').parent().css('background','blue');</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div2'</code>
          <code class="javascript plain">).offsetParent().css(</code>
          <code class="javascript string">'background'</code>
          <code class="javascript plain">,</code>
          <code class="javascript string">'blue'</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>val()&nbsp;&nbsp;<span lang="zh-CN">获取元素的<span lang="en-US">value<span lang="zh-CN">值；</span></span></span></strong></p>
     <p><strong><span lang="en-US">size()&nbsp;<span lang="zh-CN">获取一组元素的长度；像<span lang="en-US">length<span lang="zh-CN">；</span></span></span></span></strong></p>
     <p><strong><span lang="en-US">each<span lang="en-US">() jq<span lang="zh-CN">中的循环；原生<span lang="en-US">for<span lang="zh-CN">循环的加强版</span></span></span></span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_455953" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( $('input').val() ); 获取value值</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('input').val(456);&nbsp; 赋值value值</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert( $(</code>
          <code class="javascript string">'li'</code>
          <code class="javascript plain">).size() );&nbsp;&nbsp;</code>
          <code class="javascript comments">//4 获取一组元素的长度;像length</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'li'</code>
          <code class="javascript plain">).each(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(i,elem){&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//一参：下标 二参 : 每个元素</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(elem).html(i);</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>拖拽<span lang="en-US">jquery<span lang="zh-CN">实现：</span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_514442" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">disX = 0;</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">disY = 0;</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).mousedown(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(ev){</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">disX = ev.pageX - $(</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">).offset().left;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//存储距离</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">disY = ev.pageY - $(</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">).offset().top;</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(document).mousemove(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(ev){</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).css(</code>
          <code class="javascript string">'left'</code>
          <code class="javascript plain">,ev.pageX - disX);</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).css(</code>
          <code class="javascript string">'top'</code>
          <code class="javascript plain">,ev.pageY - disY);</code>
         </div> 
         <div class="line number10 index9 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number11 index10 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(document).mouseup(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number12 index11 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(document).off();&nbsp;&nbsp;</code>
          <code class="javascript comments">//鼠标弹起的时候取消事件</code>
         </div> 
         <div class="line number13 index12 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number14 index13 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">return</code>&nbsp;
          <code class="javascript keyword">false</code>
          <code class="javascript plain">;&nbsp;&nbsp;</code>
          <code class="javascript comments">//阻止默认事件和冒泡</code>
         </div> 
         <div class="line number15 index14 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number16 index15 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>hover()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span lang="zh-CN">模拟<span lang="en-US">css<span lang="zh-CN">中的<span lang="en-US">hover<span lang="zh-CN">，鼠标移入移除；</span></span></span></span></span></strong></p>
     <p><strong><span lang="en-US">hover&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span lang="zh-CN">鼠标移入和鼠标移除<span lang="zh-CN">结合的方法<span lang="zh-CN">；</span></span></span></span></strong></p>
     <p lang="en-US"><strong>hover(function(){},function(){})</strong></p>
     <p>&nbsp;</p>
     <p><strong><span lang="en-US">Show() hide()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span lang="zh-CN">接受一个参数<span lang="en-US">- -&gt;&nbsp;&nbsp;<span lang="zh-CN">时间（<span lang="en-US">ms<span lang="zh-CN">）<span lang="en-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span lang="zh-CN">长，宽，透明度都要变化</span></span></span></span></span></span></span></span></strong></p>
     <p><strong><span lang="zh-CN">fadeIn()&nbsp;&nbsp; fadeOut()<span lang="en-US">&nbsp;&nbsp;&nbsp;&nbsp;<span lang="zh-CN">淡出效果和淡出效果<span lang="en-US">&nbsp;&nbsp;<span lang="zh-CN">改变透明度</span></span></span></span></span></strong></p>
     <p><strong><span lang="zh-CN">fadeTo()<span lang="en-US">&nbsp;&nbsp;&nbsp;&nbsp;<span lang="zh-CN">指定到一个范围，有两个参数，第一个是时间，第二个是透明度值</span></span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_19033" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div2'</code>
          <code class="javascript plain">).fadeTo(1000,0.5);</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>slideDown()&nbsp;&nbsp; slideUp()<span lang="en-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span lang="zh-CN">向下展开，向上卷起；</span></span></strong></p>
     <p>&nbsp;</p>
     <p><strong><span lang="en-US">get()<span lang="zh-CN">方法</span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_798078" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//document.getElementById('div1').innerHTML</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( $('#div1').get(0).innerHTML );&nbsp; get需要标注下标；将jquery转成原生js</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">/*for(var i=0;i&lt;$('li').get().length;i++){&nbsp; //这里通过get()转成js，这里的length相对于js的</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">$('li').get(i).style.background = 'red';</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">}*/</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">for</code>
          <code class="javascript plain">(</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">i=0;i&lt;$(</code>
          <code class="javascript string">'li'</code>
          <code class="javascript plain">).length;i++){&nbsp;&nbsp;</code>
          <code class="javascript comments">//这里的length是JQ中的属性,也是使用正确的；</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'li'</code>
          <code class="javascript plain">).get(i).style.background =&nbsp;</code>
          <code class="javascript string">'red'</code>
          <code class="javascript plain">;</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('li')[i].style.background = 'red';&nbsp; 得到元素后，后面加一个中括号，写成下标的形式，也就自动转成原生js的形式了;这是一种偷巧的写法；</code>
         </div> 
         <div class="line number10 index9 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">}</code>
         </div> 
         <div class="line number11 index10 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong><span lang="en-US">outer<span lang="en-US">Width<span lang="zh-CN">与原生的区别：</span></span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_218397" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( $('#div1').get(0).offsetWidth );&nbsp; //这里原生js，如果把div1设置为隐藏，获取的值为0;</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert( $(</code>
          <code class="javascript string">'#div1'</code>
          <code class="javascript plain">).outerWidth() );&nbsp;&nbsp;</code>
          <code class="javascript comments">//不管是显示和隐藏的，都可以获取到值;</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>text()&nbsp;&nbsp;&nbsp;<span lang="en-US">&nbsp;<span lang="zh-CN">会获取所有的内容（特例），不会获取到标签，而<span lang="en-US">html<span lang="zh-CN">会获取到标签；</span></span></span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_551592" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( $('div').html() );</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( $('div').text() );&nbsp; //会获取所有的内容(特例)</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).text(</code>
          <code class="javascript string">'&lt;h3&gt;h3&lt;/h3&gt;'</code>
          <code class="javascript plain">);&nbsp;&nbsp;</code>
          <code class="javascript comments">//在浏览器中会输出纯文本&lt;h3&gt;h3&lt;/h3&gt;</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>remove()<span lang="zh-CN">和<span lang="en-US">detach<span lang="zh-CN">（）<span lang="zh-CN">的区别：</span></span></span></span></strong></p>
     <p><strong>//remove方法删除元素的时候会把元素的操作行为也删除掉；</strong></p>
     <p><strong>//detach()&nbsp;:&nbsp;跟remove方法一样，只不过会保留删除这个元素的操作行为</strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_526213" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).click(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(123);</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">oDiv = $(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).detach();&nbsp;&nbsp;</code>
          <code class="javascript comments">//这里如果用remove()，恢复的时候，点击行为会无效</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'body'</code>
          <code class="javascript plain">).append( oDiv );</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>$()&nbsp;&nbsp; :&nbsp; $(document).ready()<span lang="en-US">&nbsp;&nbsp;<span lang="zh-CN">与<span lang="en-US">window.onload=function(){}<span lang="zh-CN">的区别：</span></span></span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_262806" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){&nbsp;&nbsp;</code>
          <code class="javascript comments">//等DOM加载完就可以执行了 , 性能要好</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript plain">是</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript plain">$(document).ready(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript plain">的简写；</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p lang="en-US"><strong>&nbsp;window.onload&nbsp;=&nbsp;function(){};&nbsp;//等图片和flash等加载完才执行;</strong></p>
     <p><span lang="zh-CN">//DOMContentLoaded</span></p>
     <p><strong>parents()&nbsp;&nbsp; closest()</strong></p>
     <p>//parents()&nbsp;:&nbsp;获取当前元素的<strong>所有祖先节点</strong>，参数就是筛选功能</p>
     <p>//closest()&nbsp;:&nbsp;获取最近的指定的祖先节点<strong>(包括当前元素自身</strong>),必须要写筛选的参数,只能找到一个元素</p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_14950" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('#div2').parents().css('background','red');&nbsp; //获取到所有祖先节点 div1，body，html</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('#div2').parents('.box').css('background','red');&nbsp; //获取到class为box的祖先元素</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div2'</code>
          <code class="javascript plain">).closest(</code>
          <code class="javascript string">'.box'</code>
          <code class="javascript plain">).css(</code>
          <code class="javascript string">'background'</code>
          <code class="javascript plain">,</code>
          <code class="javascript string">'red'</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>siblings()&nbsp;<span lang="zh-CN">获取元素的所有兄弟节点 ；</span></strong></p>
     <p><strong>nextAll() 获取下面所有的兄弟节点；</strong></p>
     <p><strong><span lang="en-US">pre<span lang="en-US">All()&nbsp;<span lang="zh-CN">获取上面所有的兄弟节点；</span></span></span></strong></p>
     <p><strong>parentsUntil()&nbsp;&nbsp; nextUntil()&nbsp;&nbsp; prevUntil()</strong></p>
     <p>//siblings()&nbsp;:&nbsp;找所有的兄弟节点，参数也是筛选功能</p>
     <p>//nextAll()&nbsp;:&nbsp;下面所有的兄弟节点，参数也是筛选功能</p>
     <p>//prevAll()&nbsp;:&nbsp;上面所有的兄弟节点</p>
     <p>//Until()&nbsp;:&nbsp;截止</p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_494442" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'span'</code>
          <code class="javascript plain">).nextUntil(</code>
          <code class="javascript string">'h2'</code>
          <code class="javascript plain">).css(</code>
          <code class="javascript string">'background'</code>
          <code class="javascript plain">,</code>
          <code class="javascript string">'red'</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong><span lang="en-US">clone()&nbsp;&nbsp;<span lang="zh-CN">克隆节点：</span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_963739" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('div').appendTo( $('span') );&nbsp;&nbsp; //剪切行为</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('span').get(0).appendChild( $('div').get(0) );</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//clone() : 可以接收一个参数 ，作用可以复制之前的操作行为</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).click(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(123);</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">).clone(</code>
          <code class="javascript keyword">true</code>
          <code class="javascript plain">).appendTo( $(</code>
          <code class="javascript string">'span'</code>
          <code class="javascript plain">) );&nbsp;</code>
          <code class="javascript comments">//参数true作用可以复制之前的操作行为</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong><span lang="zh-CN">wrap()&nbsp; wrapAll()&nbsp; wrapInner()&nbsp; unwrap()<span lang="en-US">&nbsp;&nbsp;&nbsp;<span lang="zh-CN">包装，包装方法</span></span></span></strong></p>
     <p>在外面包裹一下</p>
     <p><span lang="zh-CN">$(<span lang="zh-CN">'span'<span lang="zh-CN">).wrapInner(<span lang="zh-CN">'&lt;div&gt;'<span lang="zh-CN">);<span lang="en-US">&nbsp;//<span lang="zh-CN">在<span lang="en-US">span<span lang="zh-CN">外包装<span lang="en-US">div</span></span></span></span></span></span></span></span></span></span></p>
     <p>&nbsp;wrapAll() 整体包装：</p>
     <p>//wrap()&nbsp;:&nbsp;包装</p>
     <p>//wrapAll()&nbsp;:&nbsp;整体包装;&nbsp;会影响结构</p>
     <p>//wrapInner()&nbsp;:&nbsp;内部包装;</p>
     <p>//unwrap()&nbsp;:&nbsp;删除包装&nbsp;(&nbsp;删除父级&nbsp;:&nbsp;不能删除body&nbsp;)</p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_495772" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('span').wrapInner('&lt;div&gt;');&nbsp;&nbsp; div在span里面了</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'span'</code>
          <code class="javascript plain">).unwrap();</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>add()</strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_259842" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">/*var elem = $('div');</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">var elem2 = elem.add('span');</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">elem.css('color','red');</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">elem2.css('background','yellow');*/</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'li'</code>
          <code class="javascript plain">).slice(1,4).css(</code>
          <code class="javascript string">'background'</code>
          <code class="javascript plain">,</code>
          <code class="javascript string">'red'</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p lang="en-US"><strong>slice()</strong></p>
     <p>$('li').slice(1,4).css('background','red');</p>
     <p><span lang="zh-CN">第一个参数是起始位置，<span lang="en-US">4<span lang="zh-CN">是结束位置（选中的不包括结束位置）；</span></span></span></p>
     <p><strong><span lang="zh-CN">serialize()&nbsp;&nbsp;&nbsp; serializeArray()<span lang="en-US">&nbsp;&nbsp;&nbsp;<span lang="zh-CN">数据串连化</span></span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_849468" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//console.log($('form').serialize());&nbsp; //string : a=1&amp;b=2&amp;c=3</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">console.log( $(</code>
          <code class="javascript string">'form'</code>
          <code class="javascript plain">).serializeArray() );</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">[</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">{ name :&nbsp;</code>
          <code class="javascript string">'a'</code>&nbsp;
          <code class="javascript plain">, value :&nbsp;</code>
          <code class="javascript string">'1'</code>&nbsp;
          <code class="javascript plain">},</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">{ name :&nbsp;</code>
          <code class="javascript string">'b'</code>&nbsp;
          <code class="javascript plain">, value :&nbsp;</code>
          <code class="javascript string">'2'</code>&nbsp;
          <code class="javascript plain">},</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">{ name :&nbsp;</code>
          <code class="javascript string">'c'</code>&nbsp;
          <code class="javascript plain">, value :&nbsp;</code>
          <code class="javascript string">'3'</code>&nbsp;
          <code class="javascript plain">}</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">]</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number10 index9 alt1">
          <code class="javascript plain">&lt;/script&gt;</code>
         </div> 
         <div class="line number11 index10 alt2">
          <code class="javascript plain">&lt;/head&gt;</code>
         </div> 
         <div class="line number12 index11 alt1">
          <code class="javascript plain">&lt;body&gt;</code>
         </div> 
         <div class="line number13 index12 alt2">
          <code class="javascript plain">&lt;form&gt;</code>
         </div> 
         <div class="line number14 index13 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">&lt;input type=</code>
          <code class="javascript string">&quot;text&quot;</code>&nbsp;
          <code class="javascript plain">name=</code>
          <code class="javascript string">&quot;a&quot;</code>&nbsp;
          <code class="javascript plain">value=</code>
          <code class="javascript string">&quot;1&quot;</code>
          <code class="javascript plain">&gt;</code>
         </div> 
         <div class="line number15 index14 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">&lt;input type=</code>
          <code class="javascript string">&quot;text&quot;</code>&nbsp;
          <code class="javascript plain">name=</code>
          <code class="javascript string">&quot;b&quot;</code>&nbsp;
          <code class="javascript plain">value=</code>
          <code class="javascript string">&quot;2&quot;</code>
          <code class="javascript plain">&gt;</code>
         </div> 
         <div class="line number16 index15 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">&lt;input type=</code>
          <code class="javascript string">&quot;text&quot;</code>&nbsp;
          <code class="javascript plain">name=</code>
          <code class="javascript string">&quot;c&quot;</code>&nbsp;
          <code class="javascript plain">value=</code>
          <code class="javascript string">&quot;3&quot;</code>
          <code class="javascript plain">&gt;</code>
         </div> 
         <div class="line number17 index16 alt2">
          <code class="javascript plain">&lt;/form&gt;</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>jquery<span lang="zh-CN">中的<span lang="en-US">animate()</span></span></strong></p>
     <p>//animate()&nbsp;:&nbsp;</p>
     <p>//第一个参数&nbsp;:&nbsp;{}&nbsp;运动的值和属性</p>
     <p>//第二个参数&nbsp;:&nbsp;时间(运动快慢的)&nbsp;&nbsp;默认&nbsp;:&nbsp;400&nbsp;毫秒</p>
     <p><span lang="zh-CN">//<span lang="zh-CN">第三个参数<span lang="zh-CN">&nbsp;:&nbsp;<span lang="zh-CN">运动形式<span lang="zh-CN">&nbsp;<span lang="zh-CN">只有两种运动形式<span lang="zh-CN">&nbsp;(&nbsp;<span lang="zh-CN">默认<span lang="zh-CN">&nbsp;:&nbsp;swing(<span lang="zh-CN">缓冲，慢快慢<span lang="zh-CN">)&nbsp;linear(<span lang="zh-CN">匀速<span lang="zh-CN">)&nbsp;)<span lang="en-US">&nbsp;<span lang="zh-CN">默认是缓冲（慢快慢）</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
     <p>//第四个参数&nbsp;:&nbsp;&nbsp;回调函数；运行结束后，回调函数</p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_908919" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div1'</code>
          <code class="javascript plain">).click(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">).animate({width : 300 , height : 300} , 3000 ,&nbsp;</code>
          <code class="javascript string">'linear'</code>
          <code class="javascript plain">,</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(123);&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//回调函数，也可以用链式操作来写；</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div2'</code>
          <code class="javascript plain">).animate({width : 300 , height : 300} , 3000 ,&nbsp;</code>
          <code class="javascript string">'swing'</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>链式操作来写：先宽后高；和上述的回调函数效果一致；</strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_823022" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">).animate({width : 300} , 2000).animate({height : 300} , 2000);</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>Stop()<span lang="zh-CN">方法：</span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_998811" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div2'</code>
          <code class="javascript plain">).click(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('#div1').stop();&nbsp;&nbsp; //默认 : 只会阻止当前运动（当前步骤）</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('#div1').stop(true); //阻止所有后续的运动</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$('#div1').stop(true,true); //立即停止到当前步骤指定的目标点，当前步骤的目标点</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">// stop不能做到，点一下--&gt;直接到最后的目标点--&gt;用finish()</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div1'</code>
          <code class="javascript plain">).finish();&nbsp;&nbsp;</code>
          <code class="javascript comments">//立即停止到所有指定的目标点，到最后的目标点</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>delay()</strong></p>
     <p>延迟</p>
     <p><strong><span lang="en-US">jquery<span lang="zh-CN">中事件委托：</span></span></strong></p>
     <p><strong>delegate()&nbsp;&nbsp; undelegate()</strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_710025" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">/*$('li').on('click',function(){</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">this.style.background = 'red';</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">});*/</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'ul'</code>
          <code class="javascript plain">).delegate(</code>
          <code class="javascript string">'li'</code>
          <code class="javascript plain">,</code>
          <code class="javascript string">'click'</code>
          <code class="javascript plain">,</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//事件委托</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">.style.background =&nbsp;</code>
          <code class="javascript string">'red'</code>
          <code class="javascript plain">;</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'ul'</code>
          <code class="javascript plain">).undelegate();&nbsp;&nbsp;</code>
          <code class="javascript comments">//阻止事件委托</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>trigger()<span lang="en-US">&nbsp;&nbsp;<span lang="zh-CN">主动触发</span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_676504" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">/*$('#div1').on('click',function(){</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">alert(123);</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">});</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">$('#div1').trigger('click');&nbsp; //主动触发*/</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div1'</code>
          <code class="javascript plain">).on(</code>
          <code class="javascript string">'show'</code>
          <code class="javascript plain">,</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(123);</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div1'</code>
          <code class="javascript plain">).on(</code>
          <code class="javascript string">'show'</code>
          <code class="javascript plain">,</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number10 index9 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(456);</code>
         </div> 
         <div class="line number11 index10 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number12 index11 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div1'</code>
          <code class="javascript plain">).trigger(</code>
          <code class="javascript string">'show'</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number13 index12 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>事件细节：</strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_346168" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div1'</code>
          <code class="javascript plain">).on(</code>
          <code class="javascript string">'click'</code>
          <code class="javascript plain">,{name:</code>
          <code class="javascript string">'hello'</code>
          <code class="javascript plain">},</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(ev){</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert(ev.data.name);&nbsp;&nbsp;&nbsp; 这里的ev.data等于{name:'hello'}这个整体，ev.data.name就是hello</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( ev.target );&nbsp; 当前操作的事件源，全兼容的</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert( ev.type );&nbsp;&nbsp; 当前操作事件类型</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>jquery<span lang="zh-CN">的工具方法：</span></strong></p>
     <p>我们前面的都是<strong><span lang="zh-CN">$().css()<span lang="en-US">&nbsp;&nbsp;$().html()&nbsp;&nbsp;$().val()&nbsp;&nbsp;:&nbsp;<span lang="zh-CN">只能给<span lang="en-US">JQ<span lang="zh-CN">对象用；</span></span></span></span></span></strong></p>
     <p>&nbsp;</p>
     <p><span lang="zh-CN">而实际上，我们还存在另外一种写法：<span lang="en-US">&nbsp;&nbsp;&nbsp;<span lang="zh-CN">不仅可以给<span lang="en-US">jquery<span lang="zh-CN">用，也可以给原生<span lang="en-US">js<span lang="zh-CN">用；</span></span></span></span></span></span></span></p>
     <p><strong><span lang="zh-CN">$.xxx()&nbsp; $.yyy()&nbsp; $.zzz()&nbsp; :&nbsp;<span lang="zh-CN">不仅可以给<span lang="en-US">JQ<span lang="en-US">用，也可以给原生<span lang="en-US">JS<span lang="en-US">用<span lang="en-US">&nbsp;:&nbsp;<span lang="en-US">叫做<span lang="en-US">工具方法</span></span></span></span></span></span></span></span></span></strong></p>
     <p><strong>type()</strong></p>
     <p><strong>trim()</strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_978660" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//var a = null;</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$.type() : 也是判断类型，功能更加强大，能判断出更多的类型</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( typeof a ); 原生js的判断变量类型</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( $.type(a) ); 用$.type()判断出更多类型，功能更强大</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">str =&nbsp;</code>
          <code class="javascript string">'&nbsp;&nbsp;&nbsp; hello&nbsp;&nbsp;&nbsp; '</code>
          <code class="javascript plain">;</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(</code>
          <code class="javascript string">'('</code>
          <code class="javascript plain">+$.trim(str)+</code>
          <code class="javascript string">')'</code>
          <code class="javascript plain">);&nbsp;&nbsp;</code>
          <code class="javascript comments">//$.trim()去除前后的空格</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>inArray()<span lang="en-US">&nbsp;&nbsp;&nbsp;<span lang="zh-CN">类似于<span lang="en-US">&nbsp;indexOf</span></span></span></strong></p>
     <p><strong><span lang="zh-CN">proxy()<span lang="en-US">&nbsp;&nbsp;<span lang="zh-CN">改变<span lang="en-US">this<span lang="en-US">指向<span lang="zh-CN">；</span></span></span></span></span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_601791" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//var arr = ['a','b','c','d'];</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//alert( $.inArray('b',arr)&nbsp; ); //b在array这个数组中的位置；若没有会返回-1；有的话就返回位置</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//proxy()&nbsp; : 改变this指向的</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">function</code>&nbsp;
          <code class="javascript plain">show(n1,n2){</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(n1);</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(n2);</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">}</code>
         </div> 
         <div class="line number10 index9 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//show();</code>
         </div> 
         <div class="line number11 index10 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$.proxy(show , document)(); //show的this指向document</code>
         </div> 
         <div class="line number12 index11 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$.proxy(show , document,3,4)();&nbsp; //对于传参，传参可以这样传</code>
         </div> 
         <div class="line number13 index12 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">////$.proxy(show , document,3)(4);&nbsp; //也可以这样混着传参</code>
         </div> 
         <div class="line number14 index13 alt1">
          &nbsp;
         </div> 
         <div class="line number15 index14 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//jquery中为什么要这样传参呢？</code>
         </div> 
         <div class="line number16 index15 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//$(document).click( $.proxy(show,window)(3,4)&nbsp; ); //如果这样传参，刷新就直接调用函数</code>
         </div> 
         <div class="line number17 index16 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(document).click( $.proxy(show,window,3,4)&nbsp; );&nbsp;&nbsp;</code>
          <code class="javascript comments">//这样传参，就是在click后才会调用函数，而不会直接调用；&nbsp;</code>
         </div> 
         <div class="line number18 index17 alt1">
          &nbsp;
         </div> 
         <div class="line number19 index18 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>$.noConflict<span lang="en-US">()&nbsp;&nbsp;<span lang="zh-CN">防止冲突</span></span></strong></p>
     <p>//$&nbsp;,&nbsp;jQuery&nbsp;&nbsp;$=jQuery&nbsp;一回事&nbsp;$不是jQuery独有的</p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_730534" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript comments">//noConflict() : 防止冲突的</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">aaa= $.noConflict();</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">$ = 10;</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript plain">aaa(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">aaa(</code>
          <code class="javascript string">'body'</code>
          <code class="javascript plain">).css(</code>
          <code class="javascript string">'background'</code>
          <code class="javascript plain">,</code>
          <code class="javascript string">'red'</code>
          <code class="javascript plain">);</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>parseJ<span lang="en-US">SON<span lang="zh-CN">()<span lang="en-US">&nbsp;&nbsp;<span lang="zh-CN">把字符串转换成<span lang="en-US">json<span lang="zh-CN">类型</span></span></span></span></span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_41848" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">str =&nbsp;</code>
          <code class="javascript string">'{&quot;name&quot;:&quot;hello&quot;}'</code>
          <code class="javascript plain">;&nbsp;&nbsp;</code>
          <code class="javascript comments">//字符串必须是严格的JSON格式</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript plain">alert($.parseJSON( str ).name);&nbsp;&nbsp;</code>
          <code class="javascript comments">//把字符串转换成json</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong><span lang="zh-CN">makeArray()<span lang="en-US">&nbsp;</span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_414428" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">window.onload =&nbsp;</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">aDiv = document.getElementsByTagName(</code>
          <code class="javascript string">'div'</code>
          <code class="javascript plain">);&nbsp;&nbsp;</code>
          <code class="javascript comments">//只是集合，不是真正的数组，我们叫做类数组（类似于数组）</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$.makeArray(aDiv).push();&nbsp;&nbsp;</code>
          <code class="javascript comments">//通过 $.makeArray(aDiv) 把 类数组 转换成 真正的数组</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript plain">};</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>jquery<span lang="zh-CN">中使用<span lang="en-US">ajax</span></span></strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_598919" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">&lt;script&gt;</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript comments">/*$.ajax({</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">url : 'xxx.php',</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">data : 'name=hello&amp;age=20',</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">type : 'POST',&nbsp;&nbsp; //默认是get</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">success : function(data){&nbsp; //请求成功以后的回调函数</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">alert(1);</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">},</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">error : function(){&nbsp;&nbsp; //请求失败之后</code>
         </div> 
         <div class="line number10 index9 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">alert(2);</code>
         </div> 
         <div class="line number11 index10 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">}</code>
         </div> 
         <div class="line number12 index11 alt1">
          <code class="javascript comments">});*/</code>
         </div> 
         <div class="line number13 index12 alt2">
          <code class="javascript plain">$.get(</code>
          <code class="javascript string">'xxx.php'</code>
          <code class="javascript plain">,</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//ajax的get请求可用get()，第一个是地址，第二个是成功后回调</code>
         </div> 
         <div class="line number14 index13 alt1">
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number15 index14 alt2">
          <code class="javascript comments">// $.get()和$().get()是有区别的；前者是ajax的get请求方法，后者是将jQuery对象转换成js原生对象</code>
         </div> 
         <div class="line number16 index15 alt1">
          <code class="javascript plain">$.post(</code>
          <code class="javascript string">'xxx.php'</code>
          <code class="javascript plain">,</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number17 index16 alt2">
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number18 index17 alt1">
          <code class="javascript plain">$.getJSON(</code>
          <code class="javascript string">'xxx.php?callback=?'</code>
          <code class="javascript plain">,</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(data){&nbsp;&nbsp;</code>
          <code class="javascript comments">//请求json类型的数据,支持jsonp的形式：指定?callback=?</code>
         </div> 
         <div class="line number19 index18 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">data</code>
         </div> 
         <div class="line number20 index19 alt1">
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number21 index20 alt2">
          <code class="javascript plain">随机({});</code>
         </div> 
         <div class="line number22 index21 alt1">
          <code class="javascript plain">&lt;/script&gt;</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p><strong>jQuery<span lang="zh-CN">中的插件</span></strong></p>
     <p><strong>扩展插件</strong></p>
     <p><strong>//$.extend&nbsp;:&nbsp;扩展工具方法下的插件形式&nbsp;&nbsp;$.xxx()&nbsp;$.yyy()</strong></p>
     <p><strong>//$.fn.extend&nbsp;&nbsp;:&nbsp;&nbsp;扩展到JQ对象下的插件形式&nbsp;&nbsp;$().xxx()&nbsp;&nbsp;$().yyy()</strong></p>
     <p><strong>用插件实现去掉左空格</strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_230242" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$.extend({</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">leftTrim :&nbsp;</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(str){</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">return</code>&nbsp;
          <code class="javascript plain">str.replace(/^\s+/,</code>
          <code class="javascript string">''</code>
          <code class="javascript plain">);&nbsp;</code>
          <code class="javascript comments">//这里用正则来去掉左空格</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">}</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">str =&nbsp;</code>
          <code class="javascript string">'&nbsp; hello&nbsp; '</code>
          <code class="javascript plain">;</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript plain">alert(&nbsp;</code>
          <code class="javascript string">'('</code>
          <code class="javascript plain">+$.leftTrim(str)+</code>
          <code class="javascript string">')'</code>&nbsp;
          <code class="javascript plain">);&nbsp;&nbsp;</code>
          <code class="javascript comments">//利用leftTrim去掉左空格</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_798365" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">$.extend({&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//用extend，json的写法，可以扩展多个</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">leftTrim :&nbsp;</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(str){</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">return</code>&nbsp;
          <code class="javascript plain">str.replace(/^\s+/,</code>
          <code class="javascript string">''</code>
          <code class="javascript plain">);&nbsp;</code>
          <code class="javascript comments">//这里用正则来去掉左空格</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">},</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">rightTrim :&nbsp;</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){},</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">aaa :&nbsp;</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(1);</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">}</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <p lang="en-US"><strong>$.fn.extend({&nbsp;&nbsp;//也是写成json形式</strong></p>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_73783" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript plain">drag :&nbsp;</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//这里扩展拖拽</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript comments">//this : $('#div1')</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">disX = 0;</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">disY = 0;</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">var</code>&nbsp;
          <code class="javascript plain">This =&nbsp;</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">;&nbsp;&nbsp;</code>
          <code class="javascript comments">//这里将this存入变量This中；</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">.mousedown(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(ev){</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">disX = ev.pageX - $(</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">).offset().left;</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">disY = ev.pageY - $(</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">).offset().top;</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(document).mousemove(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(ev){</code>
         </div> 
         <div class="line number10 index9 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">This.css(</code>
          <code class="javascript string">'left'</code>&nbsp;
          <code class="javascript plain">, ev.pageX - disX);</code>
         </div> 
         <div class="line number11 index10 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">This.css(</code>
          <code class="javascript string">'top'</code>&nbsp;
          <code class="javascript plain">, ev.pageY - disY);</code>
         </div> 
         <div class="line number12 index11 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number13 index12 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(document).mouseup(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number14 index13 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">this</code>
          <code class="javascript plain">).off();</code>
         </div> 
         <div class="line number15 index14 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number16 index15 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript keyword">return</code>&nbsp;
          <code class="javascript keyword">false</code>
          <code class="javascript plain">;</code>
         </div> 
         <div class="line number17 index16 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">});&nbsp;&nbsp;&nbsp;</code>
         </div> 
         <div class="line number18 index17 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">},</code>
         </div> 
         <div class="line number19 index18 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">aaa :&nbsp;</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number20 index19 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">alert(2);</code>
         </div> 
         <div class="line number21 index20 alt2">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">}</code>
         </div> 
         <div class="line number22 index21 alt1">
          <code class="javascript plain">});</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
     <div class="cnblogs_Highlighter sh-gutter"> 
      <div> 
       <div id="highlighter_407774" class="syntaxhighlighter  javascript"> 
        <div class="container"> 
         <div class="line number1 index0 alt2">
          <code class="javascript comments">//$.trim()</code>
         </div> 
         <div class="line number2 index1 alt1">
          <code class="javascript comments">//$.leftTrim()</code>
         </div> 
         <div class="line number3 index2 alt2">
          <code class="javascript comments">/*var str = '&nbsp; hello&nbsp; ';</code>
         </div> 
         <div class="line number4 index3 alt1">
          <code class="javascript comments">alert( '('+$.leftTrim(str)+')' );*/</code>
         </div> 
         <div class="line number5 index4 alt2">
          <code class="javascript plain">$(</code>
          <code class="javascript keyword">function</code>
          <code class="javascript plain">(){</code>
         </div> 
         <div class="line number6 index5 alt1">
          <code class="javascript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>
          <code class="javascript plain">$(</code>
          <code class="javascript string">'#div1'</code>
          <code class="javascript plain">).drag();&nbsp;&nbsp;</code>
          <code class="javascript comments">//这里调用上面插件的扩展</code>
         </div> 
         <div class="line number7 index6 alt2">
          <code class="javascript plain">});</code>
         </div> 
         <div class="line number8 index7 alt1">
          <code class="javascript plain">$.aaa();&nbsp;&nbsp;</code>
          <code class="javascript comments">// 1</code>
         </div> 
         <div class="line number9 index8 alt2">
          <code class="javascript plain">$().aaa();&nbsp;&nbsp;</code>
          <code class="javascript comments">//2</code>
         </div> 
        </div> 
       </div> 
      </div> 
     </div>
    </div>
   </div>
  </div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ajax简单教程]]></title>
        <id>https://itliuwk.github.io/post/ajax</id>
        <link href="https://itliuwk.github.io/post/ajax">
        </link>
        <updated>2016-09-26T12:15:43.000Z</updated>
        <summary type="html"><![CDATA[<p>ajax常用的 方法，一些容易出错的地方</p>
]]></summary>
        <content type="html"><![CDATA[<p>ajax常用的 方法，一些容易出错的地方</p>
<!-- more -->
<div class="article-entry" itemprop="articleBody">
<h2 id="ajax原 理"><a href="#ajax原理" class="headerlink"></a>ajax 原理</h2><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求,,从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。<br>XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。<br>所以我们先从XMLHttpRequest讲起，来看看它的工作原理。首先，我们先来看看XMLHttpRequest这个对象的属性。<br>它的属性有：</p>
<table>
<thead>
<tr>
<th style="text-align:left">onreadystatechange</th>
<th style="text-align:left">responseText</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">每次_状态改变所触发事件的事件处理程序</td>
<td style="text-align:left">从服务器进程返回数据的字符串形式</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">responseXML</th>
<th style="text-align:left">status</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">从服务器进程返回的DOM兼容的文档数据对象</td>
<td style="text-align:left">从服务器返回的数字代码，比如常见的404</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">status Text</th>
<th style="text-align:left">readyState</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">伴随状态码的字符串信息</td>
<td style="text-align:left">对象状态值</td>
</tr>
</tbody>
</table>
<p>readyState 对象状态值</p>
<ul>
<li>0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）</li>
<li>1 (初始化) 对象已建立，尚未调用send方法</li>
<li>2 (发送数据) send方法已调用，但是当前的状态及http头未知</li>
<li>3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，</li>
<li>4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据</li>
</ul>
<h2 id="ajax的使用"><a href="#ajax的使用" class="headerlink"></a>ajax的使用</h2><ol>
<li>原生的ajax</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateXmlHttp</span>(<span class="params"></span>) </span>{</div><div class="line">    <span class="comment">//非IE浏览器创建XmlHttpRequest对象</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XmlHttpRequest) {</div><div class="line">        xmlhttp = <span class="keyword">new</span> XmlHttpRequest();</div><div class="line">    }</div><div class="line">    <span class="comment">//IE浏览器创建XmlHttpRequest对象</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) {</div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">        }</div><div class="line">        <span class="keyword">catch</span> (e) {</div><div class="line">            <span class="keyword">try</span> {</div><div class="line">                xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"msxml2.XMLHTTP"</span>);</div><div class="line">            }</div><div class="line">            <span class="keyword">catch</span> (ex) { }</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ustbwuyi</span>(<span class="params"></span>) </span>{</div><div class="line">    <span class="keyword">var</span> data = <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>).value;</div><div class="line">    CreateXmlHttp();</div><div class="line">    <span class="keyword">if</span> (!xmlhttp) {</div><div class="line">        alert(<span class="string">"创建xmlhttp对象异常！"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    }</div><div class="line">    xmlhttp.open(<span class="string">"POST"</span>, url, <span class="literal">false</span>);</div><div class="line">    xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</div><div class="line">        <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span>) {</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"user1"</span>).innerHTML = <span class="string">"数据正在加载..."</span>;</div><div class="line">            <span class="keyword">if</span> (xmlhttp.status == <span class="number">200</span>) {</div><div class="line">                <span class="built_in">document</span>.write(xmlhttp.responseText);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    xmlhttp.send();</div><div class="line">}</div></pre></td></tr></tbody></table></figure>
<ol>
<li>jquery调用ajax</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$.ajax({</div><div class="line">    type: <span class="string">"get"</span>,</div><div class="line">    url: <span class="string">"http://www.cnblogs.com/rss"</span>,</div><div class="line">    beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest</span>)</span>{</div><div class="line">    <span class="comment">//ShowLoading();</span></div><div class="line">    },</div><div class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus</span>)</span>{</div><div class="line">        $(<span class="string">".ajax.ajaxResult"</span>).html(<span class="string">""</span>);</div><div class="line">        $(<span class="string">"item"</span>,data).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, domEle</span>)</span>{</div><div class="line">        $(<span class="string">".ajax.ajaxResult"</span>).append(<span class="string">"&lt;li&gt;"</span>+$(domEle).children(<span class="string">"title"</span>).text()+<span class="string">"&lt;/li&gt;"</span>);</div><div class="line">        });</div><div class="line"></div><div class="line">    },</div><div class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus</span>)</span>{</div><div class="line">    <span class="comment">//HideLoading();</span></div><div class="line">    },</div><div class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</div><div class="line">    <span class="comment">//请求出错处理</span></div><div class="line">    }</div><div class="line">});</div></pre></td></tr></tbody></table></figure> </the></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git学习笔记]]></title>
        <id>https://itliuwk.github.io/post/git-xue-xi-bi-ji</id>
        <link href="https://itliuwk.github.io/post/git-xue-xi-bi-ji">
        </link>
        <updated>2016-08-14T02:16:43.000Z</updated>
        <summary type="html"><![CDATA[<p>git的常用操作，高级技巧都要哦</p>
]]></summary>
        <content type="html"><![CDATA[<p>git的常用操作，高级技巧都要哦</p>
<!--more-->
<div class="article-entry" itemprop="articleBody">
>
<h2 id="安装git"><a href="#安装git" class="headerlink"></a>安装git</h2><ol>
<li>下载安装包 ?下载地址?</li>
<li>安装git</li>
<li>进入命令行,输入git看看是否成功</li>
</ol>
<h2 id="配置git"><a href="#配置git" class="headerlink"></a>配置git</h2><ol>
<li>配置全局用户名和密码<br> `git config –global user.name "liuwk" <br> git config –global user.email   "1834183435@qq.com"<br> `</li>
<li>配置ssh公钥<br> <code>cd ~/.ssh</code> 然后<code>ls</code><br> 如果没有,直接生成,一路点击enter<br> ```<br> ssh-keygen<br> cat ~/.ssh/id_rsa.pub<br> ```<br> 把公钥配置到github的个人设置</li>
</ol>
<h2 id="常用的命令"><a href="#常用的命令" class="headerlink"></a>常用的命令</h2><ol>
<li><p>repository操作</p>
<ul>
<li>检出（clone）仓库代码：<code>git clone repository-url</code> / <code>git clone repository-url local-directoryname</code><ul>
<li>例如，clone jquery 仓库到本地： <code>git clone git://github.com/jquery/jquery.git</code></li>
<li>clone jquery 仓库到本地，并且重命名为 my-jquery ：<code>git clone git://github.com/jquery/jquery.git my-jquery</code></li>
</ul>
</li>
<li>查看远程仓库：<code>git remote -v</code></li>
<li>添加远程仓库：<code>git remote add [name] [repository-url]</code></li>
<li>删除远程仓库：<code>git remote rm [name]</code></li>
<li>修改远程仓库地址：<code>git remote set-url origin new-repository-url</code></li>
<li>拉取远程仓库： <code>git pull [remoteName] [localBranchName]</code></li>
<li>推送远程仓库： <code>git push [remoteName] [localBranchName]</code></li>
</ul>
</li>
<li><p>提交/拉取/合并/删除</p>
<ul>
<li>添加文件到暂存区（staged）：<code>git add filename</code> / <code>git stage filename</code></li>
<li>将所有修改文件添加到暂存区（staged）： <code>git add --all</code> / <code>git add -A</code></li>
<li>提交修改到暂存区（staged）：<code>git commit -m 'commit message'</code> / <code>git commit -a -m 'commit message'</code> 注意理解 -a 参数的意义</li>
<li>从Git仓库中删除文件：<code>git rm filename</code></li>
<li>从Git仓库中删除文件，但本地文件保留：<code>git rm --cached filename</code></li>
<li><p>重命名某个文件：<code>git mv filename newfilename</code> 或者直接修改完毕文件名 ，进行<code>git add -A &amp;&amp; git commit -m 'commit message'</code> Git会自动识别是重命名了文件</p>
</li>
<li><p>获取远程最新代码到本地：<code>git pull (origin branchname)</code> 可以指定分支名，也可以忽略。pull 命令自动 fetch 远程代码并且 merge，如果有冲突，会显示在状态栏，需要手动处理。更推荐使用：<code>git fetch</code> 之后 <code>git merge --no-ff origin branchname</code> 拉取最新的代码到本地仓库，并手动 merge 。</p>
</li>
</ul>
</li>
<li><p>日志查看</p>
<ul>
<li>查看日志：<code>git log</code></li>
<li>查看日志，并查看每次的修改内容：<code>git log -p</code></li>
<li>查看日志，并查看每次文件的简单修改状态：<code>git log --stat</code></li>
<li>一行显示日志：<code>git log --pretty=oneline</code> / <code>git log --pretty='format:"%h - %an, %ar : %s'</code></li>
<li>查看日志范围：<ul>
<li>查看最近10条日志：<code>git log -10</code></li>
<li>查看2周前：<code>git log --until=2week</code> 或者指定2周的明确日期，比如：<code>git log --until=2015-08-12</code></li>
<li>查看最近2周内：<code>git log --since=2week</code> 或者指定2周明确日志，比如：<code>git log --since=2015-08-12</code></li>
<li>只查看某个用户的提交：<code>git log --committer=user.name</code> / <code>git log --author=user.name</code></li>
</ul>
</li>
</ul>
</li>
<li><p>取消操作</p>
<ul>
<li>上次提交msg错误/有未提交的文件应该同上一次一起提交，需要重新提交备注：<code>git commit --amend -m 'new msg'</code></li>
<li>一次<code>git add -A</code>后，需要将某个文件撤回到工作区，即：某个文件不应该在本次commit中：<code>git reset HEAD filename</code></li>
<li>撤销某些文件的修改内容：<code>git checkout -- filename</code> 注意：一旦执行，所有的改动都没有了，谨慎！谨慎！谨慎！</li>
<li>将工作区内容回退到远端的某个版本：<code>git reset --hard &lt;sha1-of-commit&gt;</code><ul>
<li><code>--hard</code>：reset stage and working directory ,<commitid> 以来所有的变更全部丢弃，并将 HEAD 指向<commitid></commitid></commitid></li>
<li><code>--soft</code>：nothing changed to stage and working directory ,仅仅将HEAD指向<commitid> ，所有变更显示在”changed to be committed”中</commitid></li>
<li><code>--mixed</code>：default,reset stage ,nothing to working directory ，这也就是第二个例子的原因</li>
</ul>
</li>
</ul>
</li>
<li><p>比较差异</p>
<ul>
<li>查看工作区（working directory）和暂存区（staged）之间差异：<code>git diff</code></li>
<li>查看工作区（working directory）与当前仓库版本（repository）HEAD版本差异：<code>git diff HEAD</code></li>
<li>查看暂存区（staged）与当前仓库版本（repository）差异：<code>git diff --cached</code> / <code>git diff --staged</code></li>
</ul>
</li>
<li><p>合并操作</p>
<ul>
<li>解决冲突后/获取远程最新代码后合并代码：<code>git merge branchname</code></li>
<li>保留该存在版本合并log：<code>git merge --no-ff branchname</code> 参数<code>--no-ff</code>防止 fast-forward 的提交</li>
</ul>
</li>
</ol>
 </the></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hexo和github打造个人博客]]></title>
        <id>https://itliuwk.github.io/post/hexo-he-github-da-zao-ge-ren-bo-ke</id>
        <link href="https://itliuwk.github.io/post/hexo-he-github-da-zao-ge-ren-bo-ke">
        </link>
        <updated>2016-06-30T00:58:11.000Z</updated>
        <summary type="html"><![CDATA[<p>使用hexo和github打造属于自己的静态博客，展示自己的作品，思想……</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用hexo和github打造属于自己的静态博客，展示自己的作品，思想……</p>
<!-- more --> 
<div class="article-entry" itemprop="articleBody">
<the rest="" of="" contents="" |="" 余下全文="">
<p>##说明<br>    自己在使用hexo搭建静态博客的时候踩了许多坑,最终去官网看教程搞定了,<br>    建议用hexo搭建个人博客的时候,最好看清教程的日期和使用的版本,这样就<br>    不会因为版本的不同导致的问题了.建议先去hexo官网了解一下<br>   <a href="https://hexo.io/zh-cn/"><strong>hexo官网</strong></a></p>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink"></a>1.准备工作</h2><ol>
<li>安装nodejs<ul>
<li>去官网下载nodejs安装(推荐安装4.x),安装之后在命令行 node -v,如果成功说明node环境ok,不成功就去环境变量配置一下.</li>
</ul>
</li>
<li>安装hexo<ul>
<li>使用命令 npm install hexo -g,执行hexo -v 查看版本,本教程适合<strong>3.1.1以上</strong>版本</li>
</ul>
</li>
<li>安装git<ul>
<li>去官网下载git安装,不会自行百度</li>
</ul>
</li>
<li>配置git<ul>
<li>配置ssh私钥,上传到github上</li>
</ul>
</li>
</ol>
<h2 id="2-github-pages的说明"><a href="#2-github-pages的说明" class="headerlink"></a>2.github-pages的说明</h2><ol>
<li>github有两种主页,一种是github-page(个人主页),一种是项目主页,本教程针对个人主页</li>
<li>github-page需要将hexo博客发布到repository的master(主干)即可</li>
<li>github的个人主页要求repository的名称和username一致，加入username是tom，则repository的名称为tom.github.io</li>
</ol>
<h2 id="3-使用hexo写博客"><a href="#3-使用hexo写博客" class="headerlink"></a>3.使用hexo写博客</h2><pre><code>- 新建一个文件夹myblog,
- 右键git bash here使用git的shell
- 在shell中输入hexo init,回车执行
- 在shell中输入hexo g ,回车
- 在shell中hexo s,回车
- 去浏览器访问http://localhost:4000,访问到主页,然后在shell中ctrl c停止
- 在shell中hexo new "first-blog",回车
- 在shell中hexo g ,回车
- 在shell中hexo s ,回车,在访问
- ok,在本地测试就没问题了
</code></pre><h2 id="4-发布到github"><a href="#4-发布到github" class="headerlink"></a>4.发布到github</h2><p>打开项目根部录下的.config.yml,找到deploy,修改如下:</p>
<figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line"> - <span class="attribute">type</span>: git</div><div class="line">   <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:yourname/yourname.github.io.git,master</div></pre></td></tr></tbody></table></figure>
<figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">deploy:</span></div><div class="line"><span class="symbol">  type:</span> git</div><div class="line"><span class="symbol">  repo:</span> <span class="params">&lt;repository url&gt;</span></div><div class="line"><span class="symbol">  branch:</span> [branch]</div><div class="line"><span class="symbol">  message:</span> [message]</div></pre></td></tr></tbody></table></figure>
<p>访问地址就是 <a href="http://tom.github.io/">http://tom.github.io/</a></p>
<h2 id="5-常用命令"><a href="#5-常用命令" class="headerlink"></a>5.常用命令</h2><pre><code>命令的简写为：
<figure class="highlight verilog"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo n == hexo <span class="keyword">new</span></div><div class="line">hexo g == hexo <span class="keyword">generate</span></div><div class="line">hexo s == hexo server</div><div class="line">hexo d == hexo deploy</div><div class="line">hexo clean  删除public文件夹</div></pre></td></tr></tbody></table></figure>
</code></pre><h2 id="6-常见问题"><a href="#6-常见问题" class="headerlink"></a>6.常见问题</h2><ol>
<li>部署时出现git not found<ul>
<li>npm install hexo-deployer-git –save  安装依赖包</li>
</ul>
</li>
</ol>
<h2 id="7-详细设置"><a href="#7-详细设置" class="headerlink"></a>7.详细设置</h2><pre><code>每个人对自己的博客都有不一样的要求，比如主题，分类，标签，评论插件的选择，  
这些对程序员的你来说，都是小菜一碟，下面是官网教程：
</code></pre><p>   <a href="https://hexo.io/docs/">hexo官方文档</a></p>
<p>  </p></the></div>]]></content>
    </entry>
</feed>