<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://itliuwk.github.io</id>
    <title>刘伟坤</title>
    <updated>2019-05-30T08:11:49.481Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://itliuwk.github.io"/>
    <link rel="self" href="https://itliuwk.github.io/atom.xml"/>
    <logo>https://itliuwk.github.io/images/avatar.png</logo>
    <icon>https://itliuwk.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 刘伟坤</rights>
    <entry>
        <title type="html"><![CDATA[vue基于七牛云 上传图片、视频]]></title>
        <id>https://itliuwk.github.io/post/vue-ji-yu-qi-niu-yun-shang-chuan-tu-pian-shi-pin</id>
        <link href="https://itliuwk.github.io/post/vue-ji-yu-qi-niu-yun-shang-chuan-tu-pian-shi-pin">
        </link>
        <updated>2019-05-13T02:50:23.000Z</updated>
        <content type="html"><![CDATA[ <!-- more -->
<p><strong>引入依赖</strong></p>
<pre><code>import request from './request'   //这是基于 axios封装的请求
var qiniu = require('qiniu-js')  //引入 qiniu
import { getTimeForQiniu } from './date'   //这个  只是为了生成时间戳路径

</code></pre>
<p><strong>先根据后台获取token</strong></p>
<pre><code>

 
export function getQiniuToken() {
    return request({
        url: '    ',    //  对应后台token 请求接口 
        method: 'post',
        // params
    }).then(res =&gt; res.data.data).catch(e =&gt; {
        console.error(&quot;获取七牛云token失败&quot;, e)
    })
}


</code></pre>
<p><strong>七牛云方法</strong></p>
<pre><code>export async function uploadQinuImage(file) {
    var token = await getQiniuToken()
    var key = getTimeForQiniu() + file.name
    var config = {
        // useCdnDomain: true,
        region: qiniu.region.z2,
        uptoken: token,
        domain: '  ',     //配置好的七牛云域名  如   https://cdn.qniyun.com/
        unique_names: true,
    };
    var putExtra = {
        // fname: file.name,
        // params: {},
        // mimeType: [] || null
        ...config,
    }
    var observable = qiniu.upload(file, key, token, putExtra, config)
    return new Promise((resolve, reject) =&gt; {
        var subscription = observable.subscribe({
            error(err) {
                reject(data)
            },
            complete(data) {
                data.path = `  `  //拼上七牛云域名  如   https://cdn.qniyun.com/ ${data.key}
                resolve(data)
            }
        }) // 上传开始
    })

}

</code></pre>
<p><strong>导出方法</strong></p>
<pre><code>export default function uploadImage(file) {
    return uploadQinuImage(file)
}

</code></pre>
<p><strong>七牛云组件引用</strong></p>
<pre><code>    import upload from &quot;@/utils/upload&quot;;
</code></pre>
<p><strong>传上 files流</strong></p>
<pre><code>         uploadImg(e) {
                let that = this;
                let files = e.target.files[0];
                upload(files).then(res =&gt; {
                    let obj = {
                        url: res.path,
                        type: 'IMAGE',
                        size: res.fsize,
                        key: res.key,
                        thumb: res.path
                    };
                    POST_RESOURCES(obj).then(res =&gt; {
                        Alert.success('上传成功');
                        this.getList();
                    });

                });
            }

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[富文本vue-quill-editor整合七牛云上传图片]]></title>
        <id>https://itliuwk.github.io/post/fu-wen-ben-vue-quill-editor-zheng-he-qi-niu-yun-shang-chuan-tu-pian</id>
        <link href="https://itliuwk.github.io/post/fu-wen-ben-vue-quill-editor-zheng-he-qi-niu-yun-shang-chuan-tu-pian">
        </link>
        <updated>2019-04-17T07:19:26.000Z</updated>
        <summary type="html"><![CDATA[<p>1.概述
实现前提:</p>
<p>Element UI:上传使用的是Element 的el-upload组件,
可以参考 <a href="http://element.eleme.io/#/zh-CN/component/upload" target="_blank">http://element.eleme.io/#/zh-CN/component/upload</a>
quill-editor:富文本处理，可以参考文档
<a href=" https://surmon-china.github.io/vue-quill-editor/" target="_blank">https://surmon-china.github.io/vue-quill-editor/</a></p>
<p>参考文章大神的文章 <a href=" https://github.com/NextBoy/skill/issues/2" target="_blank">https://github.com/NextBoy/skill/issues/2</a>
这里主要讲解的是如何使用Element和quill-editor还有七牛云整合的思路</p>
]]></summary>
        <content type="html"><![CDATA[<p>1.概述
实现前提:</p>
<p>Element UI:上传使用的是Element 的el-upload组件,
可以参考 <a href="http://element.eleme.io/#/zh-CN/component/upload" target="_blank">http://element.eleme.io/#/zh-CN/component/upload</a>
quill-editor:富文本处理，可以参考文档
<a href=" https://surmon-china.github.io/vue-quill-editor/" target="_blank">https://surmon-china.github.io/vue-quill-editor/</a></p>
<p>参考文章大神的文章 <a href=" https://github.com/NextBoy/skill/issues/2" target="_blank">https://github.com/NextBoy/skill/issues/2</a>
这里主要讲解的是如何使用Element和quill-editor还有七牛云整合的思路</p>
<!-- more --> 
<p>实现思路：
根据大神的文章，大概思路如下：</p>
<p>1.先用el-upload组件实现和七牛云的上传。
2.隐藏掉el-upload组件。
3.处理点击富文本框的图片的按钮的时候，调用el-upload的上传。
4.上传成功后，拼接好图片的地址，按照光标的为止插入到富文本中
目标:将上面的部分封装成组件，提供给每个页面方面的使用</p>
<p><strong>1.实现代码</strong>
<strong>1.1 组件定义</strong></p>
<pre><code>&lt;!-- 
基于quill-editor的整合七牛云上传的自定义组件
elemntUI文档地址 http://element.eleme.io/#/zh-CN/component/tag
quill-editor 文档地址 https://surmon-china.github.io/vue-quill-editor/
quill-editor整合七牛云上传https://github.com/NextBoy/skill/issues/2
--&gt;
 
&lt;template&gt;
   &lt;div id='quillEditorQiniu'&gt;
       &lt;!-- 基于elementUi的上传组件 el-upload begin--&gt;
       &lt;el-upload
            class=&quot;avatar-uploader&quot;
            :action=&quot;uploadUrl&quot;
            :accept=&quot;'image/*'&quot;
            :data=&quot;qiniuForm&quot;
            :show-file-list=&quot;false&quot;
            :on-success=&quot;uploadEditorSuccess&quot;
            :on-error=&quot;uploadEditorError&quot;
            :before-upload=&quot;beforeEditorUpload&quot;&gt;
        &lt;/el-upload&gt;
        &lt;!-- 基于elementUi的上传组件 el-upload end--&gt;
        &lt;quill-editor  class=&quot;editor&quot;  v-model=&quot;content&quot; ref=&quot;customQuillEditor&quot; :options=&quot;editorOption&quot; &gt;
        &lt;/quill-editor&gt;
   &lt;/div&gt;
&lt;/template&gt;
 
&lt;script&gt;
import { quillEditor } from 'vue-quill-editor'
 
 
//自定义编辑器的工作条
const toolbarOptions = [
        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
        ['blockquote', 'code-block'],
 
        [{'header': 1}, {'header': 2}],               // custom button values
        [{'list': 'ordered'}, {'list': 'bullet'}],
        [{'script': 'sub'}, {'script': 'super'}],      // superscript/subscript
        [{'indent': '-1'}, {'indent': '+1'}],          // outdent/indent
        [{'direction': 'rtl'}],                         // text direction
 
        [{'size': ['small', false, 'large', 'huge']}],  // custom dropdown
        [{'header': [1, 2, 3, 4, 5, 6, false]}],
 
        [{'color': []}, {'background': []}],          // dropdown with defaults from theme
        [{'font': []}],
        [{'align': []}],
        ['link', 'image', 'video'],
        ['clean']                                         // remove formatting button
    ];
export default {
    data(){
        return {
           quillUpdateImg:false,
           content:'',
           editorOption:{
                  placeholder:'请填写车辆详情信息',
                  modules: {
                        toolbar: {
                            container: toolbarOptions,  // 工具栏
                            handlers: {
                                'image': function (value) {
                                    if (value) {
                                        document.querySelector('#quillEditorQiniu .avatar-uploader input').click()
                                    } else {
                                        this.quill.format('image', false);
                                    }
                                }
                            }
                        }
                 }
            },
            qiniuForm:{
                'key': '',
                'token': '',
                'domain':''
            },
        }
    },
    props:{
        token:String, //七牛云上传的token,类型为String
        domain:String, //七牛云上传的域地址,类型为String
        uploadUrl:String  //从七牛云上拿到自己的上传地址,类型为String
    },
    methods:{
        //上传图片之前
        beforeEditorUpload(res, file){
 
            //显示上传动画
            this.quillUpdateImg = true;
        },
 
        // 上传图片成功
        uploadEditorSuccess(res, file) {
 
            //拼接出上传的图片在服务器的完整地址
            let imgUrl = this.qiniuForm.domain+ res.key;
 
            //重置上传文件key，为下次上传做好准备
            this.qiniuForm.key =  new Date().getTime()+&quot;&quot;+Math.floor(Math.random()*1000);
 
            // 获取富文本组件实例
            let quill = this.$refs.customQuillEditor.quill;
 
           // 获取光标所在位置
            let length = quill.getSelection().index;
 
            // 插入图片  res.info为服务器返回的图片地址
            quill.insertEmbed(length, 'image', imgUrl)
 
            // 调整光标到最后
            quill.setSelection(length + 1)
 
            //取消上传动画
            this.quillUpdateImg = false;
 
        },
        
        // 上传图片失败
        uploadEditorError(res, file) {
            //页面提示
            Notification.error({
                   message: '上传图片失败'
            });
 
            //取消上传动画
            this.quillUpdateImg = false;
        },
 
        
 
       
    },
    mounted () {
        this.qiniuForm.key =  new Date().getTime()+&quot;&quot;+Math.floor(Math.random()*1000);
        this.qiniuForm.token = this.token;
        this.qiniuForm.domain = this.domain;
    },
    watch:{
        content(newVal, oldVal) {
          this.$emit('input', newVal);
        }
    }
 
    
 
}
&lt;/script&gt;
 
&lt;style scoped&gt;
.editor{
    min-height: 200px;
    margin-bottom: 60px;
}
&lt;/style&gt;
 

</code></pre>
<p><strong>1.2 组件的使用</strong>
<strong>1.2.1 引入组件</strong></p>
<pre><code>import SquillEditorQiniu from '@/components/quill-editor-qiniu.vue';

</code></pre>
<p><strong>1.2.2 注册成组件</strong></p>
<pre><code> components:{
        SquillEditorQiniu //富文本框上传组件
    }

</code></pre>
<p><strong>1.2.3 放入组件</strong></p>
<pre><code>&lt;squill-editor-qiniu :token='qiniuForm.token' v-model=&quot;addForm.details&quot; :domain='qiniuForm.domain' uploadUrl='http://upload.qiniup.com/'&gt;&lt;/squill-editor-qiniu&gt;

</code></pre>
<p><strong>token:需要从后台获取，后台和七牛云请求得到</strong></p>
<p><strong>v-model: 你最后得到的文本的属性</strong></p>
<p><strong>domain: 七牛云的域，可以从七牛云获取到</strong></p>
<p><strong>uploadUrl: 上传地址，也是从七牛云获取</strong></p>
<p><strong>1.2 实现效果</strong></p>
<p>我们可以看到最终上传一个图片，里面html代码里的图片地址是我们七牛云上的地址</p>
<img src="https://img-blog.csdnimg.cn/2019041711043787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMTYwOTM=,size_16,color_FFFFFF,t_70" alt="">
<img src="https://img-blog.csdnimg.cn/20190417110505661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMTYwOTM=,size_16,color_FFFFFF,t_70" alt="">
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端 nginx 跨域访问配置]]></title>
        <id>https://itliuwk.github.io/post/qian-duan-nginx-kua-yu-fang-wen-pei-zhi</id>
        <link href="https://itliuwk.github.io/post/qian-duan-nginx-kua-yu-fang-wen-pei-zhi">
        </link>
        <updated>2018-12-14T07:39:00.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>1、首先下载nginx ： <a href="http://nginx.org/en/download.html" target="_blcnk">http://nginx.org/en/download.html</a></p>
<p>2、<img src="https://img-blog.csdnimg.cn/20181214173849776.png" />
一般选择 Stable version 稳定版</p>
<p>3、 下载后 解压 随意放在那个盘 我以前下载的<code>nginx-1.12.0</code>版本</p>
<p>4、<code>E:\nginx-1.12.0\conf\nginx.conf</code> 我这放在E盘 打开 <code>nginx.conf</code></p>
<pre><code>#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

#log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
#                  '$status $body_bytes_sent &quot;$http_referer&quot; '
#                  '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';

#access_log  logs/access.log  main;

sendfile        on;
#tcp_nopush     on;

#keepalive_timeout  0;
keepalive_timeout  65;

#gzip  on;

server {
    listen       80;    ##  随意改动  我这里不改
    server_name  localhost;   ##

    #charset utf-8;  //   ##改为 utf-8; 

    #access_log  logs/host.access.log  main;

    location / {
        root   html;    ##主页   可改为其他目录
        index  index.html index.htm;   ## 主页目录入口
    }


    location /apis/{  ## 这个名称在后面请求的时候用到
        proxy_pass  http://192.168.0.104/;  ##  我这是后台的接口地址
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#    listen       8000;
#    listen       somename:8080;
#    server_name  somename  alias  another.alias;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}


# HTTPS server
#
#server {
#    listen       443 ssl;
#    server_name  localhost;

#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;

#    ssl_session_cache    shared:SSL:1m;
#    ssl_session_timeout  5m;

#    ssl_ciphers  HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers  on;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#} 
#   }

</code></pre>
<p>保存</p>
<p>启动 <code>E:\nginx-1.12.0 下的 nginx.exe</code> 然后浏览器打开<code>localhost</code></p>
<p><strong>这是前端的页面代码</strong></p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://code.jquery.com/jquery-3.1.0.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    $(function() {
        $.ajax({
     		    //http://192.168.0.104/admin/employee/getTree  原来后台的接口
            url: &quot;http://localhost/apis/admin/employee/getTree&quot;, //  这里直接改成    apis  会通过ngiux转为我们设置的接口
             //url: &quot;apis/movie/in_theaters&quot;, //  或者改成这样
            type: &quot;GET&quot;,
            success: function (data) {
                $(&quot;.text&quot;).html(JSON.stringify(data));
            },
            error: function (text) {
                $(&quot;text&quot;).html(JSON.stringify(text))
            }
        });
    });
&lt;/script&gt;

&lt;body&gt;
&lt;span class=&quot;text&quot;&gt;&lt;/span&gt;
&lt;/body&gt;

&lt;/html&gt;

</code></pre>
<p><strong>成功</strong></p>
<img src="https://img-blog.csdnimg.cn/201812141750551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMTYwOTM=,size_16,color_FFFFFF,t_70" />
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git简单生成生成公钥和私钥方法]]></title>
        <id>https://itliuwk.github.io/post/git-jian-dan-sheng-cheng-sheng-cheng-gong-yao-he-si-yao-fang-fa</id>
        <link href="https://itliuwk.github.io/post/git-jian-dan-sheng-cheng-sheng-cheng-gong-yao-he-si-yao-fang-fa">
        </link>
        <updated>2018-12-14T04:28:19.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>Git配置</strong></p>
<p>Git安装完之后，需做最后一步配置。打开git bash，分别执行以下两句命令</p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>Git配置</strong></p>
<p>Git安装完之后，需做最后一步配置。打开git bash，分别执行以下两句命令</p>
<!-- more -->
<pre><code>git config --global user.name &quot;liuwk&quot;

git config --global user.email &quot;1834183435@qq.com&quot;

</code></pre>
<p>用户名看自己喜欢起，一般都是起些容易记的，亦或者某个简称，邮箱选自己邮箱即可。（值得一提的是，我第一次生成的时候并没有执行上两句命令，而是直接在配置那里写邮箱和用户名，生成的公钥匙直接显示我的邮箱，后来拿去用不了；后来我有一步一步写的时候生成的公钥其实最后显示的并不是邮箱，而是本机名，当时我一直以为显示邮箱是对的，后面也是别人指点才得知。当然，具体什么原因我不明白，菜鸟一枚，欢迎补充！）</p>
<p><strong>SSH配置</strong></p>
<p>1、打开 git bash</p>
<p>2、执行生成公钥和私钥的命令： <code>ssh-keygen -t rsa</code>  并按回车3下（为什么按三下，是因为有提示你是否需要设置密码，如果设置了每次使用Git都会用到密码，一般都是直接不写为空，直接回车就好了）。会在一个文件夹里面生成一个私钥 id_rsa和一个公钥id_rsa.pub（可执行start ~ 命令，生成的公私钥在 .ssh的文件夹里面）</p>
<p>3、执行查看公钥的命令：<code>cat ~/.ssh/id_rsa.pub</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端怎样使用base64图片上传到七牛云]]></title>
        <id>https://itliuwk.github.io/post/qian-duan-zen-yang-shi-yong-base64-tu-pian-shang-chuan-dao-qi-niu-yun</id>
        <link href="https://itliuwk.github.io/post/qian-duan-zen-yang-shi-yong-base64-tu-pian-shang-chuan-dao-qi-niu-yun">
        </link>
        <updated>2018-12-13T08:34:12.000Z</updated>
        <summary type="html"><![CDATA[<p>先通过后端拿到 domain 和 token 值 其实就是后端通过 七牛仓库的一些配置 返为 domain 和 token</p>
]]></summary>
        <content type="html"><![CDATA[<p>先通过后端拿到 domain 和 token 值 其实就是后端通过 七牛仓库的一些配置 返为 domain 和 token</p>
<!-- more --> 
<pre><code>     let url = globalAjaxUrl + '/admin/banner/getToken';  
    pageCommon.getAjax(url, {}, function (res) {
        localStorage.setItem('domain', res.result.domain);
        localStorage.setItem('token', res.result.token);
    });

</code></pre>
<p>我这里保存到了localStorage中</p>
<img src="https://img-blog.csdnimg.cn/20181213162702251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMTYwOTM=,size_16,color_FFFFFF,t_70" />
<p>传入 base64 的值</p>
<pre><code> 	    getTokenUrl:function (base) {
	        let src;
	        let token = localStorage.getItem('token');  // 获取到localStorage的 token
	        let pic = base.split(&quot;base64,&quot;)[1];  //七牛云需要接受的参数是  base64， 后面的值 所以我把它截取了
	        let url = 'http://upload-z2.qiniup.com/putb64/-1';  //  我这个是华南地区的   要根据仓库选择url   这个是官方的  https://developer.qiniu.com/kodo/kb/1326/how-to-upload-photos-to-seven-niuyun-base64-code
	        $.ajax({
	            url: url,
	            type: 'POST',
	            async:false,  //  这里我使用  同步的方式是为了把  得到的 src 返回出去
	            beforeSend (request) { // 请求之前设置请求头
	                request.setRequestHeader('Content-Type', 'application/octet-stream');
	                request.setRequestHeader('Authorization', 'UpToken ' + token)   // token服务端请求
	            },
	            data: pic,
	            success: function (data) {
	                let domain =  localStorage.getItem('domain');  
	                src = ' http://' + domain +'/'+ data.key;   // 拼接上 domain就可以得到图片的url链接
	            }
	        });
	        return src;
    }

</code></pre>
<p>这里函数 返回的 src 就是一个图片路径了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Linux系统安装Nodejs 最简单步骤]]></title>
        <id>https://itliuwk.github.io/post/zai-linux-xi-tong-an-zhuang-nodejs-zui-jian-dan-bu-zou</id>
        <link href="https://itliuwk.github.io/post/zai-linux-xi-tong-an-zhuang-nodejs-zui-jian-dan-bu-zou">
        </link>
        <updated>2018-12-13T06:48:39.000Z</updated>
        <summary type="html"><![CDATA[<p>1、 去官网下载和自己系统匹配的文件：</p>
]]></summary>
        <content type="html"><![CDATA[<p>1、 去官网下载和自己系统匹配的文件：</p>
<!-- more -->
<p>英文网址：<a href="https://nodejs.org/en/download/" rel="nofollow" target="_blank">https://nodejs.org/en/download/</a></p>
<p>中文网址：<a href="http://nodejs.cn/download/" rel="nofollow" target="_blank">http://nodejs.cn/download/</a></p>
<p>通过 uname -a 命令查看到我的Linux系统位数是64位（备注：x86_64表示64位系统， i686 i386表示32位系统），如图
<img src="https://images2015.cnblogs.com/blog/625378/201703/625378-20170301104556454-1441797328.png" alt="在这里插入图片描述"></p>
<p>故下载一下红色框中文件 ，版本为v6.10.0</p>
<img src="https://images2015.cnblogs.com/blog/625378/201703/625378-20170301103915345-1771725166.png" alt="在这里插入图片描述">
<p>2、 下载下来的tar文件上传到服务器并且解压，然后通过建立软连接变为全局；</p>
<p>1）上传服务器可以是自己任意路径，目前我的放置路径为 cd /app/software/</p>
<p>2）解压上传（解压后的文件我这边将名字改为了nodejs，这个地方自己随意，只要在建立软连接的时候写正确就可以）</p>
<p>① tar -xvf node-v6.10.0-linux-x64.tar.xz</p>
<p>② mv node-v6.10.0-linux-x64 nodejs</p>
<p>③ 确认一下nodejs下bin目录是否有node 和npm文件，如果有执行软连接，如果没有重新下载执行上边步骤；</p>
<p>3）建立软连接，变为全局</p>
<p>① ln -s /app/software/nodejs/bin/npm /usr/local/bin/</p>
<p>② ln -s /app/software/nodejs/bin/node /usr/local/bin/
4）最后一步检验nodejs是否已变为全局</p>
<p>在Linux命令行node -v 命令会显示nodejs版本，如图所示为大功告成</p>
<img src="https://images2015.cnblogs.com/blog/625378/201703/625378-20170301111018532-950176454.png" alt="在这里插入图片描述">]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[centOS6.8安装nginx]]></title>
        <id>https://itliuwk.github.io/post/centos68-an-zhuang-nginx</id>
        <link href="https://itliuwk.github.io/post/centos68-an-zhuang-nginx">
        </link>
        <updated>2018-12-13T06:48:22.000Z</updated>
        <summary type="html"><![CDATA[<p>1.安装nginx所需环境：
yum install gcc
yum install pcre-devel
yum install zlib zlib-devel
yum install openssl openssl-devel
或者一键安装：yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</p>
]]></summary>
        <content type="html"><![CDATA[<p>1.安装nginx所需环境：
yum install gcc
yum install pcre-devel
yum install zlib zlib-devel
yum install openssl openssl-devel
或者一键安装：yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</p>
<!-- more --> 
<p>2.下载nginx压缩包：
wget <a href="http://nginx.org/download/nginx-1.15.7.tar.gz" > http://nginx.org/download/nginx-1.15.7.tar.gz</a></p>
<p>下载在当前目录</p>
<p>3.解压缩：tar -zxvf nginx-1.15.7.tar.gz</p>
<p>4.进入nginx-1.10.2目录：cd nginx-1.15.7</p>
<ol start="5">
<li>
<p>执行 ./configure</p>
</li>
<li>
<p>执行make</p>
</li>
<li>
<p>执行make install</p>
</li>
<li>
<p>查找nginx安装目录：whereis nginx</p>
</li>
</ol>
<p>9.进入niginx安装目录,默认在 cd /usr/local/nginx/sbin</p>
<ol start="10">
<li>执行 ./nginx</li>
</ol>
<p>11.打开浏览器，输入ip地址，看到welcome to nginx！即安装成功</p>
<p>如不行 在 sbin目录下执行下面步骤</p>
<p>fuser -k 80/tcp 强制停止80端口</p>
<p>./nginx -s reload 重载 nginx</p>
<p>./nginx -t 启动</p>
<p>./nginx 启动</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[layui 表格的下拉选择]]></title>
        <id>https://itliuwk.github.io/post/layui-biao-ge-de-xia-la-xuan-ze</id>
        <link href="https://itliuwk.github.io/post/layui-biao-ge-de-xia-la-xuan-ze">
        </link>
        <updated>2018-09-13T06:40:33.000Z</updated>
        <content type="html"><![CDATA[<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;layui 模仿下拉框 &lt;/title&gt;
    &lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../js/plugins/layui/css/layui.css&quot;/&gt;
    &lt;style&gt;
        body, div, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, pre, code, form, fieldset, legend, input, textarea, p, blockquote, th, td {
            margin: 0;
            padding: 0;
            list-style: none;
            border: none;
        }

        html, body {
            position: relative;
            background: #EDF0F5;
            color: #505458;
            font-family: &quot;微软雅黑&quot;;
            font-size: 14px;
        }

        .layui-table thead tr {
            background-color: #fff;
        }

        .laytable-cell-1-sel {
            overflow: inherit;
        }

        .layui-table-cell span {
            font-weight: bold;
        }

        .layui-table-body tbody tr {
            height: 50px;
        }

        .selectDemo {
            height: 30px;
            border: 1px solid #e6e6e6;
            border-radius: 4px;
        }

    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;table class=&quot;layui-hide&quot; id=&quot;test&quot;&gt;&lt;/table&gt;


&lt;script type=&quot;text/html&quot; id=&quot;select&quot;&gt;
    &lt;select lay-filter=&quot;selDome&quot; class=&quot;selectDemo&quot; data-id=&quot;{{d.id}}&quot; lay-ignore onchange=&quot;selectDemo(this)&quot;&gt;
        {{# layui.each(d.sel, function(index, item){ }}
            &lt;option value=&quot;{{item}}&quot;&gt;{{item}}&lt;/option&gt;
        {{# }); }}
    &lt;/select&gt;
&lt;/script&gt;
&lt;script src=&quot;../assets/scripts/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;../js/plugins/layui/layui.all.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;


&lt;script&gt;


    var table = layui.table
        , form = layui.form;

    table.render({
        elem: '#test'
        , url: 'index.json'
        , sort: false
        , unresize: true
        , skin: 'line'
        , cols: [[
            {type: 'numbers'}
            , {field: 'id', title: 'ID', width: 100}
            , {field: 'username', title: '用户名', templet: '#usernameTpl'}
            , {field: 'city', title: '城市'}
            , {field: 'wealth', title: '财富', minWidth: 120}
            , {field: 'sel', title: '下拉选择', width: 110, templet: '#select'}
        ]]
    });

    function selectDemo(a) {
        console.log($(a).attr('data-id'));
        console.log($(a).val());
    }

&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>lindex.json</strong></p>
<pre><code>{
  &quot;code&quot;: 0,
  &quot;count&quot;: 1000,
  &quot;data&quot;: [
    {
      &quot;city&quot;: &quot;城市-0&quot;,
      &quot;classify&quot;: &quot;作家&quot;,
      &quot;experience&quot;: 255,
      &quot;id&quot;: 10000,
      &quot;logins&quot;: 24,
      &quot;score&quot;: 57,
      &quot;sex&quot;: &quot;女&quot;,
      &quot;sign&quot;: &quot;签名-0&quot;,
      &quot;username&quot;: &quot;user-0&quot;,
      &quot;wealth&quot;: 82830700,
      &quot;sel&quot;:[&quot;测试1&quot;,&quot;测试2&quot;,&quot;测试3&quot;,&quot;测试4&quot;]
    },
    {
      &quot;city&quot;: &quot;城市-1&quot;,
      &quot;classify&quot;: &quot;词人&quot;,
      &quot;experience&quot;: 884,
      &quot;id&quot;: 10001,
      &quot;logins&quot;: 58,
      &quot;score&quot;: 27,
      &quot;sex&quot;: &quot;男&quot;,
      &quot;sign&quot;: &quot;签名-1&quot;,
      &quot;username&quot;: &quot;user-1&quot;,
      &quot;wealth&quot;: 64928690,
      &quot;sel&quot;:[&quot;测试1&quot;,&quot;测试2&quot;,&quot;测试3&quot;]
    },
    {
      &quot;city&quot;: &quot;城市-2&quot;,
      &quot;classify&quot;: &quot;码农&quot;,
      &quot;experience&quot;: 884,
      &quot;id&quot;: 10003,
      &quot;logins&quot;: 58,
      &quot;score&quot;: 27,
      &quot;sex&quot;: &quot;女&quot;,
      &quot;sign&quot;: &quot;签名-1&quot;,
      &quot;username&quot;: &quot;user-1&quot;,
      &quot;wealth&quot;: 64928690,
      &quot;sel&quot;:[&quot;测试1&quot;,&quot;测试2&quot;,&quot;测试3&quot;]
    },
    {
      &quot;city&quot;: &quot;城市-3&quot;,
      &quot;classify&quot;: &quot;码农&quot;,
      &quot;experience&quot;: 884,
      &quot;id&quot;: 10004,
      &quot;logins&quot;: 58,
      &quot;score&quot;: 27,
      &quot;sex&quot;: &quot;女&quot;,
      &quot;sign&quot;: &quot;签名-1&quot;,
      &quot;username&quot;: &quot;user-1&quot;,
      &quot;wealth&quot;: 64928690,
      &quot;sel&quot;:[&quot;测试1&quot;,&quot;测试2&quot;,&quot;测试3&quot;]
    }
  ],
  &quot;msg&quot;: &quot;&quot;
}
</code></pre>
<p><strong>页面显示</strong></p>
<img src="https://img-blog.csdn.net/20180913144420870?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMTYwOTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title="">]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈js中子页面父页面方法 变量相互调用]]></title>
        <id>https://itliuwk.github.io/post/qianTan</id>
        <link href="https://itliuwk.github.io/post/qianTan">
        </link>
        <updated>2018-08-23T08:07:32.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>(1）子页面调用父页面的方法或者变量：</strong></p>
<p>window.parent.方法()或者变量名
window.parent相当于定位到父页面 之后的操作和在父页面中写代码一样写</p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>(1）子页面调用父页面的方法或者变量：</strong></p>
<p>window.parent.方法()或者变量名
window.parent相当于定位到父页面 之后的操作和在父页面中写代码一样写</p>
<!-- more -->
<pre><code>window.parent.aa();//调取aa函数
window.parent.bb;//调取bb变量

例如：想在子页面中得到id为aaa的文本框的值

window.parent.$(&quot;#aaa&quot;).val();//这种写法的前提是引用了jquery 

window.parent.getElementById(&quot;aaa&quot;).value; //js的写法
</code></pre>
<p>**（2）父页面调取子页面 **</p>
<p>主要是通过contentWindow定位到子页面</p>
<pre><code>document.getElementById(&quot;childframe&quot;).contentWindow.childtest();
//调取子页面中的childtest方法 js的写法

var childWindow = $(&quot;#addFrame&quot;)[0].contentWindow;//获取子窗体中的对象
childWindow.formSubmit();//调取子页面的formSubmit方法 jquery的写法
//注释：其中 childframe和addFrame 都时iframe的id

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[js 上传多个文件 可以随意删除某个文件]]></title>
        <id>https://itliuwk.github.io/post/js-shang-chuan-duo-ge-wen-jian-ke-yi-sui-yi-shan-chu-mou-ge-wen-jian</id>
        <link href="https://itliuwk.github.io/post/js-shang-chuan-duo-ge-wen-jian-ke-yi-sui-yi-shan-chu-mou-ge-wen-jian">
        </link>
        <updated>2018-08-22T08:06:22.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<pre><code>         &lt;a href=&quot;javascript:void(0)&quot; class=&quot;select_the_file&quot;&gt;选择文件
                        &lt;input type=&quot;file&quot; class=&quot;iptFile&quot; onchange=&quot;upFile(this)&quot;&gt; //把事件写在这里
                    &lt;/a&gt;  //用 a链接包住的原因是为了美化 input file
                    &lt;span class=&quot;no_file&quot;&gt;未选择文件&lt;/span&gt;
                    &lt;ul class=&quot;upload-enclosure-ul&quot;&gt; // 根据上传的文件生成 每个 li
                          &lt;!--   &lt;li&gt;
                                 &lt;span&gt;asdasdgfbhfdfdfsd.pdf&lt;/span&gt;  //文件名
                                 &lt;span class=&quot;size&quot;&gt;(267kb)&lt;/span&gt;   //大小
                                 &lt;span class=&quot;remove&quot;&gt;删除&lt;/span&gt;  //删除对应 input file 标签
                             &lt;/li&gt;
                             &lt;li&gt;
                                 &lt;span&gt;dfsgdfdfgdfg.doc&lt;/span&gt;
                                 &lt;span class=&quot;size&quot;&gt;(267kb)&lt;/span&gt;
                                 &lt;span class=&quot;remove&quot;&gt;删除&lt;/span&gt;
                             &lt;/li&gt;--&gt;
                    &lt;/ul&gt;
</code></pre>
<p><strong>对应的界面</strong></p>
<img src="https://img-blog.csdn.net/20180822154658183?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMTYwOTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title="">
<p><strong>对用的事件方法</strong></p>
<pre><code>function upFile(a) {

    var flag = $(a);
    if (!flag[0].files || !flag[0].files[0]) {
        return;
    }
    var name = flag[0].files[0].name;
    var suffix =suffixName(name)[0].toLowerCase(); //后缀名
    var size = flag[0].files[0].size;  //文件大小
    var fr = new FileReader(); // 这个FileReader应该对应于每一个读取的文件都需要重新new一个
    var files = flag[0].files[0]; // files可以获取当前文件输入框中选择的所有文件，返回列表
    fr.readAsDataURL(files); // 读取的内容是加密以后的本地文件路径
    fr.onload = function (e) { // 数据读取完成时触发onload对应的响应函数
        console.log(123);
        var timeStamp = Math.floor(Math.random() * 10000); //自定义一个随机数
        $(flag).parent().addClass('li' + timeStamp).hide(); //每次隐藏之前添加一个Class
        var html = '&lt;a href=&quot;javascript:void(0)&quot; class=&quot;select_the_file&quot;&gt;选择文件\n' +
            '                        &lt;input type=&quot;file&quot; class=&quot;iptFile&quot; onchange=&quot;upFile(this)&quot;&gt;\n' +
            '                    &lt;/a&gt;';
        $('.no_file').before(html);//每次生成一个input file  插入到节点

        var li;
        if (suffix == '.jpg' || suffix == '.jpeg' || suffix == '.png' || suffix == '.bmp' || suffix == '.gif') { //图片格式
            li =   '&lt;li&gt; &lt;span&gt;&lt;i class=&quot;fa fa-file-image-o&quot;&gt;&amp;nbsp;&lt;/i&gt;' + name + '&lt;/span&gt; &lt;span class=&quot;size&quot;&gt;(' + parseInt(files.size / 1000) + 'kb)&lt;/span&gt; &lt;span class=&quot;remove&quot; data-class=&quot;li' + timeStamp + '&quot;  onclick=&quot;deleteLi(this)&quot;&gt;删除&lt;/span&gt; &lt;/li&gt;';
        } else if (suffix == '.doc' || suffix == '.docx') {//word格式
            li = '&lt;li&gt;&lt;span&gt;&lt;i class=&quot;fa fa-file-word-o&quot;&gt;&amp;nbsp;&lt;/i&gt;' + name + '&lt;/span&gt; &lt;span class=&quot;size&quot;&gt;(' + parseInt(files.size / 1000) + 'kb)&lt;/span&gt; &lt;span class=&quot;remove&quot; data-class=&quot;li' + timeStamp + '&quot;  onclick=&quot;deleteLi(this)&quot;&gt;删除&lt;/span&gt; &lt;/li&gt;';
        } else if (suffix == '.xls' || suffix == '.xlsx') {//excel格式
            li = '&lt;li&gt;&lt;span&gt;&lt;i class=&quot;fa fa-file-excel-o&quot;&gt;&amp;nbsp;&lt;/i&gt;' + name + '&lt;/span&gt; &lt;span class=&quot;size&quot;&gt;(' + parseInt(files.size / 1000) + 'kb)&lt;/span&gt; &lt;span class=&quot;remove&quot; data-class=&quot;li' + timeStamp + '&quot;  onclick=&quot;deleteLi(this)&quot;&gt;删除&lt;/span&gt; &lt;/li&gt;';
        } else if (suffix == '.ppt' || suffix == '.pptx') {//PPT格式
            li = '&lt;li&gt;&lt;span&gt;&lt;i class=&quot;fa fa-file-pdf-o&quot;&gt;&amp;nbsp;&lt;/i&gt;' + name + '&lt;/span&gt; &lt;span class=&quot;size&quot;&gt;(' + parseInt(files.size / 1000) + 'kb)&lt;/span&gt; &lt;span class=&quot;remove&quot; data-class=&quot;li' + timeStamp + '&quot;  onclick=&quot;deleteLi(this)&quot;&gt;删除&lt;/span&gt; &lt;/li&gt;';
        }else if (suffix == '.ppt' || suffix == '.pdf') {//PDF格式
            li = '&lt;li&gt;&lt;span&gt;&lt;i class=&quot;fa fa-file-pdf-o&quot;&gt;&amp;nbsp;&lt;/i&gt;' + name + '&lt;/span&gt; &lt;span class=&quot;size&quot;&gt;(' + parseInt(files.size / 1000) + 'kb)&lt;/span&gt; &lt;span class=&quot;remove&quot; data-class=&quot;li' + timeStamp + '&quot;  onclick=&quot;deleteLi(this)&quot;&gt;删除&lt;/span&gt; &lt;/li&gt;';
        }else if (suffix == '.zip' || suffix == '.rar'|| suffix == '.7z') {//压缩格式
            li = '&lt;li&gt;&lt;span&gt;&lt;i class=&quot;fa fa-file-excel-o&quot;&gt;&amp;nbsp;&lt;/i&gt;' + name + '&lt;/span&gt; &lt;span class=&quot;size&quot;&gt;(' + parseInt(files.size / 1000) + 'kb)&lt;/span&gt; &lt;span class=&quot;remove&quot; data-class=&quot;li' + timeStamp + '&quot;  onclick=&quot;deleteLi(this)&quot;&gt;删除&lt;/span&gt; &lt;/li&gt;';
        }else if (suffix == '.wav' || suffix == '.mp3'|| suffix == '.aac'|| suffix == '.wma') {//声音格式
            li = '&lt;li&gt;&lt;span&gt;&lt;i class=&quot;fa fa-file-video-o&quot;&gt;&amp;nbsp;&lt;/i&gt;' + name + '&lt;/span&gt; &lt;span class=&quot;size&quot;&gt;(' + parseInt(files.size / 1000) + 'kb)&lt;/span&gt; &lt;span class=&quot;remove&quot; data-class=&quot;li' + timeStamp + '&quot;  onclick=&quot;deleteLi(this)&quot;&gt;删除&lt;/span&gt; &lt;/li&gt;';
        }else if (suffix == '.avi' || suffix == '.mp4'|| suffix == '.mov'|| suffix == '.mkv'||suffix == '.rm' || suffix == '.rmvb'|| suffix == '.mpg'|| suffix == '.mpeg') {//视频格式
            li = '&lt;li&gt;&lt;span&gt;&lt;i class=&quot;fa fa-file-video-o&quot;&gt;&amp;nbsp;&lt;/i&gt;' + name + '&lt;/span&gt; &lt;span class=&quot;size&quot;&gt;(' + parseInt(files.size / 1000) + 'kb)&lt;/span&gt; &lt;span class=&quot;remove&quot; data-class=&quot;li' + timeStamp + '&quot;  onclick=&quot;deleteLi(this)&quot;&gt;删除&lt;/span&gt; &lt;/li&gt;';
        }else if (suffix == '.txt' ) {//文本格式
            li = '&lt;li&gt;&lt;span&gt;&lt;i class=&quot;fa fa-file-text-o&quot;&gt;&amp;nbsp;&lt;/i&gt;' + name + '&lt;/span&gt; &lt;span class=&quot;size&quot;&gt;(' + parseInt(files.size / 1000) + 'kb)&lt;/span&gt; &lt;span class=&quot;remove&quot; data-class=&quot;li' + timeStamp + '&quot;  onclick=&quot;deleteLi(this)&quot;&gt;删除&lt;/span&gt; &lt;/li&gt;';
        }else {
            li = '&lt;li&gt;&lt;span&gt;&lt;i class=&quot;fa fa-file-o&quot;&gt;&amp;nbsp;&lt;/i&gt;' + name + '&lt;/span&gt; &lt;span class=&quot;size&quot;&gt;(' + parseInt(files.size / 1000) + 'kb)&lt;/span&gt; &lt;span class=&quot;remove&quot; data-class=&quot;li' + timeStamp + '&quot;  onclick=&quot;deleteLi(this)&quot;&gt;删除&lt;/span&gt; &lt;/li&gt;';
        }

        if ($('.upload-enclosure-ul li').length &lt; 10) {  //判断不能超过10个  可自行写入多少
            $('.upload-enclosure-ul').append(li);
        } else {
            pageCommon.layerMsg(&quot;最多能选择10个附件&quot;, 2, true)
        }

        if ($('.upload-enclosure-ul li').length != 0) {  // 显示隐藏 未选择文件字眼
            $('.no_file').hide();
        } else {
            $('.no_file').show();
        }
    };


}



function deleteLi(a) {
    $(a).parent().remove();
    var attr = $(a).attr('data-class');
    var newAttr = '.' + attr;
    $('.inspection_item_con_file  ' + newAttr + '').remove(); //删除对应 input file

    if ($('.upload-enclosure-ul li').length != 0) { // 显示隐藏 未选择文件字眼
        $('.no_file').hide();
    } else {
        $('.no_file').show();
    }
}



function suffixName(file_name){
    var result = /\.[^\.]+/.exec(file_name);
    return result;
}
</code></pre>
<p><strong>思路：每次选择完文件 fr.onload 方法 里面随机生成一个数 然后 给当前的 input file 设 class 为 随机生成的数后隐藏元素</strong></p>
<pre><code> var timeStamp = Math.floor(Math.random() * 10000); //自定义一个随机数
 $(flag).parent().addClass('li' + timeStamp).hide(); //每次隐藏当前input file之前添加一个Class
</code></pre>
<p>重点是 每个ul 的 li 里面 也自定义一个属性 值为 随机生成的数 相对应好 input file 我这里的自定义属性为
data-class 为了删除的时候好拿值 生成li 就要 添加到 ul 标签里面</p>
<pre><code>&lt;li&gt; &lt;span&gt;&lt;i class=&quot;fa fa-file-image-o&quot;&gt;&amp;nbsp;&lt;/i&gt;' + name + '&lt;/span&gt; &lt;span class=&quot;size&quot;&gt;(' + parseInt(files.size / 1000) + 'kb)&lt;/span&gt; &lt;span class=&quot;remove&quot; data-class=&quot;li' + timeStamp + '&quot;  onclick=&quot;deleteLi(this)&quot;&gt;删除&lt;/span&gt; &lt;/li&gt;
</code></pre>
<p>因为当前的 input file 隐藏了 就要生成回去页面</p>
<pre><code>var html = '&lt;a href=&quot;javascript:void(0)&quot; class=&quot;select_the_file&quot;&gt;选择文件\n' +
            '                        &lt;input type=&quot;file&quot; class=&quot;iptFile&quot; onchange=&quot;upFile(this)&quot;&gt;\n' +
            '                    &lt;/a&gt;';
        $('.no_file').before(html);//每次生成一个input file  插入到节点
</code></pre>
<p>上传了两个文件的结果</p>
<img src="https://img-blog.csdn.net/20180822160205583?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzMTYwOTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title="">
<p>下面是删除 因为每个 li 里面 的 <strong>删除</strong> 写了个 deleteLi事件</p>
<pre><code>function deleteLi(a) {

    var attr = $(a).attr('data-class'); //获取到 定义的自定义属性值   值对应隐藏的input file  的class
    var newAttr = '.' + attr;
    $('.inspection_item_con_file  ' + newAttr + '').remove(); //删除对应 input file

    if ($('.upload-enclosure-ul li').length != 0) {  // 显示隐藏 未选择文件字眼
        $('.no_file').hide();
    } else {
        $('.no_file').show();
    }
    $(a).parent().remove();//自己删除自己
}
</code></pre>
]]></content>
    </entry>
</feed>